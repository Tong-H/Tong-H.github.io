<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2025-02</title>
    <url>/2025/02/11/202502/</url>
    <content><![CDATA[<h2 id="2025-02-28"><a href="#2025-02-28" class="headerlink" title="2025/02/28"></a>2025/02/28</h2><ul>
<li>ts supports</li>
<li>React.memo vs usememo</li>
<li><code>instanceof</code> and <code>isArray</code></li>
<li><code>v-for</code> and <code>v-if</code>, <code>v-for</code> runs before <code>v-if</code></li>
</ul>
<h2 id="2025-02-23"><a href="#2025-02-23" class="headerlink" title="2025/02/23"></a>2025/02/23</h2><ul>
<li><a href="/2021/11/17/notes_js/#comparison-api"><code>comparison-api</code> differs from <code>options-api</code> and <code>hooks</code></a></li>
<li><a href="/2021/11/17/notes_js/#vue-components">vue components</a></li>
<li><a href="/2023/11/17/notes_jp/#quick-review">jp 52</a></li>
</ul>
<h2 id="2025-02-20"><a href="#2025-02-20" class="headerlink" title="2025/02/20"></a>2025/02/20</h2><ul>
<li><code>rxjs</code>, <code>ts error</code>, Property ‘next’ does not exist on type ‘Observable&lt;’<ul>
<li><code>subject</code> is an extended version of Observable, and has <code>next</code> defined. a <code>subject</code>‘s type is transformed into an <code>observable</code> by calling <code>piple</code>. however the <code>next</code> prop remains available.</li>
<li>for better ts practice, it’s recommended to separate the input stream(subject) from output stream(observable), like read and write operations</li>
</ul>
</li>
<li>With vue3 setup syntax, install Volar and disable Vetur which is official VS Code extension for Vue 2</li>
</ul>
<h2 id="2025-02-12"><a href="#2025-02-12" class="headerlink" title="2025/02/12"></a>2025/02/12</h2><ul>
<li><code>currying 柯里化</code>, transform a function that takes multiple arguments into a sequence of functions, each taking a single argument. easier to compose and chain functions</li>
</ul>
<h2 id="2025-02-11"><a href="#2025-02-11" class="headerlink" title="2025/02/11"></a>2025/02/11</h2><ul>
<li><a href="/2021/11/17/notes_js/#rxjs">rxjs</a></li>
<li><a href="/2021/11/17/notes_js/#vue.esm-bundler-vs-vue.runtime.esm-bundler.js">vue.esm-bundler vs vue.runtime.esm-bundler.js</a></li>
<li><a href="/2021/11/17/notes_js/#reactive-vs-ref">reactive vs ref</a></li>
<li><a href="/2021/11/17/notes_js/#vue-cssfeatures">vue-cssfeatures</a></li>
</ul>
<h2 id="2025-02-07"><a href="#2025-02-07" class="headerlink" title="2025/02/07"></a>2025/02/07</h2><ul>
<li>free up the space of c drive<ul>
<li>reduce vitural memory, move the paging file to another drive</li>
<li>extend C: drive, move space from another drive to C: drive</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Daily Snippets</category>
      </categories>
  </entry>
  <entry>
    <title>202501 &amp; before</title>
    <url>/2025/01/11/202501/</url>
    <content><![CDATA[<h2 id="2023-7-19"><a href="#2023-7-19" class="headerlink" title="2023/7/19"></a>2023/7/19</h2><ul>
<li><code>CSS filter</code> can form <code>stacking context</code></li>
<li><code>input</code>‘s’ property <code>hidden</code> does not work in Safari</li>
</ul>
<h2 id="2024-11-15"><a href="#2024-11-15" class="headerlink" title="2024/11/15"></a>2024/11/15</h2><ul>
<li>Vertical or horizontal lines with gradient strokes in SVG won’t display.</li>
<li><blockquote>
<p>Keyword objectBoundingBox should not be used when the geometry of the applicable element has no width or no height, such as the case of a horizontal or vertical line, even when the line has actual thickness when viewed due to having a non-zero stroke width since stroke width is ignored for bounding box calculations. When the geometry of the applicable element has no width or height and objectBoundingBox is specified, then the given effect (e.g., a gradient or a filter) will be ignored.<br><a href="https://stackoverflow.com/questions/21638169/svg-line-with-gradient-stroke-wont-display-if-vertical-or-horizontal">https://stackoverflow.com/questions/21638169/svg-line-with-gradient-stroke-wont-display-if-vertical-or-horizontal</a></p>
</blockquote>
</li>
<li><ol>
<li>change pattern to “userSpaceOnUse”</li>
</ol>
</li>
<li><ol start="2">
<li>Gradually add a tiny amount to the values, ensuring they are not vertical or horizontal</li>
</ol>
</li>
</ul>
<h2 id="2024-11-26"><a href="#2024-11-26" class="headerlink" title="2024/11/26"></a>2024/11/26</h2><ul>
<li>yarn network problem, change mirror is not work and the network is fine with the official mirror url “<a href="https://registry.yarnpkg.com&quot;/">https://registry.yarnpkg.com&quot;</a><ul>
<li>delete .lock file can work, but of couse i cannot do it. so instead delete the lock file, i changed all the mirror in the .lock file, this will helps a little.</li>
<li>increase the network timeout is working, the default value is 30 seconds.<ul>
<li><code>yarn install --network-timeout 1000000</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="2024-11-27"><a href="#2024-11-27" class="headerlink" title="2024/11/27"></a>2024/11/27</h2><ul>
<li><p>rn error, can find a package, because jcenter is deprecated</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">Execution failed <span class="keyword">for</span> task <span class="string">&#x27;:app:checkDevDebugAarMetadata&#x27;</span>.</span><br><span class="line">&gt; Could not <span class="built_in">resolve</span> <span class="keyword">all</span> <span class="keyword">files</span> <span class="keyword">for</span> configuration <span class="string">&#x27;:app:devDebugRuntimeClasspath&#x27;</span>.</span><br><span class="line">  &gt; Could not <span class="keyword">find</span> updateapputils-<span class="number">2.3</span>.<span class="number">0</span>.aar (<span class="keyword">com</span>.teprinciple:updateapputil<span class="variable">s:2</span>.<span class="number">3.0</span>).</span><br><span class="line">    Searched in the following location<span class="variable">s:</span></span><br><span class="line">        http<span class="variable">s:</span>//jcenter.bintray.<span class="keyword">com</span>/<span class="keyword">com</span>/teprinciple/updateapputils/<span class="number">2.3</span>.<span class="number">0</span>/updateapputils-<span class="number">2.3</span>.<span class="number">0</span>.aar</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>assembleRelease: Builds the release version for the entire project (all modules).<br>app:assembleRelease: Builds the release version for the app module specifically, which is often the main module in an Android project.</p>
<h2 id="2024-12-23"><a href="#2024-12-23" class="headerlink" title="2024/12/23"></a>2024/12/23</h2><ul>
<li><code>Barrel files</code> are files that re-export the APIs of other files in the same directory.<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">&#x27;./color.js&#x27;</span></span><br></pre></td></tr></table></figure>
vite performance friendly</li>
<li>use explicit import paths as much as possible, reduce filesystem checks.</li>
<li>use incognito mode and don’t check <code>Disable Cache</code> if you can. cause “The Vite dev server does hard caching of pre-bundled dependencies and implements fast 304 responses for source code.”</li>
<li><code>server.warmup</code>.  <code>to warm up files that are frequently used to not overload the Vite dev server on startup</code></li>
</ul>
<h2 id="2024-12-24"><a href="#2024-12-24" class="headerlink" title="2024/12/24"></a>2024/12/24</h2><ul>
<li>paths with spaces need to be wrapped by quotation marks in windows command</li>
<li>use jenv to manage java versions</li>
</ul>
<h2 id="2024-12-27"><a href="#2024-12-27" class="headerlink" title="2024/12/27"></a>2024/12/27</h2><p>json.stringify resigns each value a replacer, but not handle the result after all the replacers have been applied</p>
<h2 id="2024-01-09"><a href="#2024-01-09" class="headerlink" title="2024/01/09"></a>2024/01/09</h2><ul>
<li>corepack</li>
<li><a href="/2021/11/17/notes_js/#gitlab-ci-cd">gitlab ci/cd</a></li>
</ul>
<h2 id="2025-01-16"><a href="#2025-01-16" class="headerlink" title="2025/01/16"></a>2025/01/16</h2><ul>
<li><a href="/2021/11/17/notes_js/#code">302 handle</a></li>
</ul>
<h2 id="2025-01-24"><a href="#2025-01-24" class="headerlink" title="2025/01/24"></a>2025/01/24</h2><ul>
<li>crypto doesn’t work under <code>http</code></li>
<li><a href="/2021/11/17/notes_js/#vue">vue scoped style</a></li>
</ul>
]]></content>
      <categories>
        <category>Daily Snippets</category>
      </categories>
  </entry>
  <entry>
    <title>JSON是什么，如何处理转义？</title>
    <url>/2018/01/04/JSON/</url>
    <content><![CDATA[<h1 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h1><p>JSON一种数据交换格式。在JSON出现之前， 大家一直用XML来传递数据。因为XML是一种纯文本格式，所以它适合在网络上交换数据。XML本身不算复杂，但是， 加上DTD、XSD、XPath、XSLT等一大堆复杂的规范以后，即使你努力钻研几个月，也未必搞得清楚XML的规范。</p>
<p>终于，在2002年的一天，道格拉斯·克罗克福特发明了JSON这种超轻量级的数据交换格式。</p>
<p>由于JSON非常简单，很快就风靡Web世界。而在JavaScript中，我们可 以直接使用JSON，因为JavaScript内置了JSON的解析。把任何JavaScript对象变成JSON，就是把这个对象序列化成一个JSON 格式的字符串，这样才能够通过网络传递给其他计算机。如果我们收到一个JSON格式的字符串，只需要把它反序列化成一个JavaS cript对象，就可以在JavaScript中直接使用这个对象了。</p>
<h1 id="知识剖析"><a href="#知识剖析" class="headerlink" title="知识剖析"></a>知识剖析</h1><p>JSON语法</p>
<p>数据在名称/值对中</p>
<p>数据由逗号分隔</p>
<p>大括号保存对象</p>
<p>中括号保存数组</p>
<p>JSON值</p>
<p>数字(整数/浮点数)</p>
<p>字符串(双引号)</p>
<p>布尔值(true/false)</p>
<p>数组(中括号中)</p>
<p>对象(大括号中)</p>
<p>null</p>
<p>实例</p>
<p>JSON 数据的书写格式是：名称/值对。</p>
<p>名称/值对组合中的名称写在前面（在双引号中），值对写在后面，中间用冒号隔开，</p>
<p>其中 值 可以是：数字（整数或浮点数）、字符串（在双引号中）、逻辑值（true或false）、数组（在方括号中）、对象（在花括号中）、null</p>
<p>使用方式：</p>
<p>varjson= {“name”:”myname”,”password”:123456}</p>
<p>或者是嵌套使用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">  myObj = &#123;</span><br><span class="line"></span><br><span class="line">      <span class="string">&quot;name&quot;</span>:<span class="string">&quot;runoob&quot;</span>,</span><br><span class="line"></span><br><span class="line">      <span class="string">&quot;alexa&quot;</span>:<span class="number">10000</span>,</span><br><span class="line"></span><br><span class="line">      <span class="string">&quot;sites&quot;</span>: &#123;</span><br><span class="line"></span><br><span class="line">          <span class="string">&quot;site1&quot;</span>:<span class="string">&quot;www.runoob.com&quot;</span>,</span><br><span class="line"></span><br><span class="line">          <span class="string">&quot;site2&quot;</span>:<span class="string">&quot;m.runoob.com&quot;</span>,</span><br><span class="line"></span><br><span class="line">          <span class="string">&quot;site3&quot;</span>:<span class="string">&quot;c.runoob.com&quot;</span></span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(myObj)</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span> &#123;<span class="attr">name</span>: <span class="string">&quot;runoob&quot;</span>, <span class="attr">alexa</span>: <span class="number">10000</span>, <span class="attr">sites</span>: <span class="built_in">Object</span>&#125;</span><br></pre></td></tr></table></figure>
<p>转义概述</p>
<p>为什么需要转义？在js中我们使用的js对象进行处理，但是在与后端数据交换的时候，我们发送规定的json格式的字符串，所以在给后端发送或接受数据的时候，需要</p>
<p>{name:”myname”,password:123456} &lt;–&gt; “{“name”:”myname”,”password”:123456}”</p>
<p>其中json字符串转js对象，调用parse方法：</p>
<p>js对象 = JSON.parse(json字符串);</p>
<p>js对象转json字符串，调用stringify方法：</p>
<p>json字符串 = JSON.stringify(js对象);</p>
<h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><p>除了以上两种方法还有什么可以转化</p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">用eval_r(<span class="string">&#x27;(&#x27;</span>+<span class="type">json</span>字符串+<span class="string">&#x27;)&#x27;</span>)这个方法可以实现<span class="type">json</span>计算</span><br><span class="line"></span><br><span class="line">var <span class="keyword">value</span> = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">var js = <span class="string">&#x27;&#123;&quot;data1&quot;:&quot;hello&quot;,&quot;data2&quot;:value++&#125;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">console.log(js);</span><br><span class="line"></span><br><span class="line">var data1 = eval(&quot;(&quot;+js+&quot;)&quot;);</span><br><span class="line"></span><br><span class="line">console.log(data1);</span><br><span class="line"></span><br><span class="line">var data2=<span class="type">JSON</span>.stringify(js);</span><br><span class="line"></span><br><span class="line">console.log(data2);</span><br><span class="line">````</span><br><span class="line">eval_r获取的<span class="type">json</span>对象的值中，如果有执行代码，也将照样执行！所以若不能保证数据的安全性，不要使用eval_r方法进行转义。</span><br><span class="line"># 扩展思考</span><br><span class="line">我们常看到&#123;<span class="type">name</span>:&quot;myname&quot;,<span class="keyword">password</span>:<span class="number">123456</span>&#125;和&#123;&quot;name&quot;:&quot;myname&quot;,&quot;password&quot;:<span class="number">123456</span>&#125;这样两种格式，即js对象和<span class="type">json</span>，然而js对象和<span class="type">json</span>有什么不一样的地方？</span><br><span class="line"></span><br><span class="line">一个栗子大家可以自己在浏览器上运行一下</span><br></pre></td></tr></table></figure>
<script>

var jso1={

a:"name","b":"age"

};

var jso2={

"a":"name","b":"age"

};

console.log(jso1.a === jso2.a);

console.log(jso1.b === jso2.b);

console.log(jso1 === jso2);

console.log(jso1);

console.log(jso2);

var jso3=JSON.stringify(jso1);

console.log(jso3);

var jso4=JSON.parse({

'a':"name","b":"age"

});

var jso4=JSON.parse('{\"a\":\"name\", \"b\":\"age\"}');

console.log(jso4);

</script>
<p>````</p>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>参考一：百度百科</p>
<p>参考二：Json对象和Json字符串的区别</p>
<p>参考三：json属性名必须加引号的讨论</p>
<h1 id="更多讨论"><a href="#更多讨论" class="headerlink" title="更多讨论"></a>更多讨论</h1><p>Q：JSON对象有什么遍历方法，如何做</p>
<p>A：用jq方法$.each遍历json对象</p>
<p>Q：angularjs如何转换字符串和对象</p>
<p>A：angular.fromJson( );</p>
<pre><code>angular.toJson();
</code></pre>
<p>Q：json和jisonp有什么区别</p>
<p>A：json返回的是一串数据；而jsonp返回的是脚本代码（包含一个函数调用）</p>
]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
      <tags>
        <tag>JSON</tag>
      </tags>
  </entry>
  <entry>
    <title>Cordova add android 报错4种解决方法</title>
    <url>/2018/05/16/Cordova%20add%20android%20%E6%8A%A5%E9%94%99/</url>
    <content><![CDATA[<h2 id="方法一：可能网络有问题，换一个源（对我没有用）"><a href="#方法一：可能网络有问题，换一个源（对我没有用）" class="headerlink" title="方法一：可能网络有问题，换一个源（对我没有用）"></a>方法一：可能网络有问题，换一个源（对我没有用）</h2><p>npm i nrm -g 安装nrm</p>
<p>nrm ls 查看当前nrm内置的npm源</p>
<p>nrm use cnpm 切换源</p>
<h2 id="方法二：可能版本有问题（对我没有用）"><a href="#方法二：可能版本有问题（对我没有用）" class="headerlink" title="方法二：可能版本有问题（对我没有用）"></a>方法二：可能版本有问题（对我没有用）</h2><p>npm view cordova-android   查看可选版本</p>
<p>cordova platform add <a href="mailto:&#97;&#x6e;&#100;&#x72;&#x6f;&#x69;&#x64;&#x40;&#x37;&#46;&#48;&#x2e;&#48;">&#97;&#x6e;&#100;&#x72;&#x6f;&#x69;&#x64;&#x40;&#x37;&#46;&#48;&#x2e;&#48;</a>  切换版本</p>
<h2 id="方法三：卸载cordva重新安装（对我没有用）"><a href="#方法三：卸载cordva重新安装（对我没有用）" class="headerlink" title="方法三：卸载cordva重新安装（对我没有用）"></a>方法三：卸载cordva重新安装（对我没有用）</h2><p>运行命令：npm uninstall cordova -g<br>删除文件夹：C：\ Users \ your-name \ .cordova<br>重新安装cordova：npm install -g cordova<br>现在转到项目文件夹，然后再试一次：cordova platform add android<br>方法四：修改环境变量（解决）<br>在环境变量path内加入C:\Windows\System32</p>
<h1 id="如果以上方法对你没有用，可以用cordova-d-platform-add-android调试看下提示信息"><a href="#如果以上方法对你没有用，可以用cordova-d-platform-add-android调试看下提示信息" class="headerlink" title="如果以上方法对你没有用，可以用cordova -d platform add android调试看下提示信息"></a>如果以上方法对你没有用，可以用cordova -d platform add android调试看下提示信息</h1><p>相关博文：Android SDK 环境配置/Cordova环境搭建打包apk各种踩坑报错系列</p>
<p>欢迎留言交流  (´▽`ʃ♡ƪ)</p>
]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
      <tags>
        <tag>cordova</tag>
      </tags>
  </entry>
  <entry>
    <title>JS中的原型链是什么？</title>
    <url>/2017/12/26/JS_%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
    <content><![CDATA[<h1 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h1><p>JS中万物皆对象，但是分为两大类，函数对象，普通对象</p>
<p>所有的函数对象都有一个prototype属性，这个属性引用了一个对象，即原型对象，也称原型。 然而普通对象是没有prototype属性，只有_proto_属性</p>
<h1 id="知识剖析"><a href="#知识剖析" class="headerlink" title="知识剖析"></a>知识剖析</h1><p>vara = {};console.log(a.prototype);//undefined</p>
<p>console.log(a.<strong>proto</strong>);//Object {}</p>
<p>var b =function(){}</p>
<p>console.log(b.prototype);//b {}</p>
<p>console.log(b.<strong>proto</strong>);//function() {}</p>
<p>/<em>1、字面量方式</em>/</p>
<p> var a = {};</p>
<p>console.log(a.<strong>proto</strong>);  //Object {}</p>
<p>console.log(a.<strong>proto</strong> === a.constructor.prototype); //true</p>
<p> /<em>2、构造器方式</em>/</p>
<p>var A = function(){};</p>
<p>var a = new A();</p>
<p> console.log(a.<strong>proto</strong>); //A {}</p>
<p>console.log(a.<strong>proto</strong> === a.constructor.prototype); //true</p>
<p> /<em>3、Object.create()方式</em>/</p>
<p>var a1 = {a:1}</p>
<p> var a2 = Object.create(a1);</p>
<p>console.log(a2.<strong>proto</strong>); //Object {a: 1}</p>
<p>console.log(a.<strong>proto</strong> === a.constructor.prototype); //false</p>
<p>constructor 属性返回对创建此对象的数组函数的引用</p>
<p>_proto_的指向取决于对象创建时的实现方式</p>
<p>大多数情况下，<em>proto_可以理解为构造器的原型，即：_proto</em> === constructor.prototype</p>
<p>但是通过Object.create()创建的对象不使用此等式</p>
<p>functionFoo1(){this.name1 =’1’;}</p>
<p>functionFoo2(){this.name2 =’2’;}</p>
<p>Foo2.prototype =newFoo1();</p>
<p>functionFoo3(){this.name =’3’;}</p>
<p>Foo3.prototype =newFoo2();</p>
<p>varfoo3 =newFoo3();</p>
<p>console.log(foo3);</p>
<p>当我们「读取」 foo3的某个属性得时候，jS 引擎会做下面的事情：</p>
<ol>
<li><p>看看 foo3 对象本身有没有这个属性。没有就走到下一步。</p>
</li>
<li><p>看看 foo3.<strong>proto</strong> 对象有没有这个属性，发现 foo3.<strong>proto</strong> 有这个属性，于是找到了</p>
</li>
<li><p>如果 foo3.<strong>proto</strong> 没有，那么浏览器会继续查看 foo3.<strong>proto</strong>.<strong>proto</strong></p>
</li>
<li><p>如果 foo3.<strong>proto</strong>.<strong>proto</strong> 也没有，那么浏览器会继续查看 foo3.<strong>proto</strong>.<strong>proto</strong>.proto__</p>
</li>
<li><p>直到找到 或者 <strong>proto</strong> 为 null。</p>
</li>
</ol>
<h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><p>若想访问一个对象的原型，应该使用什么方法？</p>
<h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>1、使用_proto_属性</p>
<p>每个JS对象一定对应一个原型对象，并从原型对象继承属性和方法。</p>
<p>对象__proto__属性的值就是它所对应的原型对象；</p>
<p>使用__proto__是有争议的，而且是不鼓励的。 它从来没有被包括在EcmaScript语言规范中，但是现代浏览器实现了它, 无论如何。__proto__属性已在ECMAScript 6语言规范中标准化，用于确保Web浏览器的兼容性，因此它未来将被支持。它已被不推荐使用, 建议使用Object.getPrototyOf()</p>
<h1 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h1><p>参考一： JS重点整理之JS原型链彻底搞清楚</p>
<p>参考二： 三张图搞懂JavaScript的原型对象与原型链</p>
<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>Q：prototype和_proto_区别</p>
<p>A：所有的函数对象都有一个prototype属性，这个属性引用了一个对象，即原型对象，也称原型。 然而普通对象是没有prototype属性，只有_proto_属性</p>
<p>Q：constructor 代表什么</p>
<p>A：constructor 属性返回对创建此对象的数组函数的引用</p>
<p>Q:_proto_的指向哪里</p>
<p>A:_proto_的指向取决于对象创建时的实现方式</p>
]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
      <tags>
        <tag>原型链</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx的反向代理跨域</title>
    <url>/2017/12/01/Nginx_%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E8%B7%A8%E5%9F%9F/</url>
    <content><![CDATA[<h1 id="什么是跨域？"><a href="#什么是跨域？" class="headerlink" title="什么是跨域？"></a>什么是跨域？</h1><p>跨域是指a页面想获取b页面资源，如果a、b页面的协议、域名、端口、子域名不同，或是a页面为ip地址， b页面为域名地址，所进行的访问行动都是跨域</p>
<h1 id="产生的原因？"><a href="#产生的原因？" class="headerlink" title="产生的原因？"></a>产生的原因？</h1><p>浏览器为了安全问题一般都限制了跨域访问，也就是不允许跨域请求资源</p>
<p>同ip（或domain）,同端口，同协议视为同一个域，一个域内的脚本仅仅具有本域内的权限，可以理解为本域脚本只能读写 本域内的资源，而无法访问其它域的资源。这种安全限制称为同源策略</p>
<p>现代浏览器在安全性和可用性之间选择了一个平衡点。 在遵循同源策略的基础上，选择性地为同源策略“开放了后门”。例如img script style等标签，都允许垮域引用资源,然而， 你也只能是引用这些资源而已，并不能读取这些资源的内容</p>
<h2 id="同源策略限制以下几种行为："><a href="#同源策略限制以下几种行为：" class="headerlink" title="同源策略限制以下几种行为："></a>同源策略限制以下几种行为：</h2><p>1.Cookie、LocalStorage 和 IndexDB 无法读取</p>
<p>2.DOM 和 Js对象无法获得</p>
<p>3.AJAX 请求不能发送</p>
<h2 id="常见跨域场景"><a href="#常见跨域场景" class="headerlink" title="常见跨域场景"></a>常见跨域场景</h2><p><a href="http://www.domain.com/a.jshttp://www.domain.com/b.js">http://www.domain.com/a.jshttp://www.domain.com/b.js</a> 同一域名，不同文件或路径 允许<a href="http://www.domain.com/lab/c.jshttp://www.domain.com:8000/a.jshttp://www.domain.com/b.js">http://www.domain.com/lab/c.jshttp://www.domain.com:8000/a.jshttp://www.domain.com/b.js</a> 同一域名，不同端口 不允许<a href="http://www.domain.com/a.jshttps://www.domain.com/b.js">http://www.domain.com/a.jshttps://www.domain.com/b.js</a> 同一域名，不同协议 不允许<a href="http://www.domain.com/a.jshttp://192.168.4.12/b.js">http://www.domain.com/a.jshttp://192.168.4.12/b.js</a> 域名和域名对应相同ip 不允许<a href="http://www.domain.com/a.jshttp://x.domain.com/b.js">http://www.domain.com/a.jshttp://x.domain.com/b.js</a> 主域相同，子域不同 不允许<a href="http://domain.com/c.jshttp://www.domain1.com/a.jshttp://www.domain2.com/b.js">http://domain.com/c.jshttp://www.domain1.com/a.jshttp://www.domain2.com/b.js</a> 不同域名 不允许</p>
<h1 id="跨域解决方案"><a href="#跨域解决方案" class="headerlink" title="跨域解决方案"></a>跨域解决方案</h1><p>1、 通过jsonp跨域</p>
<p>2、 document.domain + iframe跨域</p>
<p>3、 location.hash + iframe</p>
<p>4、 window.name + iframe跨域</p>
<p>5、 postMessage跨域</p>
<p>6、 跨域资源共享（CORS）</p>
<p>7、 nginx代理跨域</p>
<p>8、 nodejs中间件代理跨域</p>
<p>9、 WebSocket协议跨域</p>
<h1 id="nginx反向代理解决跨域"><a href="#nginx反向代理解决跨域" class="headerlink" title="nginx反向代理解决跨域"></a>nginx反向代理解决跨域</h1><p>正向代理：代理位于网站和客户端中间， 客户端无法访问某网站，就将请求发送给代理服务器，代理从网站取回来再发送给客户端，网站并不知道为谁提供服务</p>
<p>反向代理：客户端访问某网站的一个页面， 但是网站并没有，就偷偷从另外一台服务器上取回来,然后作为自己的内容吐给用户，用户不知道真正提供服务的是谁</p>
<p>对于浏览器来说，访问的就是同源服务器上的一个url。而nginx通过 检测url前缀，把http请求转发到后面真实的物理服务器。并通过rewrite命令把前缀再去掉。这样真实的服务器就可以正确 处理请求，并且并不知道这个请求是来自代理服务器的。</p>
<p>简单说，nginx服务器欺骗了浏览器，让它认为这是同源调用，从而解决了浏览器的跨域问题。又通过重写url，欺骗了真实 的服务器，让它以为这个http请求是直接来自与用户浏览器的。</p>
<figure class="highlight roboconf"><table><tr><td class="code"><pre><span class="line">Location/carrots-admin-ajax/&#123;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">proxy_pass http</span>://dev<span class="variable">.admin</span><span class="variable">.carrots</span><span class="variable">.ptteng</span><span class="variable">.com</span>/;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="proxy-pass把请求代理到其他主机"><a href="#proxy-pass把请求代理到其他主机" class="headerlink" title="proxy_pass把请求代理到其他主机"></a>proxy_pass把请求代理到其他主机</h2><p>两种写法h<a href="http://dev.admin.carrots.ptteng.com/">http://dev.admin.carrots.ptteng.com/</a>  和  <a href="http://dev.admin.carrots.ptteng.com/">http://dev.admin.carrots.ptteng.com</a></p>
<p>如果访问url=<a href="http://server/html/test.jsp%EF%BC%8C%E5%88%99%E8%A2%ABnginx%E4%BB%A3%E7%90%86%E5%90%8E">http://server/html/test.jsp，则被nginx代理后</a></p>
<p>  情况1: 将test/作为根路径，请求test/路径下的资源。</p>
<p>  情况2: 则被nginx代理后，请求路径会变为<a href="http://proxy_pass/test.jsp%EF%BC%8C%E7%9B%B4%E6%8E%A5%E8%AE%BF%E9%97%AEserver%E7%9A%84%E6%A0%B9%E8%B5%84%E6%BA%90%E3%80%82">http://proxy_pass/test.jsp，直接访问server的根资源。</a></p>
<h2 id="carrots-admin-ajax"><a href="#carrots-admin-ajax" class="headerlink" title="/carrots-admin-ajax/"></a>/carrots-admin-ajax/</h2><p>是一个匹配规则，用于拦截请求，匹配任何以/proxy/html/开头的地址，匹配符合以后，停止往下搜索正则。</p>
<p>对于浏览器来说，访问的就是同源服务器上的一个url。而nginx通过检测url前缀，把http请求转发到后面真实的物理服务器。并通过rewrite命令把前缀再去掉。这样真实的服务器就可以正确处理请求，并且并不知道这个请求是来自代理服务器的。</p>
<p>简单说，nginx服务器欺骗了浏览器，让它认为这是同源调用，从而解决了浏览器的跨域问题。又通过重写url，欺骗了真实的服务器，让它以为这个http请求是直接来自与用户浏览器的。</p>
<h2 id="nginx-rewrite指令执行顺序："><a href="#nginx-rewrite指令执行顺序：" class="headerlink" title="nginx rewrite指令执行顺序："></a>nginx rewrite指令执行顺序：</h2><p>1.执行server块的rewrite指令(这里的块指的是server关键字后{}包围的区域，其它xx块类似)</p>
<p>2.执行location匹配</p>
<p>3.执行选定的location中的rewrite指令</p>
<p>如果其中某步URI被重写，则重新循环执行1-3，直到找到真实存在的文件</p>
<p>如果循环超过10次，则返回500 Internal Server Error错误</p>
<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p>参考一：<a href="https://www.cnblogs.com/gabrielchen/p/5066120.html">https://www.cnblogs.com/gabrielchen/p/5066120.html</a></p>
<p>参考二：<a href="http://blog.csdn.net/shendl/article/details/48443299">http://blog.csdn.net/shendl/article/details/48443299</a></p>
<h1 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h1><p>Q：例如img script style等标签，都允许垮域引用资源？</p>
<p>A：在浏览器中，并且加载的方式其实相当于一次普通的GET请求，唯一不同的是，为了安全起见，浏览器不允许这种方式下对加载到的资源的读写操作，而只能使用标签本身应当具备的能力（比如脚本执行、样式应用等等）。</p>
<p>Q：JSONP和nginx跨域有什么不同</p>
<p>JSONP和nginx是完全不同的 是可以跨域的，而且在跨域脚本中可以直接回调当前脚本的函数</p>
<p>原理：是可以跨域的，而且在跨域脚本中可以直接回调当前脚本的函数</p>
<p>script标签是可以加载异域的JavaScript并执行的，通过预先设定好的callback函数来实现和母页面的交互。它有一个大名，叫做JSONP跨域，JSONP是JSON with Padding的略称。它是一个非官方的协议，明明是加载script，为啥和JSON扯上关系呢？原来就是这个callback函数，对它的使用有一个典型的方式，就是通过JSON来传参，即将JSON数据填充进回调函数，这就是JSONP的JSON+Padding的含义。JSONP只支持GET请求。</p>
<p>欢迎留言交流  (´▽`ʃ♡ƪ)</p>
]]></content>
      <categories>
        <category>Others</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>如何使用NPM？CNPM又是什么？</title>
    <url>/2018/01/18/NPM&amp;CNPM/</url>
    <content><![CDATA[<h1 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h1><p>什么是npm</p>
<p>npm（node package manager）是nodejs的包管理器，用于node插件管理（包括安装、卸载、管理依赖等）, NPM是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题，它是 Node 获得成功的重要原因之一。常见的使用场景有以下几种：</p>
<p>允许用户从NPM服务器下载别人编写的第三方包到本地使用。</p>
<p>允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用。</p>
<p>允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用。</p>
<p>由于新版的nodejs已经集成了npm，所以之前npm也一并安装好了。同样可以通过输入 “npm -v” 来测试是否成功安装</p>
<p>为啥我们需要一个包管理工具呢？因为我们在Node.js上开发时，会用到很多别人写的JavaScript代码。如果我们要使用别人写的某个包，每次都根据名称搜索一下官方网站，下载代码，解压，再使用，非常繁琐。于是一个集中管理的工具应运而生：大家都把自己开发的模块打包后放到npm官网上，如果要使用，直接通过npm安装就可以直接用，不用管代码存在哪，应该从哪下载。</p>
<p>更重要的是，如果我们要使用模块A，而模块A又依赖于模块B，模块B又依赖于模块X和模块Y，npm可以根据依赖关系，把所有依赖的包都下载下来并管理起来。否则，靠我们自己手动管理，肯定既麻烦又容易出错。</p>
<p>什么是cnpm?</p>
<p>因为npm安装插件是从国外服务器下载，受网络影响大，可能出现异常，所以我们乐于分享的淘宝团队干了这事。来自官网：“这是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。”</p>
<h1 id="知识剖析"><a href="#知识剖析" class="headerlink" title="知识剖析"></a>知识剖析</h1><p>NPM常用指令</p>
<p>1、npm install moduleNames：安装Node模块</p>
<p>安装完毕后会产生一个node_modules目录，其目录下就是安装的各个node模块。</p>
<p>node的安装分为全局模式和本地模式。</p>
<p>一般情况下会以本地模式运行，包会被安装到和你的应用程序代码的本地node_modules目录下。</p>
<p>在全局模式下，Node包会被安装到Node的安装目录下的node_modules下</p>
<p>一些npm的简单命令就不多说了</p>
<p>为什么要保存至PACKAGE.JSON？</p>
<p>因为node插件包非常大，版本庞杂，所以不加入package信息，模块间的依赖变得非常困难，将配置信息写入package.json并将其加入版本管理，其他开发者对应下载即可（命令提示符执行npm install，则会根据package.json下载所有需要的包）。 每个项目的根目录下面，一般都有一个package.json文件，定义了这个项目所需要的各种模块，以及项目的配置信息（比如名称、版本、许可证等元数据）。npm install 命令根据这个配置文件，自动下载所需的模块，也就是配置项目所需的运行和开发环境。</p>
<p>PACKAGE.JSON 属性说明：</p>
<p>name - 包名。（不要把node或者js放在名字中）</p>
<p>version - 包的版本号。</p>
<p>dependencies - 项目运行所依赖的模块</p>
<p>devDependencies - 项目开发所需要的模块</p>
<p>bin - 这需要在你的package.json中提供一个bin字段，它是一个命令名和本地文件名的映射。在安装时，如果是全局安装，npm将会使用符号链接把这些文件链接到prefix/bin，如果是本地安装，会链接到./node_modules/.bin/</p>
<p>使用npm卸载插件：npm uninstall &lt; name &gt; [-g] [–save-dev] PS：不要直接删除本地插件包</p>
<p>使用npm更新插件：npm update &lt; name &gt; [-g] [–save-dev] </p>
<p>更新全部插件：npm update [–save-dev] </p>
<p>查看npm帮助：npm help </p>
<p>查看当前目录已安装插件：npm list </p>
<p>PS：npm安装插件过程：从<a href="http://registry.npmjs.org下载对应的插件包(该网站服务器位于国外,所以经常下载缓慢或出现异常),解决办法就是cnpm/">http://registry.npmjs.org下载对应的插件包（该网站服务器位于国外，所以经常下载缓慢或出现异常），解决办法就是cnpm</a></p>
<p>CNPM介绍：</p>
<p>官方网址：<a href="http://npm.taobao.org/">http://npm.taobao.org</a></p>
<p>安装：命令提示符执行npm install cnpm -g –registry=<a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a></p>
<p>注意：安装完后最好查看其版本号cnpm -v或关闭命令提示符重新打开，安装完直接使用有可能会出现错误 </p>
<p>PS：cnpm跟npm用法完全一致，只是在执行命令时将npm改为cnpm。</p>
<h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><p>bower 和 npm有什么区别</p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>npm 是伴随 Node.js 出现的一个包管理器，最开始只能支持 Node.js 的模块管理，但是后来， npm 官网经过一次改版，打出的口号是，javascript 的包管理器，所以，其已经不在局限于是 Node.js 的模块管理了，已经通用到了所有 js 的包管理工具了，可以说，前后通吃了。</p>
<p>bower 的话，从一开始，就是专门为前端表现设计的包管理器，一切全部为前端考虑的。npm 和 bower 的最大区别，就是 npm 支持嵌套地依赖管理，而 bower只能支持扁平的依赖（嵌套的依赖，由 程序员自己解决）。</p>
<p>嵌套依赖，指的就是，你依赖的软件包，还有它自己的依赖，好像摘葡萄，一摘一大串。在服务器环境的时候，这并没什么关系，因为存储空间够大，一切代码都是本地运行，只要解决完依赖就行了， 但是到了用户产品的浏览器里，就很成问题了，你不能让用户去下载好几M的js代码，那就太糟糕了。在这个情况下，就需要程序员自己手动解决用到的类库的嵌套依赖问题。比如确保各种各样的插件 都依赖同一个版本的jQuery。</p>
<h1 id="扩展思考"><a href="#扩展思考" class="headerlink" title="扩展思考"></a>扩展思考</h1><p>cnpm有哪些问题？</p>
<p>1.cnpm 的仓库只是 npm 仓库的一个拷贝，它不承担 publish 工作，所以你用 cnpm publish 命令会执行失败的</p>
<p>2.不仅是 publish 会执行失败，其它的需要注册用户(npm adduser)、或者修改 package 状态等命令都无法用 cnpm</p>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul>
<li><p>npm 模块安装机制简介</p>
</li>
<li><p>开发者对 npm 公司不满，unpublish 了自己的所有模块</p>
</li>
<li><p>npm的一些常用命令</p>
</li>
<li><p>bower 和 npm 的区别详细介绍</p>
</li>
</ul>
<h1 id="更多提问"><a href="#更多提问" class="headerlink" title="更多提问"></a>更多提问</h1><p>Q:全局安装和本地安装的区别？</p>
<p>A:因为全局模式安装,包可以供所有的程序使用。本地安装则不可以。 npm 默认会把包安装到当前目录下。这反映了 npm 不同的设计哲学。如 果把包安装到全局,可以提高程序的重复利用程度,避免同样的内容的多 份副本,但坏处是难以处理不同的版本依赖。如果把包安装到当前目录, 或者说本地,则不会有不同程序依赖不同版本的包的冲突问题,同时还减 轻了包作者的 API 兼容性压力,但缺陷则是同一个包可能会被安装许多次。</p>
<p>Q:为什么进行了全局安装还要进行本地安装</p>
<p>A:为什么进行了全局安装还要进行本地安装</p>
<p> 1、在js实例代码中，默认下node.js会在NODE_PATH和目前js所在项目下的node_modules文件夹下去寻找模块，因此，如果只是全局安装，不能直接通过require()的方式去引用模块，需要手动解决包路径的配置问题，当然你也可以复制全局安装的node_modules文件夹到项目下，还有办法可以选择将环境变量的NODE_PATH设置为C:\Program Files\nodejs。 2.对于包的更新不好管理，可能你需要为每个包重新命名，如<a href="mailto:&#x67;&#117;&#x6c;&#112;&#x40;&#x33;&#x2e;&#56;&#46;&#49;">&#x67;&#117;&#x6c;&#112;&#x40;&#x33;&#x2e;&#56;&#46;&#49;</a>、gulp@3.9.1…，为了区别不同项目使用指定的包，保证模块之间的相互依赖，区别每个项目正常运行</p>
<p>Q：如何在package.JSON的dependencies和devDependencies写入信息</p>
<p>A:npm install –save babel-cli和npm install -dev babel-cli使用这两个命令安装后可自动写入文件</p>
<p>npm install –save-dev babel-cli也可以在一起用</p>
]]></content>
      <categories>
        <category>Others</category>
      </categories>
      <tags>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>实现自定义滚动条 ScrollBar</title>
    <url>/2019/08/15/ScrollBar/</url>
    <content><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>原生的滚动条很强大，但是各个浏览器对于滚动条开放的 api 不同，google 是相当有好的，样式几乎都可以修改，But IE 就只能修改颜色，然而只改一个颜色不够啊，还是那么粗那么生硬<br>为了保证样式的统一，就得自定义一个滚动条，如果你也想写或者你正在写但是卡在了某个地方，那就看看我踩过的坑吧</p>
<p>效果</p>
<p><img src="/2019/08/15/ScrollBar/ScrollBar.gif" alt="效果"></p>
<h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><p>首先需要实现这几个功能</p>
<p>*搭建好基本 DOM 框架<br>*计算滑块高度和位置<br>*当鼠标滚轮滑动，页面同步滚动<br>*鼠标左键点击可以实现拖动<br>*当 DOM 发生变化，更新滚动条位置和长度</p>
<h2 id="搭建好基本-DOM-框架"><a href="#搭建好基本-DOM-框架" class="headerlink" title="搭建好基本 DOM 框架"></a>搭建好基本 DOM 框架</h2><p>首先你得要有一个横向和一个纵向的滚动条出现在目标元素的右边和底部<br>这是生成的基本的框架，ScrollBar 是目标元素，containerY 和 containerX 分别是纵向和横向的滚动条，wrapper 主要是为了滚动条定位也为了不去污染原本的 html 结构</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ScrollBar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;containerY&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;containerX&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="计算滑块高度和位置"><a href="#计算滑块高度和位置" class="headerlink" title="计算滑块高度和位置"></a>计算滑块高度和位置</h2><p>以纵向滚动条为例：</p>
<h3 id="滑块的高度"><a href="#滑块的高度" class="headerlink" title="滑块的高度"></a>滑块的高度</h3><ul>
<li>element.offsetHeight：元素可见的高度</li>
<li>element.scrollHeight：元素实际内容的高度</li>
</ul>
<p><strong>滚动条的高度 = 元素可见的高度</strong><br>*<em>滑块在滚动条的占比 = 元素可见的高度 / 元素实际内容的高度 * 100*</em></p>
<ul>
<li>滑块是滚动条的子元素，滑块可以用 ‘absolute’ 相对于滚动条也就是父元素定位，100% 即是滚动条的高度</li>
<li>这个地方为了方便后面的计算滑块的的位置所以就不需要去计算滑块的准确高度，只需要知道他在滚动条中的占比即可，然后用 height 展示这个百分比</li>
</ul>
<h3 id="滑块的位置"><a href="#滑块的位置" class="headerlink" title="滑块的位置"></a>滑块的位置</h3><p>滑块默认位置当然 top 为 0</p>
<p>但是当滚动行为发生或者其他行为导致了可见区域展示的内容发生了变化，这个时候我们也需要去更新滑块在滚动条中的位置</p>
<p>那么这个时候滑块的位置 = element.scrollTop / element.scrollHeight * 100</p>
<ul>
<li>element.scrollTop：元素实际内容的顶部与可见区域的顶部之间的距离</li>
</ul>
<p>另外在鼠标滚动或者鼠标拖动事件中需要注意处理边界的情况，避免滑块超出滚动条</p>
<p>最好将更新滑块位置的方式写成函数，因为这个需要频繁调用</p>
<h2 id="鼠标滚轮滑动，页面同步滚动"><a href="#鼠标滚轮滑动，页面同步滚动" class="headerlink" title="鼠标滚轮滑动，页面同步滚动"></a>鼠标滚轮滑动，页面同步滚动</h2><ul>
<li>这个主要就是对 mousewheel 事件进行监听，在回调函数中对滑块的位置和页面进行同步更新</li>
<li>需要注意判断鼠标滚轮是向上还是向下</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.wrapper.addEventListener(<span class="string">&#x27;mousewheel&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123; _this.wheel(e) &#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>这里面也可以写一些其他的动效，可以让用户体验更好些，比如开始滚动效果和结束滚动什么的</li>
</ul>
<h2 id="鼠标左键点击实现拖动"><a href="#鼠标左键点击实现拖动" class="headerlink" title="鼠标左键点击实现拖动"></a>鼠标左键点击实现拖动</h2><ul>
<li>这个主要需要监听 mousedown， mousemove， mouseup 三个事件</li>
<li>在 mousedown 中记录用户拖动的起点，mousemove 中计算用户拖动的距离然后对滑块的位置和页面进行同步更新，然后再 mouseup 中结束这个事件</li>
<li>这个有个需要注意的点是滑块的高度，用元素 css 的 Top 属性控制</li>
<li>用户点击滚动条某个位置就将滑块移至某个位置，这个就只需要监听 mousedown 事件</li>
</ul>
<p>注意：需要判断是向下还是向上，如果向上只需要修改 top 的值，但如果是向下那么就需要在计算中加入滑块本身的高度，避免滑块底部超出滚动条</p>
<h2 id="监听数据变化更新滚动条"><a href="#监听数据变化更新滚动条" class="headerlink" title="监听数据变化更新滚动条"></a>监听数据变化更新滚动条</h2><p>监听 DOM 变化我了解到了三个方法，当然如果你还有其他的方法，欢迎留言告诉我</p>
<p>1.MutationObserver()<br>2.Resize Observer<br>3.requestAnimationFrame</p>
<h3 id="MutationObserver"><a href="#MutationObserver" class="headerlink" title="MutationObserver"></a>MutationObserver</h3><p>构造函数：MutationObserver()，监视和记录 DOM 对象上发生的子节点删除、属性修改、文本内容修改等等，变化结束后触发回调<br>在 Vue.nextTick() 中便是由 MutationObserver 监听到DOM更新然后调用回调</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> observer = <span class="keyword">new</span> MutationObserver(callback)</span><br></pre></td></tr></table></figure>

<p><strong>函数有三个方法：</strong></p>
<ul>
<li><strong>observe()：mutationObserver.observe(target, options)</strong> <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/MutationObserverInit">MDN参数</a><br>&emsp;** target：受监视的 DOM 元素**<br>&emsp;** options 参数介绍：**<br>&emsp;&emsp;&emsp;*attributeFilter: array, 要监视的特定属性名称的数组<br>&emsp;&emsp;&emsp;*attributeOldValue: boolean, 是否记录任何有改动的属性的上一个值<br>&emsp;&emsp;&emsp;*attributes: boolean, 是否观察属性值变更<br>&emsp;&emsp;&emsp;*characterData: boolean, 是否观察指定目标节点或子节点树中节点所包含的字符数据的变化<br>&emsp;&emsp;&emsp;*characterDataOldValue： boolean, 是否记录受监视节点上发生更改时节点文本的上一个值<br>&emsp;&emsp;&emsp;*childList: boolean, 是否观察目标子节点添加或者删除（如果subtree为true，则观察包含子孙节点）<br>&emsp;&emsp;&emsp;*subtree: boolean, 是否观察后代节点，包括整个子树的所有节点, 默认值为false</li>
<li><strong>disconnect()：阻止 MutationObserver 实例继续接收的通知，直到再次调用其observe方法，该观察者对象包含的回调函数都不会再被调用</strong></li>
<li><strong>takeRecords()：返回已检测到但尚未由观察者的回调函数处理的所有匹配DOM更改的列表，使变更队列保持为空，此方法最常见的使用场景是在断开观察者之前立即获取所有未处理的更改记录，以便在停止观察者时可以处理任何未处理的更改。</strong></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> targetNode = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#someElement&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> observerOptions = &#123;</span><br><span class="line">  <span class="attr">childList</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">attributes</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">subtree</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> observer = <span class="keyword">new</span> MutationObserver(callback)</span><br><span class="line">observer.observe(targetNode, observerOptions)</span><br></pre></td></tr></table></figure>

<h3 id="Resize-Observer"><a href="#Resize-Observer" class="headerlink" title="Resize Observer"></a>Resize Observer</h3><p>Resize Observer， 视窗大小的变化，而不仅仅是当一个元素的大小发生变化<br>当元素被动态地添加或删除时，会影响父元素的大小<br>观察DOM元素的内容矩形大小（宽度、高度）的变化</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;resize&#x27;</span>, callback)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(resize)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="built_in">document</span>.(<span class="string">&#x27;.box&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> myObserver = <span class="keyword">new</span> ResizeObserver(<span class="function"><span class="params">entries</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(entries)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">myObserver.observe(element)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="requestAnimationFrame-刷新"><a href="#requestAnimationFrame-刷新" class="headerlink" title="requestAnimationFrame 刷新"></a>requestAnimationFrame 刷新</h3><p>这个方法我是在 jQuery custom content scroller 源码中看到的，它是使用 window.requestAnimationFrame 和 timeout 更新滚动条</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.requestAnimationFrame</span><br></pre></td></tr></table></figure>

<h2 id="你可能会碰到的问题"><a href="#你可能会碰到的问题" class="headerlink" title="你可能会碰到的问题"></a>你可能会碰到的问题</h2><ul>
<li>mousewheel 事件执行多次</li>
</ul>
<p>当你的 DOM 结构是这样的</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面三个div都用了滚动条，也就是嵌套的情况下，当你想滚动里面 div 元素的时候你会发现外层的 div 元素也在滚动</p>
<p>打印一下 mousewheel 里面的 event, 第一个执行的是里面的 div，然后再是外层的 div</p>
<p>这是因为 addEventListener 默认是按照事件冒泡的顺序执行，所以最里面一层 div 会先执行， 使用 event.stopPropagation() 方法阻止事件传播</p>
<ul>
<li>scrollTop 赋值无效<br>元素的 scrollTop 赋值始终是 0，原来是给最外层元素的 wrapper 设置了 overflow:hidden，应该给目标元素设置，因为最外层的元素没有设高</li>
</ul>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><a href="https://juejin.im/post/5c26d01a6fb9a049b07d6ce2#heading-8">https://juejin.im/post/5c26d01a6fb9a049b07d6ce2#heading-8</a></li>
<li><a href="https://juejin.im/post/5cde85dfe51d45108f254145">https://juejin.im/post/5cde85dfe51d45108f254145</a></li>
<li><a href="https://github.com/linzx1993/linzx1993.github.io/issues/11">https://github.com/linzx1993/linzx1993.github.io/issues/11</a></li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="Google-修改滚动条"><a href="#Google-修改滚动条" class="headerlink" title="Google 修改滚动条"></a>Google 修改滚动条</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*控制整个滚动条*/</span></span><br><span class="line">::-webkit-scrollbar &#123;</span><br><span class="line">    background-color: lightgray;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">background-clip</span>: padding-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*滚动条两端方向按钮*/</span></span><br><span class="line">::-webkit-scrollbar-button &#123;</span><br><span class="line">    background-color: pink;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*滚动条中间滑动部分*/</span></span><br><span class="line">::-webkit-scrollbar-thumb &#123;</span><br><span class="line">    background-color: blue;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*滚动条右下角区域*/</span></span><br><span class="line">::-webkit-scrollbar-corner &#123;</span><br><span class="line">    background-color: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 更详细的伪类 */</span></span><br><span class="line"></span><br><span class="line">:horizontal /*水平方向的滚动条*/</span><br><span class="line"></span><br><span class="line">:vertical /*垂直方向的滚动条*/</span><br><span class="line"></span><br><span class="line">:decrement /*应用于按钮和内层轨道(track piece)。它用来指示按钮或者内层轨道是否会减小视窗的位置(比如，垂直滚动条的上面，水平滚动条的左边。)*/</span><br><span class="line"></span><br><span class="line">:increment /*decrement类似，用来指示按钮或内层轨道是否会增大视窗的位置(比如，垂直滚动条的下面和水平滚动条的右边。)*/</span><br><span class="line"></span><br><span class="line">:start /*伪类也应用于按钮和滑块。它用来定义对象是否放到滑块的前面。*/</span><br><span class="line"></span><br><span class="line">:end /*类似于start伪类，标识对象是否放到滑块的后面*/</span><br><span class="line"></span><br><span class="line">:double-button /*该伪类以用于按钮和内层轨道。用于判断一个按钮是不是放在滚动条同一端的一对按钮中的一个。对于内层轨道来说，它表示内层轨道是否紧靠一对按钮。*/</span><br><span class="line"></span><br><span class="line">:single-button /*类似于double-button伪类。对按钮来说，它用于判断一个按钮是否自己独立的在滚动条的一段。对内层轨道来说，它表示内层轨道是否紧靠一个single-button。*/</span><br><span class="line"></span><br><span class="line">:no-button /*用于内层轨道，表示内层轨道是否要滚动到滚动条的终端，比如，滚动条两端没有按钮的时候*/</span><br><span class="line"></span><br><span class="line">:corner-present /*用于所有滚动条轨道，指示滚动条圆角是否显示*/</span><br><span class="line"></span><br><span class="line">:window-inactive /*用于所有的滚动条轨道，指示应用滚动条的某个页面容器(元素)是否当前被激活*/</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="IE-修改滚动条"><a href="#IE-修改滚动条" class="headerlink" title="IE 修改滚动条"></a>IE 修改滚动条</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    scrollbar-arrow-<span class="attribute">color</span>: <span class="number">#f4ae21</span>; <span class="comment">/*三角箭头的颜色*/</span></span><br><span class="line">    scrollbar-face-<span class="attribute">color</span>: <span class="number">#333</span>; <span class="comment">/*立体滚动条的颜色*/</span></span><br><span class="line">    scrollbar-<span class="number">3</span>dlight-<span class="attribute">color</span>: <span class="number">#666</span>; <span class="comment">/*立体滚动条亮边的颜色*/</span></span><br><span class="line">    scrollbar-highlight-<span class="attribute">color</span>: <span class="number">#666</span>; <span class="comment">/*滚动条空白部分的颜色*/</span></span><br><span class="line">    scrollbar-shadow-<span class="attribute">color</span>: <span class="number">#999</span>; <span class="comment">/*立体滚动条阴影的颜色*/</span></span><br><span class="line">    scrollbar-darkshadow-<span class="attribute">color</span>: <span class="number">#666</span>; <span class="comment">/*立体滚动条强阴影的颜色*/</span></span><br><span class="line">    scrollbar-track-<span class="attribute">color</span>: <span class="number">#666</span>; <span class="comment">/*立体滚动条背景颜色*/</span></span><br><span class="line">    scrollbar-base-<span class="attribute">color</span>:<span class="number">#f8f8f8</span>; <span class="comment">/*滚动条的基本颜色*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
      <tags>
        <tag>自定义滚动条</tag>
      </tags>
  </entry>
  <entry>
    <title>angular之constant和filter</title>
    <url>/2018/01/31/angular_constant&amp;filter/</url>
    <content><![CDATA[<h1 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h1><p>angular是什么：AngularJS最初由Misko Hevery和Adam Abrons于2009年开发，后来成为了Google公司的项目。AngularJS弥补了HTML在构建应用方面的不足，其通过使用标识符（directives）结构，来扩展Web应用中的HTML词汇，使开发者可以使用HTML来声明动态内容，从而使得Web开发和测试工作变得更加容易。</p>
<p>constant，可以算作angular的全局数据，想要使用的话，只需要在控制器注入即可。</p>
<p>$filter，angular的过滤器，如果想要在控制器里面使用，也是注入，然后调用，而html中的数据过滤，直接键入过滤器名称和对应值即可。</p>
<h1 id="知识剖析"><a href="#知识剖析" class="headerlink" title="知识剖析"></a>知识剖析</h1><p>每当搜索constant时候，总会连带出现value的说明。</p>
<p>两者都可以作为全局变量使用，但是有两点不同：</p>
<p>1.value不可以在config里注入，但是constant可以。</p>
<p>2.value可以修改，但是constant不可以修改，一般直接用constant配置一些需要经常使用的数据。</p>
<p>下面是简单的应用例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">angular.module(<span class="string">&#x27;myApp&#x27;</span>, [])</span><br><span class="line">.constant(<span class="string">&#x27;apiKey&#x27;</span>, <span class="string">&#x27;123123123&#x27;</span>)</span><br><span class="line">.value(<span class="string">&#x27;FBid&#x27;</span>,<span class="string">&#x27;231231231&#x27;</span>)</span><br><span class="line">.controller(<span class="string">&#x27;myController&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope,apiKey,FBid</span>)</span>&#123;</span><br><span class="line">$scope.a = apiKey;</span><br><span class="line">$scope.b = FBid;</span><br><span class="line">&#125;)</span><br><span class="line">.config(<span class="function"><span class="keyword">function</span>(<span class="params">apiKey</span>) </span>&#123;</span><br><span class="line"><span class="comment">//在这里apiKey将被赋值为123123123</span></span><br><span class="line"><span class="comment">//就像上面设置的那样</span></span><br><span class="line">&#125;)</span><br><span class="line">.config(<span class="function"><span class="keyword">function</span>(<span class="params">FBid</span>) </span>&#123;</span><br><span class="line"><span class="comment">//这将抛出一个错误，未知的provider: FBid</span></span><br><span class="line"><span class="comment">//因为在config函数内部无法访问这个值</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>filter是用来格式化数据用的</p>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="xml">基本原型：</span><span class="template-variable">&#123;&#123;<span class="name">expression</span> | filter&#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">多个filter连用版：</span><span class="template-variable">&#123;&#123;<span class="name">expression</span> | filter1 | filter2&#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">传入参数版：</span><span class="template-variable">&#123;&#123;<span class="name">expression</span> | filter:1:2&#125;&#125;</span></span><br></pre></td></tr></table></figure>
<h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><p>如何使用angular中constant和$filter？</p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>4.1 AngularJS内建了一些常用的filter：</p>
<p>1、格式化货币：</p>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="template-variable">&#123;&#123; <span class="name">12</span> | currency&#125;&#125;</span><span class="xml">  //将12格式化为货币，默认单位符号为&#x27;$&#x27;,小数默认2位</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span><span class="template-variable">&#123;&#123; <span class="name">12.45</span> | currency:<span class="string">&#x27;￥&#x27;</span>&#125;&#125;</span><span class="xml"> //将12.45格式化为货币，使用自定义单位符号为&#x27;￥&#x27;,小数默认2位</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span><span class="template-variable">&#123;&#123; <span class="name">12.45</span> | currency:<span class="string">&#x27;CHY￥&#x27;</span>:1&#125;&#125;</span><span class="xml"> //将12.45格式化为货币，使用自定义单位符号为&#x27;CHY￥&#x27;,小数指定1位,会执行四舍五入操作</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span><span class="template-variable">&#123;&#123; <span class="name">12.55</span> | currency:<span class="literal">undefined</span>:0&#125;&#125;</span><span class="xml"> //将12.55格式化为货币， 不改变单位符号， 小数部分将四舍五入</span></span><br></pre></td></tr></table></figure>
<p>2、格式化日期：</p>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="template-variable">&#123;&#123; <span class="name">1304375948024</span> | date:<span class="string">&#x27;medium&#x27;</span>&#125;&#125;</span><span class="xml">//May 03, 2011 06:39:08 PM</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span><span class="template-variable">&#123;&#123; <span class="name">1304375948024</span> | date &#125;&#125;</span><span class="xml">//结果：May 3, 2011</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span><span class="template-variable">&#123;&#123; <span class="name">1304375948024</span> | date:<span class="string">&quot;MM/dd/yyyy @ h:mma&quot;</span> &#125;&#125;</span><span class="xml">//结果：05/03/2011 @ 6:39AM</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span><span class="template-variable">&#123;&#123; <span class="name">1304375948024</span> | date:<span class="string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span> &#125;&#125;</span><span class="xml">//结果：2011-05-03 06:39:08</span></span><br></pre></td></tr></table></figure>
<p>3、过滤数组：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="variable">$scope</span>.arr = [&#123;<span class="string">&quot;age&quot;</span>: <span class="number">20</span>,<span class="string">&quot;id&quot;</span>: <span class="number">10</span>,<span class="string">&quot;name&quot;</span>: <span class="string">&quot;iphone&quot;</span>&#125;, &#123;<span class="string">&quot;age&quot;</span>: <span class="number">12</span>,<span class="string">&quot;id&quot;</span>: <span class="number">11</span>,<span class="string">&quot;name&quot;</span>: <span class="string">&quot;sunm xing&quot;</span>&#125;, &#123;<span class="string">&quot;age&quot;</span>: <span class="number">44</span>,<span class="string">&quot;id&quot;</span>: <span class="number">12</span>,<span class="string">&quot;name&quot;</span>: <span class="string">&quot;test abc&quot;</span>&#125; ]</span><br><span class="line"></span><br><span class="line">&#123;&#123;arr | filter:<span class="string">&#x27;s&#x27;</span>&#125;&#125;  <span class="regexp">//</span>查找含有有s的行<span class="regexp">//</span>上例结果：[&#123;<span class="string">&quot;age&quot;</span>:<span class="number">12</span>,<span class="string">&quot;id&quot;</span>:<span class="number">11</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;sunm xing&quot;</span>&#125;,&#123;<span class="string">&quot;age&quot;</span>:<span class="number">44</span>,<span class="string">&quot;id&quot;</span>:<span class="number">12</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;test abc&quot;</span>&#125;]</span><br><span class="line"></span><br><span class="line">&#123;&#123;arr | filter:&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;ip&#x27;</span>&#125; &#125;&#125;<span class="regexp">//</span>查找name like ip的行<span class="regexp">//</span>上例结果:[&#123;<span class="string">&quot;age&quot;</span>:<span class="number">20</span>,<span class="string">&quot;id&quot;</span>:<span class="number">10</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;iphone&quot;</span>&#125;]</span><br></pre></td></tr></table></figure>
<p>4、将对象格式化成标准的JSON格式：</p>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="template-variable">&#123;&#123; &#123;<span class="name">name:</span><span class="string">&#x27;Jack&#x27;</span>, age: <span class="number">21</span>&#125; | json&#125;&#125;</span></span><br></pre></td></tr></table></figure>
<p>5、字符串，对象截取：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">&#123;&#123; <span class="string">&quot;i love tank&quot;</span> | limitTo:<span class="number">6</span> &#125;&#125;<span class="regexp">//</span>结果：i love</span><br><span class="line"></span><br><span class="line">&#123;&#123; <span class="string">&quot;i love tank&quot;</span> | limitTo:-<span class="number">4</span> &#125;&#125;<span class="regexp">//</span>结果：tank</span><br><span class="line"></span><br><span class="line">&#123;&#123; [&#123;<span class="string">&quot;age&quot;</span>: <span class="number">20</span>,<span class="string">&quot;id&quot;</span>: <span class="number">10</span>,<span class="string">&quot;name&quot;</span>: <span class="string">&quot;iphone&quot;</span>&#125;, &#123;<span class="string">&quot;age&quot;</span>: <span class="number">12</span>,<span class="string">&quot;id&quot;</span>: <span class="number">11</span>,<span class="string">&quot;name&quot;</span>: <span class="string">&quot;sunm xing&quot;</span>&#125;, &#123;<span class="string">&quot;age&quot;</span>: <span class="number">44</span>,<span class="string">&quot;id&quot;</span>: <span class="number">12</span>,<span class="string">&quot;name&quot;</span>: <span class="string">&quot;test abc&quot;</span>&#125; ] | limitTo:<span class="number">1</span> &#125;&#125;<span class="regexp">//</span>结果：[&#123;<span class="string">&quot;age&quot;</span>:<span class="number">20</span>,<span class="string">&quot;id&quot;</span>:<span class="number">10</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;iphone&quot;</span>&#125;]</span><br></pre></td></tr></table></figure>
<p>6、大小写转换：</p>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="xml">China has joined the </span><span class="template-variable">&#123;&#123; <span class="name">&quot;wto&quot;</span> | uppercase &#125;&#125;</span><span class="xml">.</span></span><br><span class="line"><span class="xml">We all need </span><span class="template-variable">&#123;&#123; <span class="name">&quot;MONEY&quot;</span> | lowercase &#125;&#125;</span><span class="xml">.</span></span><br></pre></td></tr></table></figure>
<p>7、数值类：</p>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="template-variable">&#123;&#123; <span class="name">1.234567</span> | number:1 &#125;&#125;</span><span class="xml">  //结果：1.2</span></span><br><span class="line"><span class="xml"></span><span class="template-variable">&#123;&#123; <span class="name">1234567</span> | number &#125;&#125;</span><span class="xml">    //结果：1,234,567</span></span><br></pre></td></tr></table></figure>
<p>8、对象排序：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="variable">$scope</span>.arr = [&#123;<span class="string">&quot;age&quot;</span>: <span class="number">20</span>,<span class="string">&quot;id&quot;</span>: <span class="number">10</span>,<span class="string">&quot;name&quot;</span>: <span class="string">&quot;iphone&quot;</span>&#125;, &#123;<span class="string">&quot;age&quot;</span>: <span class="number">12</span>,<span class="string">&quot;id&quot;</span>: <span class="number">11</span>,<span class="string">&quot;name&quot;</span>: <span class="string">&quot;sunm xing&quot;</span>&#125;, &#123;<span class="string">&quot;age&quot;</span>: <span class="number">44</span>,<span class="string">&quot;id&quot;</span>: <span class="number">12</span>,<span class="string">&quot;name&quot;</span>: <span class="string">&quot;test abc&quot;</span>&#125; ]</span><br><span class="line">&#123;&#123;arr | orderBy:<span class="string">&#x27;id&#x27;</span>:true &#125;&#125;<span class="regexp">//</span>根id降序排</span><br><span class="line">&#123;&#123;arr | orderBy:<span class="string">&#x27;id&#x27;</span> &#125;&#125;<span class="regexp">//</span>根据id升序排</span><br></pre></td></tr></table></figure>
<h2 id="自定义filter方法"><a href="#自定义filter方法" class="headerlink" title="自定义filter方法"></a>自定义filter方法</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">我们来自定义选择省份和职位</span><br><span class="line"></span><br><span class="line">HTML代码：</span><br><span class="line">&#123;&#123;<span class="number">1</span> | provinceFilter&#125;&#125;</span><br><span class="line">&#123;&#123;<span class="number">6</span> | fMes:<span class="string">&#x27;positionList&#x27;</span>:<span class="string">&#x27;type&#x27;</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line">app.js:</span><br><span class="line">angular.module(<span class="string">&#x27;myApp&#x27;</span>,[])</span><br><span class="line"><span class="comment">//数组</span></span><br><span class="line">.controller(<span class="string">&#x27;personCtrl&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123;</span><br><span class="line">  $scope.arr=[</span><br><span class="line">    &#123;<span class="string">&quot;age&quot;</span>:<span class="number">20</span>,<span class="string">&quot;id&quot;</span>:<span class="number">10</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;iphone&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;age&quot;</span>:<span class="number">12</span>,<span class="string">&quot;id&quot;</span>:<span class="number">11</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;sunm xing&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;age&quot;</span>:<span class="number">44</span>,<span class="string">&quot;id&quot;</span>:<span class="number">12</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;test abc&quot;</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"><span class="comment">//自定义选择省份</span></span><br><span class="line">.filter(<span class="string">&#x27;provinceFilter&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">PROVINCE</span>)</span>&#123;<span class="comment">//省</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">id</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(id!=<span class="literal">undefined</span>&amp;&amp;id!=<span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line">      <span class="keyword">var</span>  name;</span><br><span class="line">      angular.forEach(PROVINCE,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(data.ProID==id)&#123;</span><br><span class="line">              name=data.ProName;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">  <span class="keyword">return</span>  name;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义选择职位</span></span><br><span class="line"></span><br><span class="line">.filter(<span class="string">&#x27;fMes&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">con</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">input,field,str</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(input&gt;=<span class="number">0</span>) &#123;<span class="comment">//input != undefined &amp;&amp;</span></span><br><span class="line">    <span class="keyword">var</span> name;</span><br><span class="line">    <span class="keyword">var</span> aMes=con[field];</span><br><span class="line">    angular.forEach(aMes,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(data[str]==input)&#123;</span><br><span class="line">          name=data.name;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;<span class="built_in">console</span>.log(<span class="string">&#x27;false&#x27;</span>);&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">constant.js</span><br><span class="line">angular.module(<span class="string">&quot;myApp&quot;</span>) .value(<span class="string">&#x27;val&#x27;</span>,&#123;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//公司编辑常量组</span></span><br><span class="line">.constant(<span class="string">&#x27;con&#x27;</span>,&#123;</span><br><span class="line"><span class="comment">//职业分类</span></span><br><span class="line"><span class="attr">positionList</span>:[</span><br><span class="line">  &#123;<span class="attr">type</span>:<span class="number">0</span>,<span class="attr">name</span>:<span class="string">&#x27;ui设计师&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">type</span>:<span class="number">1</span>,<span class="attr">name</span>:<span class="string">&#x27;运维工程师&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">type</span>:<span class="number">2</span>,<span class="attr">name</span>:<span class="string">&#x27;产品&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">type</span>:<span class="number">3</span>,<span class="attr">name</span>:<span class="string">&#x27;Java工程师&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">type</span>:<span class="number">4</span>,<span class="attr">name</span>:<span class="string">&#x27;IOS工程师&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">type</span>:<span class="number">5</span>,<span class="attr">name</span>:<span class="string">&#x27;Android工程师&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">type</span>:<span class="number">6</span>,<span class="attr">name</span>:<span class="string">&#x27;Web前端工程师&#x27;</span>&#125;</span><br><span class="line">]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>显示的结果是：Web前端工程师，改变type值，显示相应的职位。</p>
<h1 id="拓展思考"><a href="#拓展思考" class="headerlink" title="拓展思考"></a>拓展思考</h1><p>AngularJS的内置过滤器有哪些？</p>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>参考一：angularJS constant和value<br>参考二：AngularJS的Filter用法详解</p>
<h1 id="更多提问"><a href="#更多提问" class="headerlink" title="更多提问"></a>更多提问</h1><p>1、constant函数取值，和直接用常量名有什么区别</p>
<p>答：大多数情况直接用常量名，但是在angular中，使用constant的字段约定与后台进行数据交互的时候很方便，结构更加清晰。constant()函数和直接使用常量名输出的效果是一样的，但函数可以动态的输出不同的常量，在使用上要灵活、方便。</p>
<p>2、filter怎么去掉时间的秒</p>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="xml">答：</span><span class="template-variable">&#123;&#123;<span class="name">date</span> | date : <span class="string">&#x27;yyyy-MM-dd hh:mm:ss EEEE&#x27;</span>&#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">参数用来指定所要的格式，y M d h m s E 分别表示 年 月 日 时 分 秒 星期，你可以自由组合它们</span></span><br></pre></td></tr></table></figure>
<p>3、什么情况下使用filter</p>
<p>答：常用的就是一个date的格式转换，表格中进行排序、还有大量的一些约定字段，使用自定义的filter。</p>
]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
      <tags>
        <tag>angular</tag>
      </tags>
  </entry>
  <entry>
    <title>博客折腾总结</title>
    <url>/2019/08/05/about_blog/</url>
    <content><![CDATA[<p>&emsp;&emsp;之前看到有人说，写 Blog 的人都是这样的，从刚接触 Blog 感觉很新鲜，用的都是免费的开箱即用先搭起来再说，然后发现免费的限制总是很多，开始不安分想法开始变得有点多，开始自己购买域名和空间，搭建独立博客想怎么折腾怎么折腾，后来又觉得独立博客的管理太麻烦，只是想要个能写能看能发布的简单的，再有那么一点点的自定义，周周转转还是回来了</p>
<p>&emsp;&emsp;前段时间自己买了域名、服务器、搭建环境，用 koa 写接口 + mysql 管理 + pug（原 jade ） 写页面做服务器渲染，接触了很多没接触过的东西</p>
<p>&emsp;&emsp;但是看看这个博客其实还是用 hexo 生成，之前是用的 next 主题，很好看符合大多数人的审美，但是用的人太多了，其实再看到有一个一样的博客的时候就想换了，所以这次还是自己写了个主题，一直在犹豫要不要发布到 hexo 的主题列表，又想独一无二又想骗几个 star，还是发了万一有人喜欢呢，虽然样式方面还是被周围同志吐槽了一下，但是我自己觉得挺好看的啊，就这样，但是评论截至现在还没搞好</p>
<p>&emsp;&emsp;关于 koa，以前用过 express，其实已经不大记得了，所以这次用了 koa，官网很简单很短但是全英文所以我看得还是很慢，也看了阮一峰的koa的教程，上手要比当时用 express 快些，翻了翻以前的代码再看看现在 koa 的代码，感觉差别不大，自己使用场景还是太少了</p>
<p>&emsp;&emsp;以前写的项目都是前端写页面，后端给接口，前后端分离，做服务器渲染还是第一次，也是第一次接触 pug、ejs 这样的模板引擎，用之前也在 ejs 和 pug 之间犹豫，用ejs的人比较多，ejs 的结构更像 html 上手也更简单，pug 上手比起ejs稍微难些但是回了就很爽，我是想着学会了难的是那么简单的需要的时候再学也不会花费很多时间，所以最后用了 pug，使用感一个字 “棒”，用起来实在是太舒服了，pug 之于 html 就像 scss 之于 css 一样，jq 之于 js 一样，大大的减少了代码量，代码简单干净规范，后面写 hexo 主题的时候因为 hexo 本身不支持 pug 需要安装一些插件才行所以用了 Swig，Swig 确实更简单些，文档就那么几段话上手很快，但是写了个开头果断还是换成了 pug，后来在项目里 vue 的模板引擎也换成了 pug</p>
<p>&emsp;&emsp;关于服务器，之前也买过但是只是一个空间，这次买了 linux 服务器，以前没用过 linux 从搭建到部署，一把血泪史，各种命令实在太多了，后面一定要把我的小笔记里关于 linux 的整理一下给以后用的时候看</p>
<p>&emsp;&emsp;关于 mysql，一直接触的都不多，只会一些简单的增删查改，这次接触了一些更难的吧，比如群组、多条件查询，还是要感谢旁边的后端同学</p>
<p>&emsp;&emsp;关于正则，之前用正则机会一直不多，都是断断续续的，时不时有那么一个场景会用到就在你快要忘了的时候，所以我的小笔记关于正则记得很详细，公司大佬对正则很熟练，成功的让我看到了正则的魅力还有强大的地方，而这次写 blog 因为需要在本地筛选文件、过滤文章内容提取文章信息，所以其实用了蛮多正则的，正则确实是很强大的工具</p>
<p>&emsp;&emsp;总的来说，涨了知识，也不算白折腾，但是服务器也买了、域名也买了，还是想要再弄点什么</p>
]]></content>
      <categories>
        <category>Others</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>angularjs双向绑定后，发生了什么事情？view层和controller层是如何进行绑定的？</title>
    <url>/2017/12/19/angular_%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A/</url>
    <content><![CDATA[<h1 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h1><p>双向绑定，是从界面的操作能实时反映到数据，数据的变更也能</p>
<p>实时展现到界面</p>
<h2 id="如何绑定"><a href="#如何绑定" class="headerlink" title="如何绑定"></a>如何绑定</h2><p>如果我们自己实现双向数据绑定该怎么写？</p>
<h2 id="如何实现"><a href="#如何实现" class="headerlink" title="如何实现"></a>如何实现</h2><p>angular是一个MVVM（Model-View，View-Model）模式的框架。</p>
<p>MVC:View传送指令到Controller；Controller完成业务逻辑后，要求Model改变状态；</p>
<p>Model将新的数据发送到View；所有通信都是单向的</p>
<p>MVVM它采用双向绑定：View的变动，自动反映在ViewModel，反之亦然。</p>
<p>View是angularjs编译html后呈现出来的，需要编译的是controller中的定义的属性和方法以及directive中定义的指令。</p>
<p>View和controller是独立开来的，他们之间的纽带就是scope。Controller负责向scope中提供属性和方法，</p>
<p>便于和view层面的html进行交互。</p>
<p>Angular双向绑定通过$watch,$digest，$apply实现的。</p>
<blockquote>
<p>watch序列</p>
</blockquote>
<p>watch监控model中是否有变化，会记录last值，也就是改变后的值，每一个model都会增加一个watch到watch队列中。</p>
<blockquote>
<p>digest循环</p>
</blockquote>
<p>当浏览器接收到可以被angular context处理的事件时，$digest循环就会触发，这个循环有两个子循环，</p>
<p>一个处理evalAsync队列，另一个处理watch队列，$digest会遍历$watch</p>
<p>既然所有的$watch都检查完了，那就要问了：有没有$watch更新过？如果有至少一个更新过，这个循环就会再次触发，</p>
<p>直到所有的$watch都没有变化。这样就能够保证每个model都已经不会再变化。记住如果循环超过10次的话，</p>
<p>它将会抛出一个异常，防止无限循环。 当$digest循环结束时，DOM相应地变化。</p>
<p>每一个进入angular context的事件都会执行一个$digest循环，也就是说每次我们输入一个字母循环都会检查整个页面的所有$watch。</p>
<h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><p>$digest和$apply有何区别？干嘛不直接使用$digest?</p>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>这里值虽然改变了，但是没有强制执行$degest,watch根本没有执行</p>
<p>一般带ng的事件angular都会给你自动添加好了apply，但是你要操纵事件的时候加上apply才能实现数据输出到view层中。</p>
<p>为什么在ng-click里面调用$digest的话，会报错呢？因为Angular的设计，同一时间只允许一个$digest运行，</p>
<p>而ng-click这种内置指令已经触发了$digest，当前的还没有走完，所以就出错了</p>
<p>当你传入一个function到$apply()中的时候，这个function会被包装到一个try…catch块中，所以一旦有异常发生，</p>
<p>该异常会被$exceptionHandler service处理。</p>
<p>1.$apply可以带参数，它可以接受一个函数，然后在应用数据之后，调用这个函数。</p>
<p>2.当调用$digest的时候，只触发当前作用域和它的子作用域上的监控，但是当调用$apply的时候，会触发作用域树上的所有监控。</p>
<h1 id="更多讨论"><a href="#更多讨论" class="headerlink" title="更多讨论"></a>更多讨论</h1><p>Q、angular是什么框架</p>
<p>A、angular是一个MVVM（Model-View，View-Model）模式的框架</p>
<p>Q、为什么在ng-click里面调用$digest的话，会报错呢</p>
<p>A、因为Angular的设计，同一时间只允许一个$digest运行，</p>
<p>而ng-click这种内置指令已经触发了$digest，当前的还没有走完，所以就出错了</p>
<p>Q、$digest和$apply有何区别</p>
<p>A、1.$apply可以带参数，它可以接受一个函数，然后在应用数据之后，调用这个函数。</p>
<p>2.当调用$digest的时候，只触发当前作用域和它的子作用域上的监控，但是当调用$apply的时候，会触发作用域树上的所有监控。</p>
<p>7.参考文献</p>
<p><a href="http://www.cnblogs.com/bigdataZJ/p/AngularjsInAction2.html">http://www.cnblogs.com/bigdataZJ/p/AngularjsInAction2.html</a> view和controller的那些事儿</p>
<p><a href="https://github.com/xufei/blog/issues/10">https://github.com/xufei/blog/issues/10</a>  Angular沉思录（一）数据绑定</p>
<p><a href="http://www.angularjs.cn/A0a6%E7%90%86%E8%A7%A3$watch%EF%BC%8C$apply%E5%92%8C$digest">http://www.angularjs.cn/A0a6理解$watch，$apply和$digest</a> —理解数据绑定过程</p>
]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
      <tags>
        <tag>angular</tag>
      </tags>
  </entry>
  <entry>
    <title>理解浏览器缓存机制</title>
    <url>/2019/05/14/browser_cache/</url>
    <content><![CDATA[<p>有关浏览器缓存的几个疑问</p>
<ul>
<li>浏览器缓存判断流程？</li>
<li>两种分类协商缓存和强制缓存是什么？怎么判断？</li>
<li>缓存的资源放在哪儿？</li>
<li>不同的刷新对缓存的影响？</li>
</ul>
<h2 id="浏览器缓存的流程"><a href="#浏览器缓存的流程" class="headerlink" title="浏览器缓存的流程"></a>浏览器缓存的流程</h2><p>当客户端请求某个资源，首先需要询问浏览器是否存在缓存<br>有以下三种结果：</p>
<ul>
<li>不存在，那么直接向服务器发起请求，就像第一次访问该网站一样</li>
<li>存在，通过Cache-Control、Expires判断后缓存已失效，那么则使用协商缓存，携带该资源缓存标识向服务器发起请求，服务器根据 http header 判断后决定是否使用缓存，若协商缓存失效重新拉取请求结果则状态码为 200 ，若协商缓存生效那么继续使用缓存状态码为 304</li>
<li>存在，通过Cache-Control、Expires判断后未失效，那么继续使用缓存状态码为 304</li>
</ul>
<p>图示：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  浏览器发起请求</span><br><span class="line">        |</span><br><span class="line">        |</span><br><span class="line">    是否有缓存 ——— 是 ——— 缓存是否失效 ——— 是 ——— 协商缓存 ———— 成功</span><br><span class="line">        |                     |                    |           |</span><br><span class="line">        |                     |                    |           |</span><br><span class="line">        否                    否                  失败          |</span><br><span class="line">        |                     |                    |           |</span><br><span class="line">        |—————————————————————|————————————————————|           |</span><br><span class="line">        |                     |                                |</span><br><span class="line">  向服务器请求资源           读取缓存————————————————————————————|</span><br><span class="line">        |                     |</span><br><span class="line">        |                     |</span><br><span class="line">根据 http header 存缓存        |</span><br><span class="line">        |                     |</span><br><span class="line">        |—————————————————————|</span><br><span class="line">        |</span><br><span class="line">     完成加载</span><br></pre></td></tr></table></figure>

<p>所以有两种缓存类型，强制缓存和协商缓存，优先判断的不需要发 http 请求的是强制缓存<br>当强制缓存无效时才启用协商缓存，协商缓存需要发送 http 请求交由服务器判断，可以应用于一些时常需要动态更新的资源文件</p>
<h2 id="强制缓存"><a href="#强制缓存" class="headerlink" title="强制缓存"></a>强制缓存</h2><p>浏览器判断强制缓存是否存在和是否失效这两个：Cache-Control、Expires</p>
<ul>
<li>Cache-Control *</li>
</ul>
<p>http/1.1的字段，控制网页缓存的主要规则，取值：</p>
<ul>
<li><p>public： 所有内容都将被缓存</p>
</li>
<li><p>private：默认值，所有内容只有客户端可以缓存， CDN 等中继缓存服务器不能缓存</p>
</li>
<li><p>no-cache：客户端缓存内容，但由协商缓存决定是否使用缓存</p>
</li>
<li><p>no-store：所有内容都不会被缓存</p>
</li>
<li><p>max-ag=xxx：缓存内容在xxx秒后失效</p>
</li>
<li><p>max-stale=xxx: 指定时间内，即使缓存过时依然使用资源</p>
</li>
<li><p>min-fresh=xxx：缓存的资源至上要保持指定时间的新鲜期</p>
</li>
<li><p>only-if-cached：仅仅返回已经缓存的资源，不访问网络，无缓存返回 504</p>
</li>
<li><p>no-transform：强制要求代理服务器不要对资源进行转换，禁止代理服务器对 Content-Type、Content-Encoding, Content-Range 字段进行修改</p>
</li>
<li><p>Expires *</p>
</li>
</ul>
<p>http/1.0 的字段，请求结果缓存到期时间，优先级低于 Cache-Control:max-age<br>由于 Expires 设置的时绝对时间<br>若 Expires 和 Cache-Control:max-age 两者都没出现浏览器默认使用启发式算法：响应头的（ Date - Last - Modified ）* 10，也就是（响应时间 - 文件最后修改时间 ）* 10</p>
<h2 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h2><p>Etag / If-None-Match 优先级高于Last-Modified / If-Modfied-Since，同时存在前者生效</p>
<ul>
<li><p>Last-Modified / If-Modified-Since / If-Unmodified-since *</p>
</li>
<li><p>Last-Modified 是服务器响应请求时返回该资源在服务器的最后修改时间</p>
</li>
<li><p>If-Modified-Since 是客户端再次发起请求时携带上次服务器返回的Last-Modified, 服务器接收到这个时间将与该资源在服务器最后修改的时间进行对比，若服务器修改的时间大于客户端发送的时间，则状态码200重新返回资源，否则返回304表示资源无更新继续使用缓存</p>
</li>
<li><p>If-Unmodified-since 同上，资源未修改正常执行更新反之返回412</p>
</li>
<li><p>Etag / If-None-Match *</p>
</li>
<li><p>Etag 是资源唯一标识符，服务器响应请求时返回当前资源的唯一标识符</p>
</li>
<li><p>If-None-Match 是客户端再次发起该请求时携带上次请求时服务器返回的唯一标识符 Etag，服务器接收到该值会与该资源在服务器的 Etag 值做对比，一致状态码 304 表示无更新继续使用缓存，反之则返回资源文件状态码 200</p>
</li>
</ul>
<h2 id="缓存的资源在哪儿？"><a href="#缓存的资源在哪儿？" class="headerlink" title="缓存的资源在哪儿？"></a>缓存的资源在哪儿？</h2><p>浏览器通过 http 请求获取到资源，那么资源会缓存在哪儿</p>
<p>memory cache：内存缓存，会将编译解析的文件，直接存入该进程内存中，占据一定的内存资源，以便下次快速读取，进程关闭即清空</p>
<p>from disk cache：硬盘缓存，盘缓存是将缓存写入硬盘文件中，读取缓存需要对该缓存存放的硬盘文件进行i/o操作，然后解析读取，速度比内存缓存慢</p>
<p>浏览器读取缓存时 memory ——&gt; disk ——&gt; 两者都没有便发起网络请求 ——&gt; 获取资源缓存到硬盘和内存</p>
<p>在浏览器中，css 文件会存入硬盘文件中，因为 css 文件通常只在页面渲染时加载一次，<br>而 js 和图片等文件解析执行后直接存入内存缓存中，是因为可能会频繁读取，当刷新页面时只需直接从内存缓存中读取</p>
<h2 id="浏览器行为对缓存的影响"><a href="#浏览器行为对缓存的影响" class="headerlink" title="浏览器行为对缓存的影响"></a>浏览器行为对缓存的影响</h2><ul>
<li>刷新网页，如果缓存没有失效，浏览器直接使用缓存，反之 http 请求数据</li>
<li>手动刷新 / F5，浏览器会认为缓存失效，在请求服务器时加上Cache-Control: max-age=0字段，然后询问服务器数据是否更新</li>
<li>强制刷新 / Ctrl + F5，浏览器会直接忽略缓存，在请求服务器时加上Cache-Control: no-cache字段，然后重新向服务器拉取文件</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li><p>其他和缓存相关的 header 头部 *</p>
</li>
<li><p>date 响应生成时间</p>
</li>
<li><p>age 代理服务器生成，表示代理服务器对于请求资源的已缓存时间, 单位为秒</p>
</li>
<li><p>Pragma：no-cache: http / 1.0 作用和 Cache-Control:no-cache 一样，如果在控制台勾选 Disable cache, 浏览器自动带上该字段</p>
</li>
<li><p>vary 缓存版本，可用于区分 pc 和 移动端需要加载的资源</p>
</li>
<li><p>浏览器禁用缓存 *</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Cache-Control&quot;</span> <span class="attr">content</span>=<span class="string">&quot;no-cache, no-store, must-revalidate&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://mp.weixin.qq.com/s?__biz=MjM5MTA1MjAxMQ==&mid=2651226262&idx=1&sn=2128db200b88479face67ed8e095757c&chksm=bd4959128a3ed0041b43a5683c75c4b88c7d35fac909a59c14b4e9fc11e8d408680b171d2706&scene=21#wechat_redirect">浏览器的缓存机制小结</a><br><a href="https://mp.weixin.qq.com/s/d2zeGhUptGUGJpB5xHQbOA">彻底理解浏览器的缓存机制</a></p>
]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
      <tags>
        <tag>Cache</tag>
      </tags>
  </entry>
  <entry>
    <title>canvas 的 imagedata 对象</title>
    <url>/2019/02/21/canvas-1/</url>
    <content><![CDATA[<h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><p>ImageData 是canvas的图像数据，由** ImageData() <strong>构造函数返回一个实例化的对象，</strong> 三个可读属性 ** </p>
<ul>
<li><p>data：一个 Uint8ClampedArray 类型的一维数组，包含RGBA 顺序的数据，每4个元素表示一个RGBA 值即对应一个像素, 左上角在数组的索引0位置，像素从左到右被处理，然后往下，遍历整个数组</p>
</li>
<li><ul>
<li>RGBA：** R - 红色（0-255）、G - 绿色（0-255）、B - 蓝色（0-255）、A - alpha 通道（0-255; 0 是透明的，255 是完全可见的）</li>
</ul>
</li>
<li><ul>
<li> Uint8ClampedArray（8位无符号整型固定数组）：** 类型化数组表示一个由值固定在0-255区间的8位无符号整型组成的数组；如果你指定一个在 [0,255] 区间外的值，它将被替换为0或255；如果你指定一个非整数，那么它将被设置为最接近它的整数。（数组）内容被初始化为0。</li>
</ul>
</li>
<li><p>width：以像素为单位的图像的宽</p>
</li>
<li><p>height：以像素为单位的图像的高</p>
</li>
</ul>
<p>** 三个参数的关系是：data.length = height * width * 4 **<br>不满足这个关系的时候就会报错：” The input data length is not a multiple of (4 * width).” ，不要问我为什么知道</p>
<h2 id="构建一个ImageData-对象"><a href="#构建一个ImageData-对象" class="headerlink" title="构建一个ImageData 对象"></a>构建一个ImageData 对象</h2><h3 id="使用canvas-API"><a href="#使用canvas-API" class="headerlink" title="使用canvas API"></a>使用canvas API</h3><p>** createImageData(): 传入宽和高获得一个ImageData对象或者传入一个已经存在的ImageData对象渲染到画布 **</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&quot;canvas&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> ctx = canvas.getContext(<span class="string">&quot;2d&quot;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(ctx.createImageData(<span class="number">200</span>, <span class="number">200</span>))</span><br></pre></td></tr></table></figure>

<p>** getImageData(): 提取一个矩形区域的图像数据，返回一个ImageData对象 **<br>ctx.getImageData(矩形区域的左上角 x 坐标, 矩形区域的左上角 y 坐标, 矩形区域的宽度, 矩形区域的高度)<br>下面是一个简单的小例子让div背景色随着鼠标指针下的图片颜色变化而变化，思路是使用 getImageData() 获取鼠标下1像素的区域，也就是一个RGBA值赋值给div<br>运行时注意canvas图片使用 getImageData() 的跨域问题</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> img = <span class="keyword">new</span> Image()</span><br><span class="line">img.src = <span class="string">&#x27;./static/img/1547436818106.png&#x27;</span></span><br><span class="line"><span class="keyword">let</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;canvas&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> ctx = canvas.getContext(<span class="string">&#x27;2d&#x27;</span>)</span><br><span class="line">img.onload = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  ctx.drawImage(img, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">  img.style.display = <span class="string">&#x27;none&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> color = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;color&#x27;</span>)</span><br><span class="line">canvas.addEventListener(<span class="string">&#x27;mousemove&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> pixel = ctx.getImageData(e.layerx, e.layery, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">  color.style.background =  <span class="string">&#x27;rgba(&#x27;</span> + pixel.data[<span class="number">0</span>] + <span class="string">&#x27;,&#x27;</span> + pixel.data[<span class="number">1</span>] + <span class="string">&#x27;,&#x27;</span> + pixel.data[<span class="number">2</span>] + <span class="string">&#x27;,&#x27;</span> + (pixel.data[<span class="number">3</span>] / <span class="number">255</span>) + <span class="string">&#x27;)&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="直接使用ImageData-构造函数创建-data可为空"><a href="#直接使用ImageData-构造函数创建-data可为空" class="headerlink" title="直接使用ImageData()构造函数创建, data可为空"></a>直接使用ImageData()构造函数创建, data可为空</h3><p>当data为空时会自动按照width和height的大小，以0填充整个像素矩阵，也就是一个空白画布<br>若需要传入data图像数据，要注意 width * height * 4 = data.length</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> imagedata = <span class="keyword">new</span> ImageData(data, width, height)</span><br><span class="line"><span class="comment">// ImageData &#123; width: width, height: height, data: Uint8ClampedArray[width * height * 4] &#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="操作像素"><a href="#操作像素" class="headerlink" title="操作像素"></a>操作像素</h2><p><strong>putImageData(): 对画布进行像素数据的写入，也就是将指定的 ImageData 对象放到画布上，7个参数，前3个为必填</strong><br>ctx.putImageData(imagedata, 图像数据在目标画布中的位置X坐标, Y坐标, 在图像数据中截取一个矩形区域左上角的位置X坐标, Y坐标, 矩形区域Width, Height);<br>一个小例子图片灰度处理，思路是使用 getImageData() 获取当前 ImageData 数据，然后遍历 data 数组改变 RGBA 的值，最后在使用 putImageData() 放回画布</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> img = <span class="keyword">new</span> Image()</span><br><span class="line">img.src = <span class="string">&#x27;./static/img/shareedu.png&#x27;</span></span><br><span class="line"><span class="keyword">let</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;canvas&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> ctx = canvas.getContext(<span class="string">&#x27;2d&#x27;</span>)</span><br><span class="line">img.onload = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  ctx.drawImage(img, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">  img.style.display = <span class="string">&#x27;none&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>).addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> pre = ctx.getImageData(<span class="number">0</span>,<span class="number">0</span>,canvas.width, canvas.height)</span><br><span class="line">  <span class="keyword">let</span> data = pre.data</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.length; i += <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> avg = (data[i] + data[i +<span class="number">1</span>] + data[i +<span class="number">2</span>]) / <span class="number">3</span></span><br><span class="line">    data[i] = avg</span><br><span class="line">    data[i + <span class="number">1</span>] = avg</span><br><span class="line">    data[i + <span class="number">2</span>] = avg</span><br><span class="line">  &#125;</span><br><span class="line">  ctx.putImageData(pre, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>drawImage(): 在画布上绘制图像，9个参数，image, dx, dy为必填</strong><br>image: 图像源<br>sx: 选择需要的图像源区域，矩形选择框的左上角 X 轴坐标。<br>sy:  矩形选择框的Y 轴坐标。<br>sWidth: 需要绘制到目标上下文中的，image的矩形（裁剪）选择框的宽度。如果不说明，整个矩形（裁剪）从坐标的sx和sy开始，到image的右下角结束。<br>sHeight: 需要绘制到目标上下文中的，image的矩形（裁剪）选择框的高度。<br>dx: image的左上角在目标canvas上 X 轴坐标。<br>dy: image的左上角在目标canvas上 Y 轴坐标。<br>dWidth: image在目标canvas上绘制的宽度。 允许对绘制的image进行缩放<br>dHeight: image在目标canvas上绘制的高度。 允许对绘制的image进行缩放<br>一个小例子将图片放在鼠标指定位置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&quot;canvas&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> ctx = canvas.getContext(<span class="string">&quot;2d&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> img = <span class="keyword">new</span> Image()</span><br><span class="line">img.src = <span class="string">&#x27;./static/img/shareedu.png&#x27;</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&#x27;canvas&#x27;</span>).addEventListener(<span class="string">&#x27;mousedown&#x27;</span>, <span class="function">(<span class="params">e</span>)=&gt;</span>&#123;</span><br><span class="line">  ctx.clearRect(<span class="number">0</span>,<span class="number">0</span>,ctx.canvas.width,ctx.canvas.height)</span><br><span class="line">  ctx.drawImage(img, e.offsetX, e.offsetY, <span class="number">200</span>, <span class="number">200</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>imageSmoothingEnabled, 这是个属性设置图片是否平滑，只需要将他赋值为true（平滑）或者false（不平滑）</strong></p>
<p><strong>canvas.toDataURL(‘image/png’, quality) 返回一个包含图片展示的 data URI , 2个参数, 图片格式默认为png, 0到1的品质选择（图片格式为 image/jpeg 或 image/webp的情况下）</strong></p>
<p><strong>canvas.toBlob(callback, type, encoderOptions),创建一个Blob对像，用以展示canvas上的图片，3个参数</strong><br>callback：回调函数返回一个blob对象<br>type：图片格式，默认为’image/png’<br>encoderOptions:  0到1的品质选择（图片格式为 image/jpeg 或 image/webp的情况下）</p>
<h1 id="一些canvas的小例子"><a href="#一些canvas的小例子" class="headerlink" title="一些canvas的小例子"></a>一些canvas的小例子</h1><p>自己学习过程中用canvas写的一些小东西，源码带有注解给大家参考，会坚持不断更新这个目录….</p>
<p><strong><a href="https://tong-h.github.io/canvas-store/roundPercent/index.html">环形百分比动画</a></strong><br><img src="https://tong-h.github.io/canvas-store/roundPercent/img.png" alt="示例图片"><br><strong><a href="https://tong-h.github.io/canvas-store/particle/index.html">粒子动画</a></strong><br><img src="https://tong-h.github.io/canvas-store/particle/img.png" alt="示例图片"><br><strong><a href="https://tong-h.github.io/canvas-store/draw/index.html">电子画板</a></strong><br><img src="https://tong-h.github.io/canvas-store/draw/img.png" alt="示例图片"><br><strong><a href="https://tong-h.github.io/canvas-store/imgcut/index.html">图片裁剪</a></strong><br><img src="https://tong-h.github.io/canvas-store/imgcut/img.png" alt="示例图片"></p>
<h1 id="本站和canvas有关的文章"><a href="#本站和canvas有关的文章" class="headerlink" title="本站和canvas有关的文章"></a>本站和canvas有关的文章</h1><p><strong><a href="https://tong-h.github.io/2019/03/07/canvas-2/#more">canvas 动画篇</a></strong></p>
]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
      <tags>
        <tag>canvas</tag>
      </tags>
  </entry>
  <entry>
    <title>canvas 动画篇</title>
    <url>/2019/03/07/canvas-2/</url>
    <content><![CDATA[<p>最近用canvas蛮多的，canvas写动画也蛮好使的</p>
<h1 id="canvas-由-js-来控制，但用-js-写动画通常3种方法控制时间"><a href="#canvas-由-js-来控制，但用-js-写动画通常3种方法控制时间" class="headerlink" title="canvas 由 js 来控制，但用 js 写动画通常3种方法控制时间"></a>canvas 由 js 来控制，但用 js 写动画通常3种方法控制时间</h1><ul>
<li><p><font color="#bb1509" size="4"><strong>setInterval( function, delay )</strong></font> 在指定的毫秒数下循环调用函数或表达式，直到使用clearInterval清除</p>
</li>
<li><p><font color="#bb1509" size="4"><strong>setTimeout( function, delay )</strong></font> 在指定的毫秒数后调用函数或计算表达式</p>
</li>
</ul>
<p>前两个是平时会用得会比较多的，setInterval 和 setTimeout的本质是将回调函数添加到任务队列的尾部等待执行，但是前面的任务到底需要多少时间执行完是不确定的，如果前面堵塞了那么后面就无法执行<br>尤其setInterval指定的是”开始执行”之间的间隔，并不考虑每次任务执行本身所消耗的时间，<strong>下一个回调开始执行的时间 = 指定时间 - 回调函数执行的时间</strong>，因此实际上，两次执行之间的间隔会小于指定的时间</p>
<p>下面的写法可以确保执行时间始终是2000ms</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> timer = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  timer = <span class="built_in">setTimeout</span>(f, <span class="number">2000</span>);</span><br><span class="line">&#125;, <span class="number">2000</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li><font color="#bb1509" size="4"><strong>window.requestAnimationFrame(callback) 和 window.requestAnimationFrame(requestID)</strong></font><br>前者是告诉浏览器——你希望执行一个动画，并且要求浏览器在下次重绘之前调用指定的回调函数更新动画。该方法需要传入一个回调函数作为参数，返回一个 requestID，该回调会在浏览器下一次重绘之前执行<br>后者是取消一个先前通过调用window.requestAnimationFrame()方法添加到计划中的动画帧请求，接受一个 requestID，不需要的时候就取消掉释放内存绝对是个好习惯</li>
</ul>
<p>显示器刷新频率是60Hz，最平滑动画的最佳循环间隔是1000ms/60，约等于16.6ms<br>requestAnimationFrame就是根据显示器刷新频率来的，这是浏览器专门为动画提供的API，在运行时浏览器会自动优化方法的调用，节省系统资源，提高系统性能，如果页面不是激活状态下的话，requestAnimationFrame() 会被暂停调用以提升性能和电池寿命</p>
<h1 id="一些canvas的小例子"><a href="#一些canvas的小例子" class="headerlink" title="一些canvas的小例子"></a>一些canvas的小例子</h1><p>自己学习过程中用canvas写的一些小东西，源码带有注解给大家参考，会坚持不断更新这个目录….</p>
<p><strong><a href="https://tong-h.github.io/canvas-store/roundPercent/index.html">环形百分比动画</a></strong><br><img src="https://tong-h.github.io/canvas-store/roundPercent/img.png" alt="示例图片"><br><strong><a href="https://tong-h.github.io/canvas-store/particle/index.html">粒子动画</a></strong><br><img src="https://tong-h.github.io/canvas-store/particle/img.png" alt="示例图片"><br><strong><a href="https://tong-h.github.io/canvas-store/draw/index.html">电子画板</a></strong><br><img src="https://tong-h.github.io/canvas-store/draw/img.png" alt="示例图片"><br><strong><a href="https://tong-h.github.io/canvas-store/imgcut/index.html">图片裁剪</a></strong><br><img src="https://tong-h.github.io/canvas-store/imgcut/img.png" alt="示例图片"></p>
<h1 id="本站和canvas有关的文章"><a href="#本站和canvas有关的文章" class="headerlink" title="本站和canvas有关的文章"></a>本站和canvas有关的文章</h1><p><strong><a href="https://tong-h.github.io/2019/02/21/canvas-1/#more">canvas 的 imagedata 对象</a></strong></p>
<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://www.w3cplus.com/javascript/requestAnimationFrame.html">https://www.w3cplus.com/javascript/requestAnimationFrame.html</a> © w3cplus.com<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame">https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame</a><br><a href="https://javascript.ruanyifeng.com/advanced/timer.html">https://javascript.ruanyifeng.com/advanced/timer.html</a></p>
]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
      <tags>
        <tag>canvas</tag>
      </tags>
  </entry>
  <entry>
    <title>canvas 文字粒子特效</title>
    <url>/2019/04/23/canvas-fontparticle/</url>
    <content><![CDATA[<p><a href="https://mser.xyz/canvas-store/three_imgParticles/index.html">three.js 3D版本</a><br>update</p>
<hr>
<p>一个文字粒子效果,折腾了一些时间，纯粹觉得好玩 <a href="https://tong-h.github.io/canvas-store/fontparticle/index.html">点这里看效果</a></p>
<h2 id="随机初始化部分粒子"><a href="#随机初始化部分粒子" class="headerlink" title="随机初始化部分粒子"></a>随机初始化部分粒子</h2><p>1、首先要明白每个粒子都是一个对象，都有自己的起点，移动速度，移动轨迹，终点</p>
<p>2、粒子活动轨迹：初始化 —- 聚合拼合文字形状 —- 散开 —- 再聚合 —- 散开…</p>
<p>3、根据动画时间调整粒子的移动速度来安排他们的位置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.startx = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * docsize[<span class="number">0</span>]),   <span class="comment">// 初始起点</span></span><br><span class="line">        <span class="built_in">this</span>.starty = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * docsize[<span class="number">1</span>]),</span><br><span class="line">        <span class="built_in">this</span>.speedx = (<span class="built_in">Math</span>.random() * <span class="number">2</span> - <span class="number">1</span>) * pointspeed,     <span class="comment">// 移动速度</span></span><br><span class="line">        <span class="built_in">this</span>.speedy = (<span class="built_in">Math</span>.random() * <span class="number">2</span> - <span class="number">1</span>) * pointspeed, </span><br><span class="line">        <span class="built_in">this</span>.endx = <span class="number">0</span>,                                          <span class="comment">// 终点</span></span><br><span class="line">        <span class="built_in">this</span>.endy = <span class="number">0</span>,</span><br><span class="line">        <span class="built_in">this</span>.color = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">5</span>)              <span class="comment">// 粒子颜色</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">endpoint</span>(<span class="params">x, y</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.endx = x</span><br><span class="line">        <span class="built_in">this</span>.endy = y</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">animal</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.startx += <span class="built_in">this</span>.speedx</span><br><span class="line">        <span class="built_in">this</span>.starty += <span class="built_in">this</span>.speedy</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 到达边界改变粒子运动方向</span></span><br><span class="line">        <span class="built_in">this</span>.speedx *= <span class="built_in">this</span>.startx &gt; docsize[<span class="number">0</span>] || <span class="built_in">this</span>.startx &lt; <span class="number">0</span> ? -<span class="number">1</span> : <span class="number">1</span></span><br><span class="line">        <span class="built_in">this</span>.speedy *= <span class="built_in">this</span>.starty &gt; docsize[<span class="number">1</span>] || <span class="built_in">this</span>.starty &lt; <span class="number">0</span> ? -<span class="number">1</span> : <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调整点的移动速度用以聚和拼合文字</span></span><br><span class="line">        <span class="keyword">if</span>(time === <span class="number">100</span> || time === <span class="number">600</span> || time === <span class="number">1100</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.speedx = (<span class="built_in">this</span>.endx - <span class="built_in">this</span>.startx) / joinspeed</span><br><span class="line">            <span class="built_in">this</span>.speedy = (<span class="built_in">this</span>.endy - <span class="built_in">this</span>.starty) / joinspeed</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 到达终点后静止不动</span></span><br><span class="line">        <span class="keyword">if</span>(time === <span class="number">100</span> + joinspeed || time === <span class="number">600</span> + joinspeed || time === <span class="number">1100</span> + joinspeed) &#123;</span><br><span class="line">            <span class="built_in">this</span>.speedx = <span class="number">0</span></span><br><span class="line">            <span class="built_in">this</span>.speedy = <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 散开</span></span><br><span class="line">        <span class="keyword">if</span>(time === <span class="number">300</span> || time === <span class="number">800</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.speedx = (<span class="built_in">Math</span>.random() * <span class="number">2</span> - <span class="number">1</span>) * pointspeed</span><br><span class="line">            <span class="built_in">this</span>.speedy = (<span class="built_in">Math</span>.random() * <span class="number">2</span> - <span class="number">1</span>) * pointspeed</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        maincontent.beginPath()</span><br><span class="line">        maincontent.fillStyle = color[<span class="built_in">this</span>.color]</span><br><span class="line">        maincontent.arc(<span class="built_in">this</span>.startx, <span class="built_in">this</span>.starty, <span class="number">7</span>, <span class="number">0</span>, <span class="built_in">Math</span>.PI * <span class="number">2</span>)</span><br><span class="line">        maincontent.fill()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="使用-canvas-画板生成文字"><a href="#使用-canvas-画板生成文字" class="headerlink" title="使用 canvas 画板生成文字"></a>使用 canvas 画板生成文字</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 【文字面积，循环时用于判读y轴高度，粒子大小间隔， 文字宽度】</span></span><br><span class="line"><span class="keyword">let</span> [imgdata, cyclic, size, textwith] = [&#123;&#125;, <span class="number">1</span>, <span class="number">16</span>, <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">textcontext.font = <span class="string">&quot;normal 900 &quot;</span> + fontsize +<span class="string">&quot;px Avenir, Helvetica Neue, Helvetica, Arial, sans-serif&quot;</span></span><br><span class="line">textwith = <span class="built_in">Math</span>.floor(textcontext.measureText(text).width)</span><br><span class="line">textcontext.fillStyle = <span class="string">&#x27;#ff0000&#x27;</span></span><br><span class="line">textcontext.fillText(text, (docsize[<span class="number">0</span>] - textwith) / <span class="number">2</span>, (docsize[<span class="number">1</span>]) / <span class="number">2</span>)</span><br><span class="line">textwith = ~~ (textwith) * size + size</span><br></pre></td></tr></table></figure>

<h2 id="遍历-imageData-获取文字区域的像素坐标"><a href="#遍历-imageData-获取文字区域的像素坐标" class="headerlink" title="遍历 imageData 获取文字区域的像素坐标"></a>遍历 imageData 获取文字区域的像素坐标</h2><p>不了解 imagedata 怎么用？ 看看这篇文章<a href="https://tong-h.github.io/2019/02/21/canvas-1/#more">canvas 的 imagedata 对象</a></p>
<p>获取坐标这里有很多种方法，我看了一些教程好像没人像我这么写，要注意的是</p>
<ul>
<li><p>imageData 4个元素为一个像素，也就是一个R G B A 值，A 是 alpha 透明度</p>
</li>
<li><p>空白的区域 rgba 就是 0,0,0,0 , 文字区域就是有颜色的如果你没有设置字体颜色默认是黑色 rgba 就是 0,0,0,255，通过判断第四个元素可以获取文字区域</p>
</li>
<li><p>但是我建议重新设置一个其他的颜色比如红色 255,0,0,255，用第1个和2个数字来判断, 这样字体边缘会圆滑些，因为在字体边缘黑色和白色的交界处可能有某几个像素不是透明的</p>
</li>
<li><p>每个坐标最后都会生成一个圆，所以这里获取的是圆心的坐标，圆之间还需要留有空隙，所以遍历的时候你要根据你的圆的大小掌握好间隔</p>
</li>
<li><p>获取文字区域粒子数量后需要判断，目前屏幕上现有的粒子是否足够拼合和文字或者是否还需再添加粒子</p>
</li>
<li><p>确定粒子数量后再将文字坐标作为粒子移动终点赋值给粒子</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取文字所在区域，尽可能减小面积</span></span><br><span class="line">imgdata = textcontext.getImageData(<span class="number">0</span>,<span class="number">0</span>, textwith, fontsize * <span class="number">2</span>)</span><br><span class="line">textcontext.clearRect(<span class="number">0</span>, <span class="number">0</span>, docsize[<span class="number">0</span>], docsize[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 粒子圆心坐标，粒子数组</span></span><br><span class="line"><span class="keyword">let</span> [x, y, len] = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历data数据查找文字所在的坐标</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; imgdata.data.length; i += size * <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (imgdata.data[i] === <span class="number">255</span> &amp;&amp; imgdata.data[i+<span class="number">3</span>] === <span class="number">255</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断当前粒子数量是否能够拼合文字</span></span><br><span class="line">        <span class="keyword">if</span> (len &gt; pointarr.length - <span class="number">1</span>) pointarr.push(<span class="keyword">new</span> Point)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取每个粒子聚拢的终点</span></span><br><span class="line">        pointarr[len].endpoint(i /<span class="number">4</span> % textwith, cyclic)</span><br><span class="line">        len ++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i/<span class="number">4</span> == cyclic * textwith) &#123;</span><br><span class="line">        cyclic += size</span><br><span class="line">        i = textwith * (cyclic-<span class="number">1</span>) * <span class="number">4</span></span><br><span class="line">    &#125;·</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pointarr.length - <span class="number">1</span> - len &gt; <span class="number">0</span> ? pointarr.splice(len, pointarr.length - len) : <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong>不用 imagedata, 遍历 width 和 height 也是一样的</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> y = <span class="number">0</span>; y &lt; textCanvas.height; y += size) &#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">let</span> x = <span class="number">0</span>; x &lt; textwith; x += size) &#123;</span><br><span class="line">		<span class="keyword">if</span> (imageData.data[(x + y * textwith) * <span class="number">4</span>] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="comment">// todo....</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="源码带有详细的注解点这儿"><a href="#源码带有详细的注解点这儿" class="headerlink" title="源码带有详细的注解点这儿"></a>源码带有详细的注解<a href="https://tong-h.github.io/canvas-store/fontparticle/index.html">点这儿</a></h2><p><a href="https://github.com/Tong-H/canvas-store">更多效果</a><br>开源不易，觉得还不错点个 start 吧 (´▽`ʃ♡ƪ)</p>
]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
      <tags>
        <tag>canvas</tag>
      </tags>
  </entry>
  <entry>
    <title>canvas 性能优化篇</title>
    <url>/2019/03/18/canvas-3/</url>
    <content><![CDATA[<p>看了很多大佬的文章，自己也对项目做了一些优化，其实有很多地方平常码代码的时候稍微注意一下就能节约很多性能开销</p>
<h1 id="1-离屏渲染"><a href="#1-离屏渲染" class="headerlink" title="1.离屏渲染"></a>1.离屏渲染</h1><p>在离屏canvas上预渲染相似的图形或重复的对象，通俗的解释是将离屏canvas当成预渲染，在离屏canvas上绘制好一整块图形，绘制好后在放到视图canvas中，适合每一帧画图运算复杂的图形</p>
<p>比如你想把一张图片放到canvas上，使用drawImage()方法，有三种写法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将image放到目标canvas指定位置</span></span><br><span class="line"><span class="keyword">void</span> ctx.drawImage(image, dx, dy); </span><br><span class="line"><span class="comment">// 将image放到目标canvas指定位置，指定宽高渲染</span></span><br><span class="line"><span class="keyword">void</span> ctx.drawImage(image, dx, dy, dWidth, dHeight);</span><br><span class="line"><span class="comment">// 将image裁剪之后放到目标canvas指定位置，指定宽高渲染</span></span><br><span class="line"><span class="keyword">void</span> ctx.drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight);</span><br></pre></td></tr></table></figure>
<p>第一种只是把图片原样放到canvas里，第二章指定宽高就意味着放大或者缩小图片后再放进去，带三种是裁剪后再放大或者缩小放到canvas中，这三种写法操作依次增加，性能开销也是依次提高<br>而离屏渲染就可以让我们先把图片裁剪成想要的尺寸内容保存起来，绘制的时候就可以使用第一种写法简单的把图片放进去就完了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在离屏 canvas 上绘制</span></span><br><span class="line"><span class="keyword">var</span> offscreencanvas = <span class="built_in">document</span>.createElement(<span class="string">&#x27;canvas&#x27;</span>);</span><br><span class="line"><span class="comment">// 宽高赋值为想要的图片尺寸</span></span><br><span class="line">offscreencanvas.width = dWidth;</span><br><span class="line">offscreencanvas.height = dHeight;</span><br><span class="line"><span class="comment">// 裁剪</span></span><br><span class="line">offscreencanvas.getContext(<span class="string">&#x27;2d&#x27;</span>).drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight);</span><br><span class="line"><span class="comment">// 在视图canvas中绘制</span></span><br><span class="line">viewcontext.drawImage(canvas, x, y);</span><br></pre></td></tr></table></figure>

<h1 id="2-分层画布"><a href="#2-分层画布" class="headerlink" title="2.分层画布"></a>2.分层画布</h1><p>多个相互重叠的canvas根据变化程度分开渲染，越复杂的场景越适合</p>
<p>比如一个简单的游戏场景，游戏背景始终不变或者变化次数较少但是人物游戏的主体是一直在根据玩家的指挥不停的改变，</p>
<p>场景：最近写的一个画板，比如这样一个简单的画圆，可以看到有原来的绘画的痕迹，那就要 渲染没画圆之前的画布 -&gt; 再画圆，鼠标移动的时候不断的执行这个渲染过程</p>
<p><img src="/2019/03/18/canvas-3/canvas-3.gif" alt="示例画圆gif"></p>
<p>这个时候就可以使用分层画布，画画在一个上层canvas上，原来绘画痕迹在下层canvas上，那么画圆的过程就是清空 -&gt; 画圆，画好之后再放到下层canvas上，这样就不需要去渲染之前的画布，就能节约性能开销</p>
<h1 id="3-一次性绘制"><a href="#3-一次性绘制" class="headerlink" title="3.一次性绘制"></a>3.一次性绘制</h1><p>绘制操作的性能开销较高，可以创建一个包含所有线条的路径，然后通过单个绘制路径调用进行绘制</p>
<p>从这样</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; points.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> p1 = points[i];</span><br><span class="line">  <span class="keyword">var</span> p2 = points[i+<span class="number">1</span>];</span><br><span class="line">  context.beginPath();</span><br><span class="line">  context.moveTo(p1.x, p1.y);</span><br><span class="line">  context.lineTo(p2.x, p2.y);</span><br><span class="line">  context.stroke();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>变成这样，在绘制复杂路径时，最好将所有点都放入路径中，而不是分别呈现各个片段</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">context.beginPath();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; points.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> p1 = points[i];</span><br><span class="line">  <span class="keyword">var</span> p2 = points[i+<span class="number">1</span>];</span><br><span class="line">  context.moveTo(p1.x, p1.y);</span><br><span class="line">  context.lineTo(p2.x, p2.y);</span><br><span class="line">&#125;</span><br><span class="line">context.stroke();</span><br></pre></td></tr></table></figure>

<h1 id="4-使用requestAnimationFrame执行动画"><a href="#4-使用requestAnimationFrame执行动画" class="headerlink" title="4.使用requestAnimationFrame执行动画"></a>4.使用requestAnimationFrame执行动画</h1><p>canvas动画的本质是不断地擦除和重绘，再结合一些时间控制的方法达到动画的目的<br>显示器刷新频率是60Hz，最平滑动画的最佳循环间隔是1000ms/60，约等于16.6ms<br>而requestAnimationFrame就是根据显示器刷新频率来的，这是浏览器专门为动画提供的API，在运行时浏览器会自动优化方法的调用，节省系统资源，提高系统性能，如果页面不是激活状态下的话，requestAnimationFrame() 会被暂停调用以提升性能和电池寿命</p>
<p>详细看<a href="https://tong-h.github.io/2019/03/07/canvas-2/#more">这儿</a></p>
<h1 id="5-清空画布"><a href="#5-清空画布" class="headerlink" title="5.清空画布"></a>5.清空画布</h1><p>三种方法性能，性能依次提高</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">context.fillRect()</span><br><span class="line">context.clearRect()</span><br><span class="line">canvas.width = canvas.width; <span class="comment">// 一种画布专用的技巧</span></span><br></pre></td></tr></table></figure>

<h1 id="6-减少调用canvas的api"><a href="#6-减少调用canvas的api" class="headerlink" title="6.减少调用canvas的api"></a>6.减少调用canvas的api</h1><p>比如像背景可以使用css属性设置或者img标签加一些定位什么的</p>
<p>画布的缩放可以使用CSS transforms，不要将小画布放大，而是去将大画布缩小</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> scaleX = canvas.width / <span class="built_in">window</span>.innerWidth;</span><br><span class="line"><span class="keyword">var</span> scaleY = canvas.height / <span class="built_in">window</span>.innerHeight;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> scaleToFit = <span class="built_in">Math</span>.min(scaleX, scaleY);</span><br><span class="line"><span class="keyword">var</span> scaleToCover = <span class="built_in">Math</span>.max(scaleX, scaleY);</span><br><span class="line"></span><br><span class="line">stage.style.transformOrigin = <span class="string">&#x27;0 0&#x27;</span>; <span class="comment">//scale from top left</span></span><br><span class="line">stage.style.transform = <span class="string">&#x27;scale(&#x27;</span> + scaleToFit + <span class="string">&#x27;)&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h1 id="其他注意点"><a href="#其他注意点" class="headerlink" title="其他注意点"></a>其他注意点</h1><ul>
<li>尽可能使用计算代替canvas渲染，通常情况下，渲染比计算的开销大很多（3~4 个量级）</li>
<li>减少改变 context 的状态以及不要赋一些乱七八糟类型的值，比如人家要一个number你要给一个string，浏览器会用一些额外时间来处理这些非法输入，可能会造成三四倍的时间开销</li>
<li>避免使用浮点数坐标，使用非整数的坐标绘制内容，系统会自动使用抗锯齿功能，尝试对线条进行平滑处理，这又是一种性能消耗。可以调用 Math.round 四舍五入取整</li>
<li>减少使用 shadowBlur 效果，和很多图像环境渲染一样，阴影渲染的性能开销通常比较高</li>
</ul>
<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API/Tutorial/Optimizing_canvas">https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API/Tutorial/Optimizing_canvas</a><br><a href="https://www.html5rocks.com/zh/tutorials/canvas/performance/">https://www.html5rocks.com/zh/tutorials/canvas/performance/</a><br><a href="http://taobaofed.org/blog/2016/02/22/canvas-performance/">http://taobaofed.org/blog/2016/02/22/canvas-performance/</a></p>
]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
      <tags>
        <tag>canvas</tag>
      </tags>
  </entry>
  <entry>
    <title>canvas绘制dom计算分页自定义打印</title>
    <url>/2021/03/15/canvasprint/</url>
    <content><![CDATA[<p>原生打印香吗？当然香啊，window.print() 页头页尾页码统统有，还能用 @media print 设置打印样式，没什么问题，棒棒的舒舒服服的；但是（没有但是也没这篇文章了🙃🙃🙃）分享分享一些我踩到的坑，以及我的解决方案</p>
<h2 id="在打印页面加粗的字体的显示"><a href="#在打印页面加粗的字体的显示" class="headerlink" title="在打印页面加粗的字体的显示"></a>在打印页面加粗的字体的显示</h2><p>现在字体大部分都用苹方，微软雅黑之类的，好看又百搭，但是偶尔也会有UI要求或者其他原因引起的特殊需求需要其他字体，就会惊喜的发现明明设置了 css，页面显示出来的也是font-weight: bold 的效果，但是在打印下却还是和 font-weight: normal 一样。</p>
<p>我用的是宋体，如果你和我一样 <strong>1.字体是动态 2.需要加粗 3.这个字体没有加粗的版本 4.还需要打印</strong><br>可以试试我的替代方案:</p>
<h3 id="1-更换字体"><a href="#1-更换字体" class="headerlink" title="1. 更换字体"></a>1. 更换字体</h3><p>在 @media print 为需要加粗的文字更换其他字体，缺点就是因为不是配套的字体可能会不协调，而且文字如果是动态的，那么加载一个字体包可能会影响用户体验</p>
<h3 id="2-canvas-绘制-dom"><a href="#2-canvas-绘制-dom" class="headerlink" title="2. canvas 绘制 dom"></a>2. canvas 绘制 dom</h3><p>虽然我后来也用了这个但是是因为另外的问题，所以如果仅仅因为字体加粗的话…嗯 …. 🤐🤐，看第三个👇👇👇</p>
<h3 id="3-使用多个字体重叠达到加粗效果"><a href="#3-使用多个字体重叠达到加粗效果" class="headerlink" title="3. 使用多个字体重叠达到加粗效果"></a>3. 使用多个字体重叠达到加粗效果</h3><p>这是我当时用的办法，用 before + after + attr() 重叠达到加粗效果</p>
<pre><code>    <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.strong</span> &#123;</span><br><span class="line">	<span class="attribute">font-weight</span>: normal;</span><br><span class="line">	<span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.strong</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">	<span class="attribute">content</span>: <span class="built_in">attr</span>(data-text);</span><br><span class="line">	<span class="attribute">z-index</span>: -<span class="number">1</span>;</span><br><span class="line">	<span class="attribute">line-height</span>: <span class="number">100%</span>;</span><br><span class="line">	<span class="attribute">position</span>: absolute;</span><br><span class="line">	<span class="attribute">display</span>: inline-block;</span><br><span class="line">	<span class="attribute">left</span>: -<span class="number">0.8px</span>;</span><br><span class="line">	<span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.strong</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">	<span class="attribute">content</span>: <span class="built_in">attr</span>(data-text);</span><br><span class="line">	<span class="attribute">z-index</span>: -<span class="number">1</span>;</span><br><span class="line">	<span class="attribute">line-height</span>: <span class="number">100%</span>;</span><br><span class="line">	<span class="attribute">position</span>: absolute;</span><br><span class="line">	<span class="attribute">display</span>: inline-block;</span><br><span class="line">	<span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">top</span>: -<span class="number">0.4px</span>;</span><br><span class="line">	<span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</code></pre>
<h2 id="页头页脚自定义"><a href="#页头页脚自定义" class="headerlink" title="页头页脚自定义"></a>页头页脚自定义</h2><p>原生打印含有页头页脚，可以自定义 margin, size，但无法自定义页头页脚内容，页头页脚含有日期，url，页码，网站 title，但我…只需要页码<br><a href="https://developers.google.com/web/tools/chrome-devtools/css/print-preview">在 f12 查看打印样式</a>：ctrl + shift + p 展开命令菜单输入 show rendering，在 emulate css media type 选择 print</p>
<h3 id="1-在-page-里设置-margin"><a href="#1-在-page-里设置-margin" class="headerlink" title="1. 在 @page 里设置 margin"></a>1. 在 @page 里设置 margin</h3><p>不要页头 margin-top：0；不要页脚 margin-bottom：0, 如果不要页脚 url 是没了同样的页码也没了；什么都不需要 margin: 0，也可以在打印高级设置里隐藏页头页脚；</p>
<p>不管是margin-top：0，margin: 0，页头页脚是没了且页面的边距也没了，可以用元素 padding 或 margin 撑开但是如果是多页在分页的地方有可能会出现没有边距的情况</p>
<h3 id="2-修改-url"><a href="#2-修改-url" class="headerlink" title="2. 修改 url"></a>2. 修改 url</h3><p>使用 history API 修改 url, <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/History/pushState">MDN History.pushState()</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">history.pushState(&#123;&#125;, <span class="string">&quot;&quot;</span>, <span class="string">&quot;/&quot;</span>);</span><br><span class="line"><span class="built_in">window</span>.print()</span><br><span class="line">history.back()</span><br></pre></td></tr></table></figure>

<p>最后只剩下网站域名，但对我来说好像不是很行</p>
<h3 id="3-尝试使用-counter-increment、counter-加上页码"><a href="#3-尝试使用-counter-increment、counter-加上页码" class="headerlink" title="3. 尝试使用 counter-increment、counter() 加上页码"></a>3. 尝试使用 counter-increment、counter() 加上页码</h3><p>全部隐藏后尝试使用 counter-increment 和 CSS计数器 counter() 加上页码, <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/counter-increment">MDN counter-increment</a> <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/counter-increment">MDN CSS counter</a></p>
<p>body 里重置 page，固定 #pageNum 在页面重复渲染，counter-increment 增加 page 值，couter() 显示 page</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">	<span class="attribute">counter-reset</span>: page</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#pageNum</span> &#123;</span><br><span class="line">	<span class="attribute">position</span>: fixed;</span><br><span class="line">	<span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> print &#123;</span><br><span class="line">	<span class="keyword">@page</span> &#123;</span><br><span class="line">		size: auto;</span><br><span class="line">		<span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="selector-id">#pageNum</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">		<span class="attribute">counter-increment</span>: page;</span><br><span class="line">		<span class="attribute">content</span>: <span class="string">&quot;Page &quot;</span><span class="built_in">counter</span>(page);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 Google 不生效始终显示 0，Firefox 只在第一页显示总页面数….. 😶😶😶😶</p>
<h3 id="4-最终方案：使用-canvas-绘制-dom-计算分页最后生成图片打印，解决所有原生问题"><a href="#4-最终方案：使用-canvas-绘制-dom-计算分页最后生成图片打印，解决所有原生问题" class="headerlink" title="4. 最终方案：使用 canvas 绘制 dom 计算分页最后生成图片打印，解决所有原生问题"></a>4. 最终方案：使用 canvas 绘制 dom 计算分页最后生成图片打印，解决所有原生问题</h3><p>如果你不太了解 canvas，底部👇👇👇可以查看以往相关文章</p>
<p>1.dom 变 svg, 再变 image src</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> scale = <span class="number">3</span></span><br><span class="line"><span class="keyword">var</span> el = <span class="built_in">document</span>.querySelector(<span class="string">&quot;content&quot;</span>), svg, img = <span class="keyword">new</span> Image(),</span><br><span class="line">	cav = <span class="built_in">document</span>.createElement(<span class="string">&quot;canvas&quot;</span>), ctx, imagedata,</span><br><span class="line">	pages = <span class="number">0</span>, margintop = <span class="number">100</span> * scale, marginleft = <span class="number">0</span> * scale, height = <span class="number">1122</span> * scale, pageheight;</span><br><span class="line">pageheight = height - margintop * <span class="number">2</span></span><br><span class="line">ctx = cav.getContext(<span class="string">&quot;2d&quot;</span>)</span><br><span class="line">img.setAttribute(<span class="string">&#x27;crossOrigin&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">img.className = <span class="string">&quot;printpage&quot;</span></span><br><span class="line">svg = <span class="string">`data:image/svg+xml;charset=utf-8,&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;<span class="subst">$&#123;el.clientWidth&#125;</span>&quot; height=&quot;<span class="subst">$&#123;el.clientHeight&#125;</span>&quot;&gt;</span></span><br><span class="line"><span class="string">		&lt;foreignObject x=&quot;0&quot; y=&quot;0&quot; width=&quot;100%&quot; height=&quot;100%&quot;&gt;</span></span><br><span class="line"><span class="string">			&lt;style&gt;<span class="subst">$&#123;style&#125;</span>&lt;/style&gt;</span></span><br><span class="line"><span class="string">			<span class="subst">$&#123;<span class="keyword">new</span> XMLSerializer().serializeToString(el)&#125;</span></span></span><br><span class="line"><span class="string">		&lt;/foreignObject&gt;</span></span><br><span class="line"><span class="string">	&lt;/svg&gt;`</span>;</span><br><span class="line">img.src = svg.replace(<span class="regexp">/\n/g</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="regexp">/\t/g</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="regexp">/#/g</span>, <span class="string">&#x27;%23&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li> canvas 是根据像素绘制，所以 canvas 绘制的时候使用同样的和 dom 一样的尺寸正常在电脑看没问题但是打印就会变得模糊，而 svg 是矢量图，所以应该放大 image 再绘制 canvas，但是同样的如果绘制尺寸太大会非常影响性能所以根据情况调整，我是设置放大三倍左右;</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cav.height = img.height * scale</span><br><span class="line">cav.width = img.width * scale</span><br><span class="line">ctx.fillStyle = <span class="string">&#x27;#fff&#x27;</span></span><br><span class="line">ctx.fillRect(<span class="number">0</span>, <span class="number">0</span>, cav.width, cav.height)</span><br><span class="line">ctx.drawImage(img, <span class="number">0</span>, <span class="number">0</span>, img.width * scale, img.height * scale)</span><br><span class="line">img.src = cav.toDataURL()</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>按照打印页面高度计算总页数，这个总页数不一定是最后的总页数，扣除上边距后开始绘制图片，图片绘制完成后再绘制页脚，页脚的位置也应该是计算总长度后取中间位置</li>
<li>循环页数绘制图片，由于是图片所以分页的地方需要尤其注意，避免在文字中间被分开；循环 imagedata 扫描像素点，对比背景</li>
<li>如果一行文字因为分页从中间被截掉那么被截的上半部分应该要留到下一页再绘制，同时要记下这上部分的高度<br>ps: 因为我的页面是纯文字白色背景，所以如果你的页面有图片或者其他色块，那么可能需要注意如果是被截的是图片或者其他的和文字颜色相同的色块，通常可能是不需要去避免这个截断，那么或许可以在 dom 的时候做一些准备比如记下位置什么的</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">pages = <span class="built_in">Math</span>.ceil(img.height / pageh)</span><br><span class="line">cav.height = pages * height</span><br><span class="line">cav.width = img.width</span><br><span class="line">ctx.fillStyle = <span class="string">&#x27;#fff&#x27;</span></span><br><span class="line">ctx.fillRect(<span class="number">0</span>, <span class="number">0</span>, cav.width, cav.height)</span><br><span class="line"><span class="keyword">var</span> point = <span class="number">0</span>, tw = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> p = <span class="number">0</span>; p &lt; pages; p++) &#123;</span><br><span class="line">	ctx.drawImage(</span><br><span class="line">		img,</span><br><span class="line">		<span class="number">0</span>, point, img.width, pageh,</span><br><span class="line">		marginl, margint + p * height, img.width, pageh</span><br><span class="line">	)</span><br><span class="line">	<span class="keyword">var</span> iscut = <span class="literal">true</span>, rows = <span class="number">0</span></span><br><span class="line">	<span class="keyword">while</span> (iscut &amp;&amp; rows &lt; <span class="number">120</span>) &#123;</span><br><span class="line">		imagedata = ctx.getImageData(marginl, (p + <span class="number">1</span>) * height - margint - (rows + <span class="number">1</span>), img.width, <span class="number">1</span>)</span><br><span class="line">		iscut = <span class="literal">false</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; imagedata.data.length; i += <span class="number">2</span> * <span class="number">4</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (imagedata.data[i] === <span class="number">0</span>) &#123;</span><br><span class="line">				rows++</span><br><span class="line">				iscut = <span class="literal">true</span></span><br><span class="line">				rows === <span class="number">120</span> &amp;&amp; <span class="built_in">console</span>.log(<span class="string">&quot;陷入循环&quot;</span> + p)</span><br><span class="line">				<span class="keyword">break</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	point += (pageh - rows)</span><br><span class="line">	ctx.fillRect(marginl, (p + <span class="number">1</span>) * height - margint - rows, img.width, rows)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="7">
<li>由于我们的高度已经算好了，那么现在由于被截掉的文字的原因，剩余的需要绘制的高度也发生了变化，所以在画完当前总页数的最后一页后如果还有图片还未绘制完成应该加一，再绘制一页，canvas 尺寸也要进行同步更新</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (pages === p + <span class="number">1</span> &amp;&amp; point &lt; img.height) &#123;</span><br><span class="line">	pages += <span class="number">1</span></span><br><span class="line">	<span class="keyword">var</span> oldcav = ctx.getImageData(<span class="number">0</span>, <span class="number">0</span>, cav.width, cav.height)</span><br><span class="line">	cav.height = pages * height</span><br><span class="line">	ctx.fillStyle = <span class="string">&#x27;#fff&#x27;</span></span><br><span class="line">	ctx.fillRect(<span class="number">0</span>, <span class="number">0</span>, cav.width, cav.height)</span><br><span class="line">	ctx.putImageData(oldcav, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="8">
<li>ok，现在图片绘制完成，页数也算完了，就可以绘制页码了</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ctx.fillStyle = <span class="string">&#x27;#000&#x27;</span></span><br><span class="line">ctx.font = <span class="string">&quot;normal normal &quot;</span> + scale * <span class="number">14</span> + <span class="string">&quot;px SimSun, Avenir, Helvetica Neue, Helvetica, Arial, sans-serif&quot;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> p = <span class="number">0</span>; p &lt; pages; p++) &#123;</span><br><span class="line">	tw = ctx.measureText(<span class="string">&quot;第&quot;</span> + (p + <span class="number">1</span>) + <span class="string">&quot;页 共&quot;</span> + pages + <span class="string">&quot;页&quot;</span>)</span><br><span class="line">	ctx.fillText(<span class="string">&quot;第&quot;</span> + (p + <span class="number">1</span>) + <span class="string">&quot;页 共&quot;</span> + pages + <span class="string">&quot;页&quot;</span>, (cav.width - tw.width) / <span class="number">2</span>, (p + <span class="number">1</span>) * height - (margint / <span class="number">2</span>))</span><br><span class="line">&#125;</span><br><span class="line">img.src = cav.toDataURL()</span><br></pre></td></tr></table></figure>

<ol start="9">
<li>页码绘制完成后将 image 调成原始尺寸进行打印，放入body进行打印</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">img.width = img.width / scale</span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">&quot;.printpage&quot;</span>) &amp;&amp; <span class="built_in">document</span>.querySelector(<span class="string">&quot;.printpage&quot;</span>).remove()</span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">&quot;body&quot;</span>).insertBefore(img, el)</span><br><span class="line"><span class="built_in">window</span>.print()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="10">
<li>css 样式部分可以做一些简单隐藏显示处理，在打印时隐藏正常页面内容，显示绘制完成的image</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">	<span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.printpage</span> &#123;</span><br><span class="line">	<span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> print &#123;</span><br><span class="line">	<span class="keyword">@page</span> &#123;</span><br><span class="line">		size: auto;</span><br><span class="line">		<span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="selector-class">.printpage</span> &#123;</span><br><span class="line">		<span class="attribute">display</span>: block;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="selector-class">.content</span> &#123;</span><br><span class="line">		<span class="attribute">display</span>: none;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>实际上我之前还有一个问题是 input 或 textarea 在打印下不显示输入的内容，因为，后来手动赋值解决，但是在写博客我发现我没办法复现那个问题了，尝试了 js 赋值、插入 dom、手动输入各种操作并没有出现我预期的 bug，everything is fine….，所以🤐🤐🤐</p>
<h2 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h2><p><a href="https://mser.xyz/tags/canvas/">canvas 相关</a><br><a href="https://mser.xyz/2019/02/21/canvas-1/">canvas 的 imagedata 对象</a></p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Lists_and_Counters/Using_CSS_counters#displaying_a_counter">MDN: Displaying a counter</a></p>
<p><a href="https://www.geeksforgeeks.org/how-to-remove-url-from-printing-the-page/">How to hide an element when printing a web page using CSS?</a></p>
<p><a href="https://stackoverflow.com/questions/58227220/how-to-change-the-url-from-the-printing-page">stackoverflow: How to change the URL from the printing page?</a></p>
]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
      <tags>
        <tag>canvas</tag>
      </tags>
  </entry>
  <entry>
    <title>cordova之相机拍照以及本地图片获取上传</title>
    <url>/2018/08/27/cordova_%E5%9B%BE%E7%89%87%E8%8E%B7%E5%8F%96%E4%B8%8A%E4%BC%A0/</url>
    <content><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">图片获取</span><br><span class="line">此插件定义了一个全局navigator.camera对象，该对象提供用于拍摄照片和从系统图像库中选择图像的API</span><br><span class="line">支持平台：<span class="keyword">Android、BlackBerry、Browser、Firefox、FireOS、iOS、Windows、WP8、Ubuntu</span></span><br><span class="line"><span class="keyword"></span>cordova plugin <span class="keyword">add </span>cordova-plugin-camera</span><br><span class="line"></span><br><span class="line">图片上传</span><br><span class="line">这个插件定义了全局FileTransfer，FileUploadOptions构造函数，用于传输文件</span><br><span class="line">看你上传的方式如果你使用<span class="keyword">bs64就可以不用这个插件</span></span><br><span class="line"><span class="keyword"></span>支持平台：Amazon Fire OS、<span class="keyword">Android、BlackBerry </span><span class="number">10</span>、<span class="keyword">Browser、Firefox </span>OS**、iOS、Windows Phone <span class="number">7</span> <span class="keyword">and </span><span class="number">8</span>*、Windows</span><br><span class="line">cordova plugin <span class="keyword">add </span>cordova-plugin-file-transfer</span><br></pre></td></tr></table></figure>

<h1 id="camera-getPicture官方文档"><a href="#camera-getPicture官方文档" class="headerlink" title="camera.getPicture官方文档"></a>camera.getPicture<a href="http://cordova.axuer.com/docs/zh-cn/latest/reference/cordova-plugin-camera/index.html">官方文档</a></h1><p>camera.getPicture 功能打开设备的默认相机应用程序接受三个参数：调用成功的回调，失败的回调，以及调用方法需要设置的参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">navigator.camera.getPicture(Success, <span class="built_in">Error</span>, Options)</span><br><span class="line">imageFile () &#123;</span><br><span class="line">  navigator.camera.getPicture(success, error, &#123; <span class="attr">quality</span>: <span class="number">50</span>,</span><br><span class="line">    <span class="attr">destinationType</span>: Camera.DestinationType.DATA_URL, <span class="attr">sourceType</span>:<span class="number">0</span> &#125;)</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">success</span>(<span class="params">imageURI</span>) </span>&#123;</span><br><span class="line">      alert(<span class="built_in">JSON</span>.stringify(imageURI))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">error</span>(<span class="params">message</span>) </span>&#123;</span><br><span class="line">      alert(<span class="built_in">JSON</span>.stringify(message))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h2 id="自定义参数"><a href="#自定义参数" class="headerlink" title="自定义参数"></a>自定义参数</h2><p>这里只列举了一些常用的 api，而且某些参数在不同平台表现会有差异，建议你去官方文档查看更详细的参数</p>
<p>quality：默认 50，保存图像的质量，表示为 0-100 的范围，其中 100 通常为全分辨率，不会因文件压缩而丢失。</p>
<p>destinationType：调用成功的返回值格式</p>
<p>DATA_URL（返回 base64 编码的字符串）、FILE_URI（文件 url）、NATIVE_URI（原生 url）</p>
<p>sourceType：图片来源</p>
<p>PHOTOLIBRARY(从图片库中选择图片（与 SAVEDPHOTOALBUM for Android 相同）)</p>
<p>CAMERA(相机拍照)</p>
<p>SAVEDPHOTOALBUM(从图片库中选择图片（与 Android 的 PHOTOLIBRARY 相同）)</p>
<p>Direction: 摄像头是前置还是后置，这个当然是 PictureSourceType 等于 CAMERA 时有效</p>
<p>BACK（前置） FRONT（后置）</p>
<p>saveToPhotoAlbum：拍照后将图像是否保存到设备上的相册中，返回 boolean</p>
<p>correctOrientation：拍照时是否旋转图像以校正设备的方向，返回 boolean</p>
<p>EncodingType：图片格式，可选 JPEG 或者 JPEG</p>
<p>MediaType：能否选择视频或者其他媒体类型，默认只能选择图片</p>
<p>popoverOptions：仅限 iOS 的选项，用于在从 iPad 的库或相册中选择图像时指定弹出框的锚元素位置和箭头方向</p>
<h1 id="FileTransfer官方文档"><a href="#FileTransfer官方文档" class="headerlink" title="FileTransfer官方文档"></a>FileTransfer<a href="http://cordova.axuer.com/docs/zh-cn/latest/reference/cordova-plugin-file-transfer/index.html">官方文档</a></h1><p>分为上传和下载</p>
<h2 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h2><p>options：可选参数（Object）<br>  fileKey：表单元素的名称。默认为file<br>  fileName：在服务器上保存文件时使用的文件名。默认为image.jpg<br>  httpMethod：要使用的HTTP方法 - PUT或者POST。默认为POST<br>  mimeType：要上载的数据的mime类型。默认为image/jpeg<br>  params：一组可选的键/值对，用于传递HTTP请求。（对象，键/值 - DOMString）<br>  chunkedMode：是否以分块流模式上传数据。默认为true。（布尔）<br>  headers：标题名称/标题值的映射。使用数组指定多个值。在iOS，FireOS和Android上，如果存在名为Content-Type的标题，则不会使用多部分表单数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> ft = <span class="keyword">new</span> FileTransfer()</span><br><span class="line">ft.upload(fileURL,<span class="built_in">encodeURI</span>(<span class="string">&quot;http://some.server.com/upload.php&quot;</span>), successCallback, errorCallback, options)</span><br><span class="line">参数：文件地址，上传接口，成功回调，失败回调，上传需设置的可选参数</span><br></pre></td></tr></table></figure>
<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> ft = <span class="keyword">new</span> FileTransfer();</span><br><span class="line">fileTransfer.download(uri, fileURL,successCallback successCallback, errorCallback,<span class="literal">false</span>,&#123;</span><br><span class="line">        <span class="attr">headers</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Authorization&quot;</span>: <span class="string">&quot;Basic dGVzdHVzZXJuYW1lOnRlc3RwYXNzd29yZA==&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line">参数：服务器url，设备上文件的文件系统URL，成功回调，失败回调，上传需设置的可选参数，是否接受所有安全证书，可选参数目前只支持header</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
      <tags>
        <tag>cordova</tag>
      </tags>
  </entry>
  <entry>
    <title>cordova定位 + 仿钉钉打卡功能</title>
    <url>/2018/08/20/cordova_%E5%AE%9A%E4%BD%8D/</url>
    <content><![CDATA[<p>最近在研究hybridApp，使用vue+cordova，现在需要实现一个钉钉打卡的功能<br>大致要实现这4个需求：地图显示、定位、地图覆盖效果、距离测量</p>
<h1 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h1><p>定位相对而言比较复杂所以优先考虑，关于定位，我尝试了3种办法</p>
<p>第一个尝试了cordova自带的插件，结果是报错：code：2，message：network provider is not available，原因是新版的插件已经删掉了关于Android版定位的代码，改为基于系统浏览器(chrome内核)进行定位，但经测试发现因为国内网络原因根本无法定位</p>
<p>第二个是用的高德地图的JavaScript API，定位虽然成功但是定位和实际位置有几百米的误差这个肯定不行</p>
<p>第三个是用的cordova的baidumaplocation插件，误差在几十米之间还可以接受</p>
<p>首先附上<a href="https://github.com/aruis/cordova-plugin-baidumaplocation">插件github的连接</a></p>
<p>第一步你得先去<a href="http://lbsyun.baidu.com/apiconsole/key">百度</a>创建一个应用</p>
<h2 id="创建android应用签名文件-查看SHA1"><a href="#创建android应用签名文件-查看SHA1" class="headerlink" title="创建android应用签名文件/查看SHA1"></a>创建android应用签名文件/查看SHA1</h2><p>开发版本</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">cd .<span class="keyword">android </span>进入  C:\Users\FLTD-Y01\.<span class="keyword">android&gt;</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line">调试版本使用<span class="built_in">debug</span>.keystore，命令为：keytool -list -v -keystore <span class="built_in">debug</span>.keystore。</span><br><span class="line"></span><br><span class="line">提示输入密钥库密码，调试版本默认密码是: <span class="keyword">android</span></span><br></pre></td></tr></table></figure>

<p>发布版本</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">建立签名文件</span><br><span class="line">$ keytool -genkey -v -keystore <span class="built_in">key</span>.keystore -<span class="built_in">alias</span> <span class="built_in">key</span> -keyalg RSA -validity <span class="number">365</span></span><br></pre></td></tr></table></figure>
<p>回车后会让你输入名字公司什么的，按照提示继续就好</p>
<p>执行完成后会在文件夹内创建一个key.keystore的签名文件</p>
<p>然后就能够看到md5、SHA1什么的了</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">查看签名信息</span><br><span class="line">$ keytool -<span class="type">list</span> -v -keystore <span class="type">key</span>.keystore</span><br></pre></td></tr></table></figure>


<h2 id="安装baidumaplocation插件"><a href="#安装baidumaplocation插件" class="headerlink" title="安装baidumaplocation插件"></a>安装baidumaplocation插件</h2><figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">安装baidumaplocation插件</span><br><span class="line"><span class="symbol">$</span> cordova plugin add cordova-plugin-baidumaplocation --<span class="keyword">variable</span> ANDROID_KEY=<span class="string">&quot;你的key&quot;</span> --<span class="keyword">variable</span> <span class="comment">IOS_KEY=</span><span class="comment">&quot;value&quot;</span> <span class="comment">--save</span></span><br><span class="line"> 只需要Android端或者IOS端，可以只填写一个相应的key，另外一个你还是得填点什么，不然你懂的</span><br></pre></td></tr></table></figure>

<h2 id="炒鸡简单的用法上代码"><a href="#炒鸡简单的用法上代码" class="headerlink" title="炒鸡简单的用法上代码"></a>炒鸡简单的用法上代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$ baidumap_location.getCurrentPosition (<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">$   <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(result))</span><br><span class="line">$ &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">$   <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(error))</span><br><span class="line">$ &#125;)</span><br></pre></td></tr></table></figure>
<p>温馨提示：只有在手机上才能获取比较准确的信息，所以最好真机测试</p>
<h2 id="地图显示、覆盖物效果、距离计算"><a href="#地图显示、覆盖物效果、距离计算" class="headerlink" title="地图显示、覆盖物效果、距离计算"></a>地图显示、覆盖物效果、距离计算</h2><p>除了定位以外的其他功能我都用的是JavaScript API</p>
<p>那么第一步是去<a href="http://lbsyun.baidu.com/apiconsole/key">百度</a>创建一个浏览器端类型的应用</p>
<p>然后你会得到一个key，然后在index引用百度地图API文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;http://api.map.baidu.com/api?v=2.0&amp;ak=您的密钥&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="最后上代码"><a href="#最后上代码" class="headerlink" title="最后上代码"></a>最后上代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">that.bmap = <span class="keyword">new</span> BMap.Map(<span class="string">&quot;allmap&quot;</span>) <span class="comment">// 新建地图实例</span></span><br><span class="line"><span class="keyword">let</span> location = <span class="keyword">new</span> BMap.Point(enterprise1, enterprise2) <span class="comment">// 新建坐标，参数为企业坐标</span></span><br><span class="line">that.bmap.centerAndZoom(location, <span class="number">16</span>) <span class="comment">//设置企业坐标为中心点坐标</span></span><br><span class="line"><span class="keyword">let</span> circle = <span class="keyword">new</span> BMap.Circle(location, <span class="number">500</span>, &#123;<span class="attr">strokeColor</span>:<span class="string">&quot;blue&quot;</span>, <span class="attr">strokeWeight</span>:<span class="number">2</span>, <span class="attr">strokeOpacity</span>:<span class="number">0.5</span>&#125;) <span class="comment">// 创建地图圆形覆盖效果</span></span><br><span class="line">that.bmap.addOverlay(circle)  <span class="comment">// 增加效果 </span></span><br><span class="line"><span class="keyword">let</span> pointB = <span class="keyword">new</span> BMap.Point(result.longitude, result.latitude) <span class="comment">// 新建点坐标，参数为定位获取到的坐标</span></span><br><span class="line"><span class="built_in">console</span>.log((that.bmap.getDistance(location, pointB)).toFixed(<span class="number">2</span>)) <span class="comment">// 计算距离，小于500可以打卡，反之则是超出范围</span></span><br></pre></td></tr></table></figure>
<h2 id="关于报错"><a href="#关于报错" class="headerlink" title="关于报错"></a>关于报错</h2><p>如果Android版获取到的信息是：<br>{<br>    “locType”: 505,<br>    “locTypeDescription”: “NetWork location failed because baidu location service check the key is unlegal, please check the key in AndroidManifest.xml !”,<br>    “latitude”: 5e-324,<br>    “longitude”: 5e-324,<br>    “radius”: 0,<br>    “userIndoorState”: -1,<br>    “direction”: -1<br>}<br>这个坑我是踩了，不管你信息是否获取成功过，只要出现了上面的信息就说明Key有问题</p>
<ul>
<li>检查第一步创建的百度Android应用</li>
<li>检查下生成的AndroidManifest.xml文件里面是否有如下信息<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;service android:enabled=<span class="string">&quot;true&quot;</span> android:name=<span class="string">&quot;com.baidu.location.f&quot;</span> android:process=<span class="string">&quot;:remote&quot;</span>&gt;</span><br><span class="line">&lt;/service&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta-data</span> <span class="attr">android:name</span>=<span class="string">&quot;com.baidu.lbsapi.API_KEY&quot;</span> <span class="attr">android:value</span>=<span class="string">&quot;abcdefghijklmn&quot;</span> /&gt;</span></span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>然后重新安装</p>
<p>欢迎留言交流  (´▽`ʃ♡ƪ)</p>
]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
      <tags>
        <tag>cordova</tag>
      </tags>
  </entry>
  <entry>
    <title>cordova之HybirdApp热更新</title>
    <url>/2018/08/30/cordova_%E7%83%AD%E6%9B%B4%E6%96%B0/</url>
    <content><![CDATA[<h1 id="关于热更新"><a href="#关于热更新" class="headerlink" title="关于热更新"></a>关于热更新</h1><p>热更新App常用的更新方式。简单来说，就是在用户通过App Store下载App之后，打开App时遇到的即时更新</p>
<p>热更新就是动态下发代码，它可以使开发者在不发布新版本的情况下，修复 BUG 和发布功能，也可以绕开App Store和各种商店的审核机制，避免长时间的审核等待以及多次被拒造成的成本，也能针对顽固用户进行强制更新</p>
<h1 id="关于插件"><a href="#关于插件" class="headerlink" title="关于插件"></a>关于插件</h1><p>cordova插件</p>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">cordova plugin add cordova-hot-<span class="built_in">code</span>-<span class="keyword">push</span>-plugin --<span class="keyword">save</span></span><br></pre></td></tr></table></figure>
<p>添加Cordova Hot Code Push Plugin CLI客户端<a href="https://github.com/nordnet/cordova-hot-code-push-cli">github文档链接</a><br>用处：自动生成Hot Code Push插件（chcp.json和chcp.manifest）所需的配置文件<br>&emsp;运行本地服务器检测内容变更部署到服务器（关于自动部署看到有大佬说因为国内网络问题。。。但是我没试过因为没有aws服务器）</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line">npm install -g cordova-hot-code-<span class="keyword">push</span>-<span class="keyword">cli</span></span><br></pre></td></tr></table></figure>

<h1 id="更新流程"><a href="#更新流程" class="headerlink" title="更新流程"></a>更新流程</h1><p>1、根据Update method的设置（后面会提到改配置，假设是resume）恢复应用程序（从后台移动到前台状态）或启动时</p>
<p>2、插件初始化，在后台加载更新模块（Update loader）</p>
<p>3、Update loader 从cordova项目配置文件config.xml中获取config-file也就是插件配置文件chcp.json 的加载路径，然后加载chcp.json获取到release 版本号，对比当前的版本号，若二者不同，说明有新版本</p>
<p>4、有新版本时Update loader会从chcp.json中获取rcontent_url并从中下载web静态文件</p>
<h1 id="自动化更新"><a href="#自动化更新" class="headerlink" title="自动化更新"></a>自动化更新</h1><h2 id="1、初始化"><a href="#1、初始化" class="headerlink" title="1、初始化"></a>1、初始化</h2><p>插件添加成功后在项目根目录执行init命令进行初始化生成配置文件</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">cordova-hcp <span class="keyword">init</span></span><br></pre></td></tr></table></figure>
<p>执行时会需要填写一些首选项除了第一个project name项目名称和最后一个为必填以外其他都可以回车<br>** 最后一个参数 ** “Enter full URL to directory where cordova-hcp build result will be uploaded:”这个是服务器的url，也就是更新时app从服务器下载资源的路径</p>
<p>** 关于倒数第二个参数 ** ：Update method - 何时执行更新，默认为resume</p>
<ul>
<li>start - 启动应用程序时安装更新</li>
<li>resume - 恢复应用程序（从后台移动到前台状态）或启动时安装更新</li>
<li>now - 从服务器加载后立即安装更新</li>
</ul>
<p>执行成功后可以看到项目根目录多出一个cordova-hcp.json文件</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;dzbp&quot;</span>,   <span class="comment">// 项目名称</span></span><br><span class="line">  <span class="attr">&quot;ios_identifier&quot;</span>: <span class="string">&quot;&quot;</span>,   <span class="comment">// android</span></span><br><span class="line">  <span class="attr">&quot;android_identifier&quot;</span>: <span class="string">&quot;&quot;</span>,   <span class="comment">//  App Store上的应用程序ID。用于将用户重定向到商店的应用程序页面。</span></span><br><span class="line">  <span class="attr">&quot;update&quot;</span>: <span class="string">&quot;resume&quot;</span>, <span class="comment">// 在Google Play上引用应用的应用包名称</span></span><br><span class="line">  <span class="attr">&quot;content_url&quot;</span>: <span class="string">&quot;https：//www&quot;</span>  <span class="comment">// web静态资源在服务器的地址</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2、构建命令"><a href="#2、构建命令" class="headerlink" title="2、构建命令"></a>2、构建命令</h2><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">cordova</span>-hcp build<span class="meta"> [Web项目路径不指定默认为www目录]</span></span><br></pre></td></tr></table></figure>
<p>执行完成后会在你的web目录下会生成两个配置文件</p>
<ul>
<li>chcp.json : 持有发布相关信息</li>
<li>chcp.manifest : 保存有关Web项目文件的信息：它们的名称（相对路径）和哈希值, 根据它插件查知道文件的增删改</li>
</ul>
<h2 id="3、修改配置"><a href="#3、修改配置" class="headerlink" title="3、修改配置"></a>3、修改配置</h2><p>在config配置中加入chcp.json文件在服务器的地址</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">chcp</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">config-file</span> <span class="attr">url</span>=<span class="string">&quot;http://www/chcp.json&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">chcp</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>最后使用<code>cordova build</code>打包</p>
<p>app的配置就完成了，每次代码修改后只需要把代码放到服务器上，app会自动检测</p>
<h1 id="用户选择性进行更新？"><a href="#用户选择性进行更新？" class="headerlink" title="用户选择性进行更新？"></a>用户选择性进行更新？</h1><p>在项目配置文件config.xml中添加</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">chcp</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">auto-download</span> <span class="attr">enabled</span>=<span class="string">&quot;false&quot;</span> /&gt;</span> // 取消自动下载</span><br><span class="line">    <span class="tag">&lt;<span class="name">auto-install</span> <span class="attr">enabled</span>=<span class="string">&quot;false&quot;</span> /&gt;</span>  // 取消自动安装</span><br><span class="line">    <span class="tag">&lt;<span class="name">config-file</span> <span class="attr">url</span>=<span class="string">&quot;http://120.24.77.175:8080/ehospital/views/MSUI/chcp.json&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">chcp</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="下面是一个完整的代码示例，用到了3个api"><a href="#下面是一个完整的代码示例，用到了3个api" class="headerlink" title="下面是一个完整的代码示例，用到了3个api"></a>下面是一个完整的代码示例，用到了3个api</h2><p>** chcp.fetchUpdate(Callback，options)  检查更新 **</p>
<ul>
<li>Callback接收两个参数：<br>&emsp;error：若存在不为null表示没有更新版本，或者在更新检查期间发生错误<br>&emsp;data：从本机端发送的其他数据</li>
<li>options：请求的其他选项。如果未设置 - 使用首选项config.xml</li>
</ul>
<p>** chcp.isUpdateAvailableForInstallation(Callback) 检查是否已加载更新并可以安装 **</p>
<ul>
<li>Callback接收两个参数：<br>&emsp;&emsp;error：若存在不为null表示没有加载更新或者无需安装<br>&emsp;&emsp;data：{<br>&emsp;&emsp;&emsp;&emsp;CURRENTVERSION：当前版本<br>&emsp;&emsp;&emsp;&emsp;readyToInstallVersion：准备安装版本<br>&emsp;&emsp;}</li>
</ul>
<p>** chcp.installUpdate(Callback) 检查是否已加载更新并可以安装 **</p>
<ul>
<li>Callback只有一个参数那就是error，若不为null表示安装失败包含失败信息否则便是成功</li>
</ul>
<p><a href="https://github.com/nordnet/cordova-hot-code-push/wiki/Error-codes">错误代码详情</a>&emsp;&emsp;<a href="https://github.com/nordnet/cordova-hot-code-push/wiki/JavaScript-module">jsAPI</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&quot;deviceready&quot;</span>, onDeviceReady, <span class="literal">false</span>)</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">onDeviceReady</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> chcp = <span class="built_in">window</span>.chcp</span><br><span class="line">    chcp.fetchUpdate(<span class="function">(<span class="params">error, data</span>) =&gt;</span> &#123; <span class="comment">// 检查更新</span></span><br><span class="line">    alert(data)</span><br><span class="line">    <span class="keyword">if</span> (error) &#123; </span><br><span class="line">      alert(<span class="string">&#x27;error&#x27;</span>, error.code, error.description) <span class="comment">// 表示没有更新版本，或者其他错误</span></span><br><span class="line">    &#125; <span class="keyword">else</span> chcp.isUpdateAvailableForInstallation(<span class="function">(<span class="params">error, data</span>) =&gt;</span> &#123; <span class="comment">// 检查是否已加载更新并准备安装</span></span><br><span class="line">        <span class="keyword">if</span> (error) &#123;</span><br><span class="line">          alert(<span class="string">&#x27;No update was loaded =&gt; nothing to install&#x27;</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> ( <span class="built_in">window</span>.confirm(<span class="string">&#x27;检测到新版本，是否更新&#x27;</span>) ) &#123;</span><br><span class="line">            chcp.installUpdate(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;  <span class="comment">// 安装更新</span></span><br><span class="line">              <span class="keyword">if</span> (error) &#123;</span><br><span class="line">                alert(<span class="string">&#x27;Failed to install the update with error code: &#x27;</span> + error.code)</span><br><span class="line">                alert(error.description)</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                alert(<span class="string">&#x27;Update installed!&#x27;</span>)</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">window</span>.alert(<span class="string">&#x27;您已拒绝更新&#x27;</span>)</span><br><span class="line">          &#125;</span><br><span class="line">          alert(<span class="string">&#x27;Current content version: &#x27;</span> + data.currentVersion)</span><br><span class="line">          alert(<span class="string">&#x27;Ready to be installed:&#x27;</span> + data.readyToInstallVersion)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p>Cordova Hot Code Push Plugin CLI client <a href="https://github.com/nordnet/cordova-hot-code-push-cli">https://github.com/nordnet/cordova-hot-code-push-cli</a></p>
<p>cordova-hot-code-push wiki <a href="https://github.com/nordnet/cordova-hot-code-push/wiki/Update-workflow">https://github.com/nordnet/cordova-hot-code-push/wiki/Update-workflow</a></p>
<p>Cordova 代码热更新 <a href="https://www.jianshu.com/p/55fd5e9f96ea">https://www.jianshu.com/p/55fd5e9f96ea</a></p>
]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
      <tags>
        <tag>cordova</tag>
      </tags>
  </entry>
  <entry>
    <title>cordova获取设备信息以及sim卡MSISDN等信息</title>
    <url>/2018/08/24/cordova_%E8%AE%BE%E5%A4%87%E4%BF%A1%E6%81%AF%E8%8E%B7%E5%8F%96/</url>
    <content><![CDATA[<p><img src="http://cordova.axuer.com/static/img/cordova_bot.png" alt="示例图片"></p>
<h1 id="设备信息获取"><a href="#设备信息获取" class="headerlink" title="设备信息获取"></a>设备信息获取</h1><p>支持平台：Android、Browser、iOS、Windows、OSX<br>这是cordova官方插件，附上<a href="https://www.npmjs.com/package/cordova-plugin-sim">官方文档</a></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">插件安装</span><br><span class="line">cordova plugin <span class="builtin-name">add</span> cordova-plugin-device</span><br></pre></td></tr></table></figure>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&quot;deviceready&quot;</span>, onDeviceReady, <span class="literal">false</span>)</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">onDeviceReady</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(device.cordova) <span class="comment">// 当前cordova的版本</span></span><br><span class="line">        alert(device.model) <span class="comment">// 设备的模型或产品名称</span></span><br><span class="line">        alert(device.platform)  <span class="comment">// 获取操作系统</span></span><br><span class="line">        alert(device.uuid) <span class="comment">// 设备通用唯一标识uuid</span></span><br><span class="line">        alert(device.version) <span class="comment">// 操作系统版本</span></span><br><span class="line">        alert(device.isVirtual) <span class="comment">// 判断设备是否在虚拟机上运行,返回Boolean</span></span><br><span class="line">        alert(device.serial)  <span class="comment">// 设备序列号</span></span><br><span class="line">        alert(device.serial)  <span class="comment">// 设备制造商</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="sim卡信息获取"><a href="#sim卡信息获取" class="headerlink" title="sim卡信息获取"></a>sim卡信息获取</h1><p>支持平台：Android、iOS、Windows Phone 7 and 8<br>附上<a href="https://www.npmjs.com/package/cordova-plugin-sim">npm文档</a></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">插件安装</span><br><span class="line">cordova plugin <span class="builtin-name">add</span> cordova-plugin-sim</span><br></pre></td></tr></table></figure>
<h2 id="使用方法，更多参数查看文档"><a href="#使用方法，更多参数查看文档" class="headerlink" title="使用方法，更多参数查看文档"></a>使用方法，更多参数查看文档</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&quot;deviceready&quot;</span>, onDeviceReady, <span class="literal">false</span>)</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">onDeviceReady</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">window</span>.plugins.sim.getSimInfo(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">        alert(res.carrierName) <span class="comment">// 供应商 (SPN)</span></span><br><span class="line">        alert(res.countryCode) <span class="comment">// ISO 国家代码[中国是CN]</span></span><br><span class="line">        alert(res.mcc) <span class="comment">// 移动信号国家码</span></span><br><span class="line">        alert(res.mnc) <span class="comment">// 移动网络号码</span></span><br><span class="line">      &#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h2 id="关于MSISDN获取"><a href="#关于MSISDN获取" class="headerlink" title="关于MSISDN获取"></a>关于MSISDN获取</h2><p>sim插件的phoneNumber这个获取MSISDN（手机号码）的参数还有deviceId、simSerialNumber、subscriptionId等等，官方文档表示了有时只能拿到一个空字符串</p>
<h3 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h3><p>MSISDN可以存储在SIM卡上，但大部分电话运营商都不会将MSISDN存储在SIM卡上，有以下一些原因：<br>  动态MSISDN分配：首次使用预付费SIM时，有时会为其分配MSISDN。这意味着网络具有可用的MSISDN池，并在新的预付费SIM上线时分配它们。这意味着当SIM卡出厂时，它们还没有MSISDN，这意味着在发送SIM卡之前无法存储MSISDN。有些网络在一段时间不活动后会过期’MSISDN分配，特别是当它们的可用数量不足时，并将这些数字返回到可用池。<br>  移动号码可携带性：一些国家/地区允许移动用户保留其MSISDN但更改网络。这意味着MSISDN将从用于1个网络的SIM移动到用于另一个网络的SIM。</p>
<p>因此SIM上的MSISDN条目通常为空，用户可以在SIM卡上存储MSISDN或者任意数字<br>所以MSISDN通常为空，但如果你获取到了也是因为用户在设备中设置“我的电话号码”什么的所以也并不保证一定正确</p>
<p>可能的方法：通过WAP / WEB，当移动运营商在标题中包含MSISDN时（你可以做一些webview技巧来查看标题是通过的 - 但是你只看到这些如果是网络支持它，如果用户在移动数据上 - 即如果用户在WiFi上，它将无法工作</p>
<p>来源:<a href="https://stackoverflow.com/questions/10695601/msisdn-is-it-a-sim-card-data-why-all-the-provided-function-from-blackberry-a">https://stackoverflow.com/questions/10695601/msisdn-is-it-a-sim-card-data-why-all-the-provided-function-from-blackberry-a</a></p>
<p>欢迎留言交流  (´▽`ʃ♡ƪ)</p>
]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
      <tags>
        <tag>cordova</tag>
      </tags>
  </entry>
  <entry>
    <title>域名解析</title>
    <url>/2019/08/05/domain/</url>
    <content><![CDATA[<h2 id="二级域名设置"><a href="#二级域名设置" class="headerlink" title="二级域名设置"></a>二级域名设置</h2><p>阿里云的域名解析设置页面 —&gt; 点击添加记录 —&gt; 出现弹框<br>    *@：直接解析主域名 aliyun.com<br>    **：泛解析，匹配其他所有域名 *.aliyun.com<br>    *mail：将域名解析为mail.aliyun.com，通常用于解析邮箱服务器<br>    *二级域名：如：abc.aliyun.com，填写abc<br>    *手机网站：如：m.aliyun.com，填写m<br>    *显性URL/隐形URL：转发的地址必须完成备案且备案接入商为阿里云</p>
<p>TTL：为缓存时间，数值越小，修改记录各地生效时间越快，默认为10分钟</p>
]]></content>
      <categories>
        <category>Others</category>
      </categories>
      <tags>
        <tag>domain</tag>
      </tags>
  </entry>
  <entry>
    <title>Electron踩坑指南不完全篇</title>
    <url>/2018/12/13/electron/</url>
    <content><![CDATA[<p>前段时间做了个客户端的项目，主要适用于老师教案管理、远程上课录屏、和学生互动答疑等场景，原生开发对公司来说成本有点大，基于guthub上有各种桌面打包框架so只能前端上了</p>
<p>Electron + vue = product</p>
<p>这是一篇踩坑的记录，没有太深入的原理什么的讲解，主要是码代码过程中碰到的一些暗坑你如果正在写Electron的项目那么你也可能会遇到，这篇文章会给你一些参考</p>
<h1 id="为什么用Electron"><a href="#为什么用Electron" class="headerlink" title="为什么用Electron"></a>为什么用Electron</h1><p>这是目前大家知道比较多的三种跨平台的桌面框架<br>NWJS      <a href="https://nwjs.io/">https://nwjs.io/</a><br>HEX       <a href="http://hex.youdao.com/zh-cn/tutorial/index.html">http://hex.youdao.com/zh-cn/tutorial/index.html</a><br>Electron  <a href="https://electronjs.org/docs">https://Electronjs.org/docs</a></p>
<p> | ** Electron ** | ** nw.js ** | ** hex **<br>:—-: | :—-: |:—:| :—:<br> ** 发布时间 ** | 2013年 | 2011年 | 2012年<br> ** 开发公司 ** | github | intel | 有道翻译<br> ** 代表作 ** | Atom、Visual Studio Code 、WordPress | 微信web开发工具、钉钉 | 有道云笔记，有道词典<br> ** github start ** | 66608 | 34555 | 1429 </p>
<p>三个框架都是 chromium + nodejs + native api ， 不用考虑浏览器兼容性还能用nodejs，简直不要太爽</p>
<ul>
<li>Chromium 是 Google 为发展 Chrome 浏览器而启动的开源项目，它对HTML5的支持非常优秀，其内嵌的V8引擎是业内效率最好的JavaScript脚本引擎之一，且其项目开源，又有专门的社区和团队维护，作为UI渲染引擎，它是不二之选，体验上，你可以试用下google chrome浏览器，基本一致</li>
<li>Node.js （或者简称 Node） 一个工具，选择Node.JS，是因为开发桌面应用，本地资源操作是必备的能力，这方面JavaScript无能为力，而Node.JS则很好的解决了这个问题，它使得JavaScript操作本地资源变的毫无障碍。另一方面，Node.JS核心也是采用V8引擎，使得其与Chromium的整合变得更顺理成章</li>
<li>API 应用程序接口描述了一系列可供你使用的函数库中的函数</li>
</ul>
<p>我绝对是有道词典的忠实用户但是hex用的人较少怕遇坑爬不出来，nwjs主要优点是能兼容winXP，但是我不需要。。。而且nw和Electron是同一个大佬一前一后开发，Electron相当于是nwjs的重构升级版，官网又这么好看又那么火，还犹豫？</p>
<h1 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h1><p>官网传送门</p>
<ul>
<li>官方api <a href="https://electronjs.org/docs">https://Electronjs.org/docs</a></li>
<li>Electron-vue文档 <a href="https://simulatedgreg.gitbooks.io/Electron-vue/content/cn/getting_started.html">https://simulatedgreg.gitbooks.io/Electron-vue/content/cn/getting_started.html</a></li>
<li>中文社区文档<a href="https://electron.org.cn/doc/index.html">https://Electron.org.cn/doc/index.html</a></li>
</ul>
<p>常用的一些模块：</p>
<ul>
<li>文件打开删除等操作 shell模块  <a href="https://electronjs.org/docs/api/shell">https://Electronjs.org/docs/api/shell</a></li>
<li>窗口管理修改新建参数等 BrowserWindow模块  <a href="https://electronjs.org/docs/api/browser-window">https://Electronjs.org/docs/api/browser-window</a></li>
<li>主进程和渲染进程通信 ipcRenderer 模块   <a href="https://electronjs.org/docs/api/ipc-renderer">https://Electronjs.org/docs/api/ipc-renderer</a></li>
<li>获取屏幕大小、鼠标位置等信息 screen 模块  <a href="https://electronjs.org/docs/api/screen">https://Electronjs.org/docs/api/screen</a></li>
<li>渲染进程使用BrowserWindow 实例  remote模块  <a href="https://electronjs.org/docs/api/remote">https://Electronjs.org/docs/api/remote</a></li>
</ul>
<h1 id="暗-坑"><a href="#暗-坑" class="headerlink" title="暗 坑"></a>暗 坑</h1><p>Electron是个很成熟很完善的框架，所以这些也不叫暗坑，只是小白如果没有很仔细的阅读api就可能容易掉坑里，不要问我为什么知道，我是有故事的人</p>
<h2 id="Q、已经引了BrowserWindow-为什么使用函数会是undefined？"><a href="#Q、已经引了BrowserWindow-为什么使用函数会是undefined？" class="headerlink" title="Q、已经引了BrowserWindow 为什么使用函数会是undefined？"></a>Q、已经引了BrowserWindow 为什么使用函数会是undefined？</h2><p>A、Electron分为主进程和渲染进程，Electron 运行 package.json 的 main 脚本的进程被称为主进程只有一个，而渲染进程就是你的页面一个BrowserWindow 实例，所以api也分为主进程和渲染进程以及两者通用的api，所以用api的时候得注意，在渲染进程中使用 BrowserWindow 实例需要引入 remote 模块</p>
<p>主进程可用的模块:app、autoUpdate、BrowserView、BrowserWindow、contentTracing、dialog、globalShortcut、inAppPurchase、ipcMain、Menu、MenuItem、net、netLog、powerMonitor、powerSaveBlocker、protocol、session、systemPreferences、Tray、webContents<br>渲染进程（网页）可用的模块:、desktopCapturer、ipcRenderer、remote、webFrame<br>两种进程都可用的模块:、clipboard、crashReporter、nativeImage、screen、shell</p>
<h2 id="Q、想在渲染进程使用主进程的api？"><a href="#Q、想在渲染进程使用主进程的api？" class="headerlink" title="Q、想在渲染进程使用主进程的api？"></a>Q、想在渲染进程使用主进程的api？</h2><p>A、有某些功能必须得在主进程才能实现，比如保存文件、选择文件路径什么的，这些操作可以使用 ipcRenderer 模块用于两个进程之间的通信，由渲染进程发出指令后在主进程进行功能操作</p>
<h2 id="Q、单击PDF文件的链接时，Electron会提示下载而非直接预览？"><a href="#Q、单击PDF文件的链接时，Electron会提示下载而非直接预览？" class="headerlink" title="Q、单击PDF文件的链接时，Electron会提示下载而非直接预览？"></a>Q、单击PDF文件的链接时，Electron会提示下载而非直接预览？</h2><p>A、单击PDF文件的链接时，在普通浏览器中它会预览该文件。但在Electron中你需要尝试使用 iframe 加载，如果无效可以再试下 webview </p>
<h2 id="Q、动态的修改静态文件的路径会报链接404？"><a href="#Q、动态的修改静态文件的路径会报链接404？" class="headerlink" title="Q、动态的修改静态文件的路径会报链接404？"></a>Q、动态的修改静态文件的路径会报链接404？</h2><p>A、使用Electron-vue框架，动态的修改静态文件的路径会报链接404但是一开始写死就没问题，所有静态文件都建议放在根目录下 static 文件夹下，然后任何页面访问 static/… 即可</p>
<h2 id="Q、透明窗口无效？"><a href="#Q、透明窗口无效？" class="headerlink" title="Q、透明窗口无效？"></a>Q、透明窗口无效？</h2><p>A、新建窗口时已经设置了frame: false,transparent: true, 为什么页面还是白色，开发模式下看透明窗口需要关掉开发者模式后刷新</p>
<h2 id="Q、新建一个窗口，然后拖动该窗口，宽度和高度会小于指定值？"><a href="#Q、新建一个窗口，然后拖动该窗口，宽度和高度会小于指定值？" class="headerlink" title="Q、新建一个窗口，然后拖动该窗口，宽度和高度会小于指定值？"></a>Q、新建一个窗口，然后拖动该窗口，宽度和高度会小于指定值？</h2><p>A、 guthub上有大佬说setResizable: false下最小化且连续恢复，则窗口的高度每次都会减少一个看起来等于菜单栏的量，取消菜单后正常，设置window.setMenu(null)，但是这个方法对我不适用<br>在 issues上翻了一圈，最后 useContentSize: true设置为true + 更改width和height属性以适应测量大小 = 解决</p>
<h2 id="Q、navigator-mediaDevices-getUserMedia-使用该属性报错？"><a href="#Q、navigator-mediaDevices-getUserMedia-使用该属性报错？" class="headerlink" title="Q、navigator.mediaDevices.getUserMedia 使用该属性报错？"></a>Q、navigator.mediaDevices.getUserMedia 使用该属性报错？</h2><p>A、之前使用这个属性报错还以为Electron不支持，感觉很奇怪他继承的是最新的 chromium 为什么会不支持这个属性，然后某天翻api发现 desktopCapturer 模块，这个属性被Electron封装了，需要引入 desktopCapturer 模块，所以敲黑板一定要认真看api</p>
<h2 id="Q、打包问题？"><a href="#Q、打包问题？" class="headerlink" title="Q、打包问题？"></a>Q、打包问题？</h2><p>A、前端大部分框架都封装了webpack，glup什么的都有打包功能，然后一搜 “ 某某框架 打包 ” ，出来的都是什么打包报错？ 空白？一大堆问题，感觉这个问题好像无解<br>之前我写demo的时候打包各种报错，可能是因为写demo的时候各种实验各种乱搞把框架玩坏了，反正正式写项目的时候一个打包问题都没有碰到过<br>只是一点第一次打包的时候很慢，因为Electron需要翻墙下载文件，这时候如果打包失败，多半就是被墙了</p>
<h2 id="Q、’-39-和’-‘符号路径问题"><a href="#Q、’-39-和’-‘符号路径问题" class="headerlink" title="Q、’&#39;和’/‘符号路径问题"></a>Q、’&#39;和’/‘符号路径问题</h2><p>A、通过Electron获取的路径这样的’d:\project...’，本来挺好的文件保存读取什么的用这个路径都挺正常的，但是使用nodejs的exec库调取cmd执行ffmpeg的命令会报错，需要把路径分隔符’&#39;换成’/‘ </p>
<h2 id="Q、关于新建窗口时的白屏"><a href="#Q、关于新建窗口时的白屏" class="headerlink" title="Q、关于新建窗口时的白屏"></a>Q、关于新建窗口时的白屏</h2><p>A、新建窗口由于加载页面和初始化窗口会有一段时间的白屏，有个方法就是初始化程序的时候就加载的所有窗口，但是只显示主窗口,其余的窗口隐藏,这样就能有效创建窗口时的白屏</p>
]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
      <tags>
        <tag>Electron</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo 接入 github issue 评论</title>
    <url>/2019/08/06/git_comment/</url>
    <content><![CDATA[<h2 id="更新，评论系统切换为-gitalk"><a href="#更新，评论系统切换为-gitalk" class="headerlink" title="更新，评论系统切换为 gitalk"></a>更新，评论系统切换为 <a href="https://github.com/gitalk/gitalk">gitalk</a></h2><p>gitment 登录 alert 报错 [object ProgressEvent]，打开 network 这个 gh-oauth.imsun.net 请求失败，<a href="https://imsun.github.io/gitment/dist/gitment.browser.js">https://imsun.github.io/gitment/dist/gitment.browser.js</a> 内向网址 <a href="https://gh-oauth.imsun.net/">https://gh-oauth.imsun.net</a> 发送了验证请求，这个gh-oauth.imsun.net是作者自行搭建的，现在不在维护了，所以出现了问题</p>
<p>看了 gitment 的 issue 很多人都反应有问题，官方的 demo 也不能用</p>
<p>所以现在切换为 gitalk，方法差不多，只需要改下类名就好</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">#comment</span><br><span class="line">    #gitalk-container(data-gitalk=<span class="built_in">JSON</span>.stringify(theme.Gitalk) data-date=page.date)</span><br><span class="line">    link(rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.css&quot;</span>)</span><br><span class="line">    script(src=<span class="string">&quot;https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.min.js&quot;</span>)</span><br><span class="line">    script.</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">commentinit</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.Gitalk) &#123;</span><br><span class="line">                    <span class="keyword">let</span> string = <span class="built_in">JSON</span>.parse(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;gitalk-container&#x27;</span>).dataset.gitalk)</span><br><span class="line">                    <span class="keyword">var</span> gitalk = <span class="keyword">new</span> Gitalk(&#123;</span><br><span class="line">                        <span class="attr">clientID</span>: string.client_id,</span><br><span class="line">                        <span class="attr">clientSecret</span>: string.client_secret,</span><br><span class="line">                        <span class="attr">repo</span>: string.repo,</span><br><span class="line">                        <span class="attr">owner</span>: string.owner,</span><br><span class="line">                        <span class="attr">admin</span>: string.admin,</span><br><span class="line">                        <span class="attr">id</span>: <span class="built_in">document</span>.getElementById(<span class="string">&#x27;gitalk-container&#x27;</span>).dataset.date,</span><br><span class="line">                        <span class="attr">distractionFreeMode</span>: string.distractionFreeMode</span><br><span class="line">                    &#125;)</span><br><span class="line">                    gitalk.render(<span class="string">&#x27;gitalk-container&#x27;</span>)</span><br><span class="line">                &#125; <span class="keyword">else</span> commentinit()</span><br><span class="line">            &#125;,<span class="number">200</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        commentinit()</span><br></pre></td></tr></table></figure>

<h2 id="配-置"><a href="#配-置" class="headerlink" title="配 置"></a>配 置</h2><p>1.去<a href="https://github.com/settings/developers">新建 OAuth App</a> 完成注册<br>2.在主题配置文件 _config.yaml 中添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gitment:</span><br><span class="line">  enable: true</span><br><span class="line">  id: &#x27;&#x27;</span><br><span class="line">  owner: Tong-H # 你的 github 用户名，可以不用太在意大小写</span><br><span class="line">  repo: Tong-H.github.io #存储评论的 repo</span><br><span class="line">  client_id: 5658f62c9837c979f96f #新建 OAuth App 时的 Client ID</span><br><span class="line">  client_secret: 36813d127f4f0918cd30231a403e09d81015e014 #新建 OAuth App 时的 Client secret</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>3.新建一个 comment 组件，看了一些博客，大部分都是用的 ejs，我用的是 Pug，这个区别不大<br>*注意，网上有很多文章这段代码都是不可用的，会出现初始化不了的情况，这里贴出的是可用的<br>*引入两个文件，一个 css 和 一个 js<br>*使用 dataset 将 hexo 的变量传递给页面<br>*新建 gitment 对象的时候要注意使用 setTimeout 轮询查看 gitment 是否存在文件加载是否完成</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">block prepend cssFile</span><br><span class="line">    link(rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;https://imsun.github.io/gitment/style/default.css&quot;</span>)</span><br><span class="line"></span><br><span class="line">#comment</span><br><span class="line">    <span class="comment">// 使用 data</span></span><br><span class="line">    #gitment_container(data-gitment=<span class="built_in">JSON</span>.stringify(theme.gitment) data-title=page.title)</span><br><span class="line">    script(src=<span class="string">&quot;https://imsun.github.io/gitment/dist/gitment.browser.js&quot;</span>)</span><br><span class="line">    script.</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">commentinit</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.Gitment) &#123;</span><br><span class="line">                    <span class="keyword">let</span> string = <span class="built_in">JSON</span>.parse(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;gitment_container&#x27;</span>).dataset.gitment)</span><br><span class="line">                    <span class="keyword">var</span> gitment = <span class="keyword">new</span> Gitment(&#123;</span><br><span class="line">                        <span class="attr">id</span>: <span class="built_in">document</span>.getElementById(<span class="string">&#x27;gitment_container&#x27;</span>).dataset.title,</span><br><span class="line">                        <span class="attr">owner</span>: string.owner,</span><br><span class="line">                        <span class="attr">repo</span>: string.repo,</span><br><span class="line">                        <span class="attr">oauth</span>: &#123;</span><br><span class="line">                            <span class="attr">client_id</span>: string.client_id,</span><br><span class="line">                            <span class="attr">client_secret</span>: string.client_secret,</span><br><span class="line">                        &#125;,</span><br><span class="line">                    &#125;)</span><br><span class="line">                    gitment.render(<span class="string">&#x27;gitment_container&#x27;</span>)</span><br><span class="line">                &#125; <span class="keyword">else</span> commentinit()</span><br><span class="line">            &#125;,<span class="number">200</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        commentinit()</span><br></pre></td></tr></table></figure>

<h2 id="Comments-Not-Initialized"><a href="#Comments-Not-Initialized" class="headerlink" title="Comments Not Initialized"></a>Comments Not Initialized</h2><p>需要你先登录下初始化，不要在本地 localhost 登录，因为localhost：4000 和你注册时填写的 Authorization Callback URL 的域名不同，点击登录会跳转到 你的 Authorization Callback URL 页面</p>
<p>当然你也可以再去新建一个 OAuth Application 填 <a href="http://localhost:4000/">http://localhost:4000/</a> 也可以</p>
<p>每新建一个文章都需要去初始化，相当于重新开一个 issue</p>
<h2 id="初始化时在评论框点击登录，但是没有跳到授权页面"><a href="#初始化时在评论框点击登录，但是没有跳到授权页面" class="headerlink" title="初始化时在评论框点击登录，但是没有跳到授权页面"></a>初始化时在评论框点击登录，但是没有跳到授权页面</h2><p>查看页面 login 按钮的 a 标签的 href 是这样的</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;gitment-editor-login-link&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://github.com/login/oauth/authorize?scope=public_repo<span class="symbol">&amp;amp;</span>redirect_uri=https%3A%2F%2Ftong-h.github.io%2F2019%2F08%2F05%2Fhexo_theme%2F<span class="symbol">&amp;amp;</span>client_id=5658f62c9837c979f96f<span class="symbol">&amp;amp;</span>client_secret=36813d127f4f0918cd30231a403e09d81015e014&quot;</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>其中 redirect_uri 是当前页面的 url，url 的域名和你注册时填写的 Authorization Callback URL 的域名一定要一致，我检查才发现我填的时 <a href="http://tong-h.github.io/">http://tong-h.github.io</a>, 但实际请求的却是https</p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p>添加Gitment评论系统踩过的坑 <a href="http://xichen.pub/2018/01/31/2018-01-31-gitment/">http://xichen.pub/2018/01/31/2018-01-31-gitment/</a><br>Hexo博客框架下Gitment取代多说评论 <a href="https://zonghongyan.github.io/2017/06/29/201706292034/">https://zonghongyan.github.io/2017/06/29/201706292034/</a></p>
]]></content>
      <categories>
        <category>Others</category>
      </categories>
      <tags>
        <tag>gitment</tag>
      </tags>
  </entry>
  <entry>
    <title>关于hexo的常用命令(备忘)</title>
    <url>/2018/08/22/hexo/</url>
    <content><![CDATA[<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p><a href="https://hexo.io/zh-cn/api/">官方文档</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git clone &#x27;远程仓库&#x27; themes/ &#x27;本地文件名称&#x27;</span><br><span class="line">hexo s 启动服务</span><br><span class="line">hexo clean  清除缓存文件 (db.json) 和已生成的静态文件 (public)</span><br><span class="line">hexo g  部署之前预先生成静态文件</span><br><span class="line">hexo d  部署</span><br><span class="line"></span><br><span class="line">hexo new &lt;title&gt; 新建一篇文章</span><br><span class="line">hexo new draft &lt;title&gt;  新建一篇草稿</span><br><span class="line">hexo publish &lt;title&gt; 将草稿移入posts文件夹</span><br><span class="line"></span><br><span class="line">图片上传插件</span><br><span class="line">npm install hexo-asset-image --save</span><br><span class="line"></span><br><span class="line">代码上传到github所需要的依赖包</span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>hexo部署报错：The file will have its original line endings in your working directory.</p>
<ul>
<li>删除.deploy_git文件夹</li>
<li>运行 git config –global core.autocrlf false</li>
<li>正常流程 hexo clean / hexo g / hexo d</li>
</ul>
]]></content>
      <categories>
        <category>Others</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo 主题制作</title>
    <url>/2019/08/05/hexo_theme/</url>
    <content><![CDATA[<h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><p>hexo 是一个免费简单的博客框架，有很多好看开源主题，但是当你看到别人的博客和你自己的博客一模一样的时候，还是有点奇怪，熟悉又陌生的感觉</p>
<p>Hexo 内建 Swig 模板引擎，但是可以另外安装插件来获得 <a href="https://github.com/hexojs/hexo-renderer-ejs">EJS</a>、<a href="https://github.com/hexojs/hexo-renderer-haml">Haml</a> 或 <a href="https://github.com/hexojs/hexo-renderer-jade">Jade</a> 支持，Hexo 根据模板文件的扩展名来决定所使用的模板引擎，例如：layout.ejs，layout.swig</p>
<p>我有尝试过用 Swig，毕竟不需要安装插件，但是用过之后还是果断换回了 Pug(原 jade )，如果你两种模板引擎都没接触过那推荐你用 Swig，上手简单会快些，但如果你也是 Pug 的忠实粉丝，那么还是安装插件吧</p>
<p>你需要安装 2 个插件，渲染 jade 页面的插件和热更新的插件，并保存在 packagejson devDependencies 是开发时需要的插件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install hexo-server hexo-browsersync hexo-renderer-jade --save-dev</span><br></pre></td></tr></table></figure>

<h2 id="手动构建"><a href="#手动构建" class="headerlink" title="手动构建"></a>手动构建</h2><p>在…\blog\themes 新建一个文件夹，文件夹名称是你主题的名字，一个主题可能是这样的结构</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">├── languages       语言文件，用于国际化</span><br><span class="line">├── layout          页面模板文件</span><br><span class="line">├────── index       首页，url 根目录默认加载首页</span><br><span class="line">├────── Archive     归档页</span><br><span class="line">├────── Tag         标签页</span><br><span class="line">├────── Category    分类页</span><br><span class="line">├────── Post        文章页</span><br><span class="line">├────── Page        页面详情，像<span class="number">404</span>、友链这种自定义页面都是在 page 页面</span><br><span class="line">├── scripts    脚本文件夹，在启动时，Hexo 会载入此文件夹内的 JavaScript 文件</span><br><span class="line">├── source     主题资源文件，包括页面样式，脚本，字体等</span><br><span class="line">├────── css</span><br><span class="line">├────── js</span><br><span class="line">├────── img</span><br></pre></td></tr></table></figure>

<p>如果你的网站在二级目录可以在网站配置文件_config.yml 更改 url</p>
<p>每个主题都可以有一个 layout 的页面布局文件，因为像 footer、header 等都是可以做复用的，所以我们可以最大化的利用 pug 或者 swig 等模板引擎的局部模板功能<br>比如 pug，更多详细内容可以查看<a href="https://pug.bootcss.com/language/inheritance.html">官方文档</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">extends // 被继承的模板路径</span><br><span class="line">block   // 定义一个代码块，可以被子模块填充、修改、覆盖</span><br><span class="line">prepend // 向块的头部添加内容</span><br><span class="line">append  // 向块的尾部添加内容</span><br></pre></td></tr></table></figure>

<h2 id="Yeoman-生成基本框架"><a href="#Yeoman-生成基本框架" class="headerlink" title="Yeoman 生成基本框架"></a>Yeoman 生成基本框架</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install yo -g // 全局安装 Yeoman</span><br><span class="line">npm install generator-hexo-theme -g // 主题生成工具</span><br><span class="line">yo hexo-theme // 生成主题</span><br></pre></td></tr></table></figure>

<h2 id="数据填充"><a href="#数据填充" class="headerlink" title="数据填充"></a>数据填充</h2><p>hexo 提供了很多<a href="https://hexo.io/zh-cn/docs/helpers">辅助函数</a>和<a href="https://hexo.io/zh-cn/docs/variables">变量</a><br>在开发过程中 hexo 是服务端渲染，所以他的所有变量是 node 的全局变量，非页面的</p>
<h2 id="部署后点击分类-404"><a href="#部署后点击分类-404" class="headerlink" title="部署后点击分类 404"></a>部署后点击分类 404</h2><p>分类是使用辅助函数 list_categories() 生成, 本地一切正常部署后点击分类是 404,我原来的分类名称是小写字母，后来我自己改成全部大写，就出现了这个问题, 这是因为git 远程仓库文件名称没有改变，清空后重新上传就好</p>
<h2 id="一些插件"><a href="#一些插件" class="headerlink" title="一些插件"></a>一些插件</h2><p>WordCount 字数统计</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 安装</span></span><br><span class="line">yarn add hexo-wordcount</span><br><span class="line"># or</span><br><span class="line">npm i --save hexo-wordcount</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字数统计</span></span><br><span class="line">wordcount(post.content)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 阅读时长预计</span></span><br><span class="line">min2read(post.content)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置阅读速度</span></span><br><span class="line">min2read(post.content, &#123;<span class="attr">cn</span>: <span class="number">300</span>, <span class="attr">en</span>: <span class="number">160</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 总字数统计</span></span><br><span class="line">totalcount(site)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>卜蒜子 阅读量统计</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_container_site_pv&quot;</span>&gt;</span>本站总访问量<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_value_site_pv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>次<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><a href="/2019/08/06/git_comment">gitalk, gitment 评论模板</a></p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p>*hexo 主题制作官方文档： <a href="https://hexo.io/zh-cn/docs/permalinks">https://hexo.io/zh-cn/docs/permalinks</a></p>
]]></content>
      <categories>
        <category>Others</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Gitlab CI/CD 自动打包和部署微前端</title>
    <url>/2025/01/23/gitlab_cicd/</url>
    <content><![CDATA[<p>前段时间<a href="https://tong-h.github.io/2025/01/23/micro_frontend">微前端实践:single-spa+vite</a>的方式对项目进行了整合，也用 <a href="https://tong-h.github.io/2025/01/23/gitlab_cicd/">使用 Gitlab CI/CD 自动打包和部署微前端</a></p>
<h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><ul>
<li><a href="https://docs.gitlab.com/ee/ci/jobs/">jobs</a><ul>
<li>定义在 <code>pipeline</code> 中的单个任务</li>
</ul>
</li>
<li><code>stage</code><ul>
<li>用于组合 <code>job</code>, 官方提供了一些默认值<code>.pre</code> <code>build</code> <code>test</code> <code>deploy</code> <code>.post</code>, 除了这些默认值以外, 可以通过全局关键字 <code>stages</code> 自定义</li>
<li><code>stage</code> 是从上到下按序执行, <code>stage</code> 中的  <code>job</code> 是并行运行的, 可以通过 <code>needs</code> / <code>dependencies</code> 更改</li>
</ul>
</li>
<li><a href="https://docs.gitlab.com/ee/ci/pipelines/"><code>pipeline</code></a><ul>
<li>是一组 <code>job</code> 的集合, 也代表 CI/CD 处理流程, 这些 <code>job</code> 可以并行/按顺序运行</li>
<li>可以通过多种方式触发,  触发来源可通过 <code>CI_PIPELINE_SOURCE</code> 获取 <a href="https://docs.gitlab.com/ee/ci/jobs/job_rules.html#ci_pipeline_source-predefined-variable">(ci_pipeline_source)</a></li>
</ul>
</li>
<li><code>runner</code><ul>
<li>一个应用程序, 在服务器安装以及通过 <code>token</code> 注册之后, 可以监听以及运行分配给它的 <code>job</code></li>
<li>可以通过安装 gitlab 实例/群组/项目级别的 runner, 以及在 <code>job</code> 中定义 <code>tag</code> 等来管理 runner 以及分配任务</li>
</ul>
</li>
<li><code>executor</code><ul>
<li>设置 <code>job</code> 运行的环境,  <a href="https://docs.gitlab.com/runner/executors/index.html">可以根据不同的环境来选择</a></li>
</ul>
</li>
<li><code>artifacts</code><ul>
<li>用于存储 <code>job</code> 生成的文件或数据, 可以通过 <code>expire</code> 字段定义其过期时间</li>
</ul>
</li>
<li><code>cache</code><ul>
<li>用于缓存会复用文件或者文件夹, 比如包依赖, 打包工具之类的, 用以加速构建速度</li>
</ul>
</li>
</ul>
<h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><ul>
<li><p>思路可以有很多种，这里就说下我试过的</p>
</li>
<li><p>最后的结果主应用和微应用会整合为一个文件，也就是只有一个 nginx，一个端口，一个镜像文件</p>
<h3 id="git-sub-modules"><a href="#git-sub-modules" class="headerlink" title="git sub-modules"></a>git sub-modules</h3></li>
<li><p>使用 <a href="https://docs.gitlab.com/ee/ci/runners/git_submodules.html">git sub-modules</a> 打包微前端是一种可行方案, 通过 <code>git sub-modules</code> 由主应用绑定微应用</p>
</li>
<li><p>但是由于是单向的，所以只适合从主应用作为入口点来完成整个流程，这在测试和开发阶段是不太方便的，所以最后没有采用</p>
</li>
</ul>
<h3 id="仓库之间相互触发"><a href="#仓库之间相互触发" class="headerlink" title="仓库之间相互触发"></a>仓库之间相互触发</h3><ul>
<li>微应用和主应用程序都可以作为入口点, 相互调用 pipeline 以完成整个构建任务</li>
<li>不管从哪个入口进入，进入的时候都应该<strong>记录当下环境信息或者其他业务逻辑相关的信息</strong>，比如版本信息可能从 commit 或者 tag 中提取, 这些信息后续部署的 <code>job</code><br>以及其他应用都可能会用到</li>
<li>任何上传了 <code>artifacts</code> 的 <code>job</code> 都应该<strong>记录其 <code>CI_JOB_ID</code></strong>, 用于后续其他应用下载其 <code>artifacts</code></li>
</ul>
<p>微应用发生了变更，以微应用作为入口触发</p>
<ul>
<li>=&gt; 构建微应用并上传 <code>artifacts</code>(打包后的结果)</li>
<li>=&gt; 触发主应用 <code>pipeline</code>, 可以指定主应用的稳定版本 artifacts id，避免主应用以及其他子应用重新打包</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">image: node:20.16.0</span><br><span class="line">variables:</span><br><span class="line"><span class="meta">  #</span><span class="bash"> 为了避免主应用以及其他子应用重新打包，可以指定主应用的稳定版本 artifact id，也可以不传让主应用取最新的 artifacts</span></span><br><span class="line">  SPECIFIED_BASE_JOB_ID: 9044</span><br><span class="line">cache:</span><br><span class="line">  paths:</span><br><span class="line">    - ./node_modules</span><br><span class="line"></span><br><span class="line">frontend_build:</span><br><span class="line">  stage: build</span><br><span class="line">  tags:</span><br><span class="line">    - frontend_build</span><br><span class="line">  artifacts:</span><br><span class="line">    name: &quot;app1&quot;</span><br><span class="line">    paths:</span><br><span class="line">      - app1 # 构建后的文件夹名称</span><br><span class="line">      - shared_vars.env # 需要分享的变量</span><br><span class="line">    expire_in: 5 days</span><br><span class="line">  script:</span><br><span class="line">    - echo &quot;BUILD_JOB_ID=$CI_JOB_ID&quot; &gt; shared_vars.env</span><br><span class="line">    - |- </span><br><span class="line">        if [ &quot;$ENV&quot; ]; then</span><br><span class="line">          # 如果 env 存在，那么子应用的 pipeline 是从外部触发的</span><br><span class="line">          echo &quot;ENV from external&quot;;</span><br><span class="line">        else </span><br><span class="line">          # 反之，那就从 commit 信息中提取</span><br><span class="line">          if [[ $CI_COMMIT_TAG =~ ^PRO.* ]]; then </span><br><span class="line">            ENV=&quot;pro&quot;;</span><br><span class="line">          else</span><br><span class="line">            ENV=&quot;dev&quot;;</span><br><span class="line">          fi;</span><br><span class="line">        fi;</span><br><span class="line">        echo &quot;ENV=$ENV&quot; &gt;&gt; shared_vars.env</span><br><span class="line">    # 开始打包</span><br><span class="line">    - npm i</span><br><span class="line">    - npm run build:$ENV</span><br><span class="line"></span><br><span class="line">frontend_base_trigger:</span><br><span class="line">  stage: build</span><br><span class="line">  dependencies:</span><br><span class="line">    - frontend_build</span><br><span class="line">  needs: [&quot;frontend_build&quot;]</span><br><span class="line">  tags:</span><br><span class="line">    - frontend_build</span><br><span class="line">  script:</span><br><span class="line">    - source shared_vars.env</span><br><span class="line">    - echo &quot;trigger base app pipeline with $ENV&quot;</span><br><span class="line">    - if [ -z &quot;$BASE_REF&quot; ]; then BASE_REF=&quot;master&quot;; fi; echo $BASE_REF;</span><br><span class="line">    # 通过当前 job token，主应用的 ref 以及仓库 id 为凭据调用 pipline</span><br><span class="line">    # 如果不需要打包主应用，那么就通过 SPECIFIED_BASE_JOB_ID 指定稳定版本的 artifacts</span><br><span class="line">    - curl -v POST</span><br><span class="line">     --form token=$CI_JOB_TOKEN</span><br><span class="line">     --form ref=$BASE_REF</span><br><span class="line">     --form &quot;variables[PRE_JOB_ID]=$BUILD_JOB_ID&quot;</span><br><span class="line">     --form &quot;variables[PRE_PROJECT_ID]=$CI_PROJECT_ID&quot;</span><br><span class="line">     --form &quot;variables[SPECIFIED_BASE_JOB_ID]=$SPECIFIED_BASE_JOB_ID&quot;</span><br><span class="line">     --form &quot;variables[ENV]=$ENV&quot;</span><br><span class="line">     &quot;https://gitlab.bicitech.cn/api/v4/projects/$&#123;BASE_PROJECT_ID&#125;/trigger/pipeline&quot;</span><br></pre></td></tr></table></figure>

<p>主应用发生了变更，从主应用作为入口触发</p>
<ul>
<li>在生产环境中，以安全为考量因素，或者在开发测试阶段为了快速部署，大部分时候我们其实不需要现打包子应用，可以考虑以 tag 或者分支为凭据收集稳定版本的子应用的 <code>artifacts</code></li>
<li>需要现打包子应用<ul>
<li>=&gt; 提取环境变量, 然后携带相关参数调用子应用 <code>pipeline</code><ul>
<li>=&gt; 打包单个子应用：等待子应用构建完成后, 再由子应用重新触发主应用 <code>pipeline</code></li>
<li>=&gt; 同时打包多个子应用时：其实不太会碰到需要同时打包多个子应用的情况，因为每一个应用变更都会触发一次构建流程，那么最新的主应用 artifacts 就会更新<ul>
<li>但是如果有，可以在调用多个子应用 <code>pipeline</code> 后通过 <a href="https://docs.gitlab.com/ee/ci/pipelines/schedules.html">scheduled pipeline</a> 来定时检查子应用 <code>pipeline</code> 的构建情况</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>不管从哪个入口进入，最后都会到主应用来完成整个镜像打包以及部署流程</p>
<ul>
<li>=&gt; 构建部署文件，在这个 <code>job</code> 里会生成所有需要的文件和信息，并作为 <code>artifacts</code> 上传<ul>
<li>=&gt; 主应用构建，(如果主应用没有变化，那可以以 tag 或者分支为凭据下载之前构建的 <code>artifacts</code>, 然后再根据子应用情况来决定是否重新打包替换文件)<ul>
<li>=&gt; 根据子应用构建 <code>job</code> 的 <code>id</code> 来收集子应用 <code>artifacts</code></li>
<li>=&gt; 根据环境和版本信息生成并存储 <code>docker</code> 镜像的 <code>tag</code>, 存储 <code>tag</code> 是因为在 <code>k8s</code> 部署的时候需要设置 <code>image</code> 的地址</li>
</ul>
</li>
</ul>
</li>
<li>=&gt; 从 <code>build job</code> 的 <code>artifacts</code> 获取 <code>docker</code> 镜像的信息,  然后构建并推送 <code>docker</code> 镜像</li>
<li>=&gt; 从 <code>build job</code> 的 <code>artifacts</code> 里获取 <code>docker</code> 镜像的信息 , 更新 <code>k8s</code> 资源</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">frontend_build:</span><br><span class="line">  stage: build</span><br><span class="line">  tags:</span><br><span class="line">    - frontend_build</span><br><span class="line">  artifacts:</span><br><span class="line">    name: &quot;dist&quot;</span><br><span class="line">    paths:</span><br><span class="line">      - dist/</span><br><span class="line">      - shared_vars.env</span><br><span class="line">    expire_in: 5 days</span><br><span class="line">  before_script:</span><br><span class="line"><span class="meta">   #</span><span class="bash"> unzip 用于解压 artifacts</span></span><br><span class="line">    - sudo apt update &amp;&amp; apt install -y unzip</span><br><span class="line">  script:</span><br><span class="line">    - echo &quot;$CI_PIPELINE_SOURCE-$PRE_NAME-$PRE_JOB_ID-$PRE_REF_NAME&quot;</span><br><span class="line">    - |- </span><br><span class="line">        if [ &quot;$ENV&quot; ]; then</span><br><span class="line">          echo &quot;ENV from external&quot;;</span><br><span class="line">        else </span><br><span class="line">            if [[ $CI_COMMIT_TAG =~ ^PRO.* ]]; then </span><br><span class="line">              ENV=&quot;pro&quot;;</span><br><span class="line">            else</span><br><span class="line">              ENV=&quot;dev&quot;;</span><br><span class="line">            fi;</span><br><span class="line">        fi;</span><br><span class="line">        if [ -z &quot;$PRE_JOB_ID&quot; ]; then</span><br><span class="line">          export PRE_JOB_ID</span><br><span class="line">          export PRE_PROJECT_ID</span><br><span class="line">        fi;</span><br><span class="line">        export ENV</span><br><span class="line">        # 下载以及整合子应用</span><br><span class="line">        bash ./getMicoFrontend.sh</span><br><span class="line">        BUILD_IMAGE_PATH=&quot;$&#123;镜像地址&#125;:$&#123;CI_JOB_ID&#125;&quot;</span><br><span class="line">        declare -p ENV BUILD_JOB_ID BUILD_IMAGE_PATH SUB_BUILD_JOB_ID SUB_BUILD_PROJECT_ID &gt; shared_vars.env</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">base_project_id=&quot;your id&quot;</span><br><span class="line"></span><br><span class="line">download () &#123;</span><br><span class="line">  curl --location --output artifact.zip &quot;https://gitlab.bicitech.cn/api/v4/projects/$2/jobs/$1/artifacts?job_token=$CI_JOB_TOKEN&quot;</span><br><span class="line">  if [ -f artifact.zip ]; then</span><br><span class="line">    if [ &quot;$2&quot; == &quot;$base_project_id&quot; ]; then</span><br><span class="line">      unzip -o &quot;artifact.zip&quot; -d &quot;./&quot;</span><br><span class="line">    else</span><br><span class="line">      mkdir &quot;dist/micoFrontendApps&quot;</span><br><span class="line">      unzip -o &quot;artifact.zip&quot; -d &quot;dist/micoFrontendApps&quot;</span><br><span class="line">    fi</span><br><span class="line">  fi</span><br><span class="line">&#125;</span><br><span class="line">if [ &quot;$SPECIFIED_BASE_JOB_ID&quot; ]; then </span><br><span class="line">  download $SPECIFIED_BASE_JOB_ID $base_project_id</span><br><span class="line">else </span><br><span class="line">  npm i</span><br><span class="line">  npm run build:$&#123;ENV&#125;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ &quot;$PRE_JOB_ID&quot; ]; then </span><br><span class="line">  download $PRE_JOB_ID $PRE_PROJECT_ID</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<h3 id="构建-docker-镜像"><a href="#构建-docker-镜像" class="headerlink" title="构建 docker 镜像"></a>构建 docker 镜像</h3><p>官方提供多种方式, 这里就只列举了两个尝试过的</p>
<ul>
<li>如果运行器的执行器也是 docker, 在 docker 中构建 docker, <a href="https://docs.gitlab.com/ee/ci/docker/using_docker_build.html">(using_docker_build)</a></li>
<li>使用 <code>kaniko</code> 更简单些 <a href="https://docs.gitlab.com/ee/ci/docker/using_kaniko.html">(using_kaniko)</a>, <code>kaniko</code> 不要求 <code>Docker daemon</code> 以及 <code>privileged mode</code>, 适合一些无法运行 Docker 的场景, 比如 <code>Kubernetes</code> 或者 <code>CI/CD pipelines</code> </li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">frontend_image_build:</span><br><span class="line">  stage: deploy</span><br><span class="line">  dependencies:</span><br><span class="line">    - frontend_build</span><br><span class="line">  tags:</span><br><span class="line">    - frontend_deploy</span><br><span class="line">  image:</span><br><span class="line">    name: gcr.io/kaniko-project/executor:v1.9.0-debug</span><br><span class="line">    entrypoint: [&quot;&quot;]</span><br><span class="line">  script:</span><br><span class="line">    - source ./shared_vars.env</span><br><span class="line">    # 授权: 将用户名密码等授权信息 base64 处理之后保存在 `/kaniko/.docker/config.json`</span><br><span class="line">    - echo &quot;&#123;\&quot;auths\&quot;:&#123;\&quot;$&#123;CI_REGISTRY&#125;\&quot;:&#123;\&quot;auth\&quot;:\&quot;$(echo -n $&#123;CI_REGISTRY_USER&#125;:$&#123;CI_REGISTRY_PASSWORD&#125; | base64)\&quot;&#125;&#125;&#125;&quot; &gt; /kaniko/.docker/config.json</span><br><span class="line">    - | </span><br><span class="line">      if [ -e &quot;$&#123;CI_PROJECT_DIR&#125;/dist&quot; ]; then</span><br><span class="line">        # 打包镜像</span><br><span class="line">        /kaniko/executor --context &quot;$&#123;CI_PROJECT_DIR&#125;&quot; --dockerfile &quot;$&#123;CI_PROJECT_DIR&#125;/Dockerfile&quot; --destination &quot;$&#123;BUILD_IMAGE_PATH&#125;&quot;</span><br><span class="line">      else</span><br><span class="line">        echo &quot;dist dir is not exist&quot;</span><br><span class="line">        exit 1</span><br><span class="line">      fi</span><br></pre></td></tr></table></figure>

<h3 id="使用-k8s-部署"><a href="#使用-k8s-部署" class="headerlink" title="使用 k8s 部署"></a>使用 k8s 部署</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">frontend_image_deploy:</span><br><span class="line">  stage: deploy</span><br><span class="line">  dependencies:</span><br><span class="line">    - frontend_build</span><br><span class="line">    - frontend_image_build</span><br><span class="line">  tags:</span><br><span class="line">    - frontend_deploy</span><br><span class="line">  image: registry.cn-hangzhou.aliyuncs.com/haoshuwei24/kubectl:1.16.6</span><br><span class="line">  script:</span><br><span class="line">    - source ./shared_vars.env</span><br><span class="line">    - mkdir -p $HOME/.kube</span><br><span class="line">    - echo &quot;$KUBE_CONFIG&quot; &gt; $HOME/.kube/config  # 解码并配置 Kubernetes 认证</span><br><span class="line">    - sed -e &quot;s~\$&#123;BUILD_IMAGE_PATH&#125;~$BUILD_IMAGE_PATH~g&quot; ./k8s.yaml &gt; ./k8s_copy.yaml # 替换 k8s 配置中的镜像地址</span><br><span class="line">    - kubectl apply -f ./k8s_copy.yaml</span><br></pre></td></tr></table></figure>

<h2 id="在多个仓库之间的交互方式"><a href="#在多个仓库之间的交互方式" class="headerlink" title="在多个仓库之间的交互方式"></a>在多个仓库之间的交互方式</h2><ul>
<li>通过 GitLab API 在脚本中互相调用 <code>pipeline</code><a href="https://docs.gitlab.com/ee/ci/triggers/">(Trigger pipelines by using the API)</a></li>
<li><code>web hook</code>, 可以通过 <code>web hook</code> 监听 <code>push</code> <code>merge</code> 之类的事件来调用 <code>pipeline</code></li>
</ul>
<h2 id="如何在-job-或者-pipeline-之间分享变量"><a href="#如何在-job-或者-pipeline-之间分享变量" class="headerlink" title="如何在 job 或者 pipeline 之间分享变量"></a>如何在 <code>job</code> 或者 <code>pipeline</code> 之间分享变量</h2><ul>
<li>这里的变量指的是一些动态变量, 比如环境信息可能从 <code>commit</code> 信息中提取, 或者从外部获取来的, 这些信息可能后面的 <code>job</code> 也会用到, 那就需要将这些变量传递下去</li>
</ul>
<h3 id="artifacts"><a href="#artifacts" class="headerlink" title="artifacts"></a>artifacts</h3><ul>
<li><p>可以将变量存储在 <code>artifacts</code> 中, gitlab 不会默认提供 <code>artifacts</code> 访问能力, 需要通过 <code>need</code> 或者 <code>dependencies</code> 配置允许保留上一个 <code>job</code> 的 <code>artifacts</code> </p>
</li>
<li><p><code>needs</code> / <code>dependencies</code> 这两个配置都可以用来定义 job 的执行顺序以及提供 <code>artifacts</code> 的访问能力,</p>
<ul>
<li><code>dependencies</code> 主要用于定义 <code>artifacts</code> 的依赖关系, 表明当前任务的运行依赖于某些任务的 <code>artifacts</code></li>
<li><code>needs</code> 用于定义 <code>job</code> 的依赖关系, 这就会包含 <code>artifacts</code> 的访问权限</li>
<li>由于同一个 <code>stage</code> 中的 <code>job</code> 是并行运行的, 所以在同一个 <code>stage</code> 中的 <code>artifacts</code> 的分享就需要使用 <code>needs</code> 而不是 <code>dependencies</code> (<a href="https://docs.gitlab.com/ee/ci/yaml/index.html#dependencies">https://docs.gitlab.com/ee/ci/yaml/index.html#dependencies</a>) </li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 保存</span></span><br><span class="line">echo &quot;ENV=$ENV&quot; &gt; shared_vars.env</span><br><span class="line">echo &quot;REF=$REF&quot; &gt;&gt; shared_vars.env</span><br><span class="line"><span class="meta"> #</span><span class="bash"> 保存多个</span></span><br><span class="line"> declare -p VAR3 VAR4 &gt;&gt; shared_vars.env</span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用</span></span><br><span class="line">source shared_vars.env</span><br><span class="line"> echo $ENV</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>artifacts</code> 会被上传, 那么通过下载 <code>artifacts</code> 自然也能在 <code>pipeline</code> 之间共享变量</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl --location --output artifact.zip &quot;https://gitlab.example.cn/api/v4/projects/$&#123;CI_PROJECT_ID&#125;/jobs/$&#123;CI_JOB_ID&#125;/artifacts?job_token=$CI_JOB_TOKEN&quot;</span><br></pre></td></tr></table></figure>

<h3 id="通过-pipeline-api-携带"><a href="#通过-pipeline-api-携带" class="headerlink" title="通过 pipeline api 携带"></a>通过 pipeline api 携带</h3><p><code>pipeline</code> 可以通过 api 调用, api 的 <code>variables</code> 可以用来传递一些额外的变量, 这些变量拥有最高的优先权, 可以覆盖其他任何同名的变量, 这些变量在 <code>job</code> 详情页面也可以看到<br><a href="https://docs.gitlab.com/ee/ci/triggers/index.html#pass-cicd-variables-in-the-api-call">pass-cicd-variables-in-the-api-call</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl --request POST \</span><br><span class="line">     --form token=TOKEN \</span><br><span class="line">     --form ref=main \</span><br><span class="line">     --form &quot;variables[UPLOAD_TO_S3]=true&quot; \</span><br><span class="line">     &quot;https://gitlab.example.com/api/v4/projects/123456/trigger/pipeline&quot;</span><br></pre></td></tr></table></figure>

<h3 id="变量相关-api"><a href="#变量相关-api" class="headerlink" title="变量相关 api"></a>变量相关 api</h3><p>通过使用 GitLab CI/CD 项目/组级别的变量增删改相关的 api, 也可以达到在 <code>job</code> 或者 <code>pipeline</code> 动态传递变量的目的, 但是毕竟是全局变量,也可能有权限问题, 酌情使用 <a href="https://docs.gitlab.com/ee/api/project_level_variables.html">(project_level_variables)</a>, </p>
<h2 id="QA"><a href="#QA" class="headerlink" title="QA"></a>QA</h2><ul>
<li>error: This job is stuck because the project doesn’t have any runners online assigned to it.<ul>
<li>job are assigned by <code>tag</code>, or enable the runner to run without tags</li>
</ul>
</li>
<li>error: could not read Username for ‘<a href="https://gitlab.com/">https://gitlab.com</a>‘: No such device or address on Gitlab CI<ul>
<li>make sure Allow access to this project with a <code>CI_JOB_TOKEN</code> switch is enabled</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
      <tags>
        <tag>micro_frontend</tag>
        <tag>CI/CD</tag>
      </tags>
  </entry>
  <entry>
    <title>i18n-plan 前端多语言方案</title>
    <url>/2023/06/06/i18n/</url>
    <content><![CDATA[<p>想要给大家介绍一个 i18n 插件，写这个插件的起源也是因为项目中对 i18n 的需求，这个插件覆盖了我们项目中遇到的大部分 i18n 需求，说不定也能覆盖你的，try 一 try 不后悔</p>
<p>集成 <strong>ChatGPT 和 YouDao，自动翻译功能开箱即用</strong></p>
<p>如果对你有用，可以给个 star 吗 <a href="https://github.com/Tong-H/i18n-plan">i18n-plan</a></p>
<h1 id="i18n-plan"><a href="#i18n-plan" class="headerlink" title="i18n-plan"></a>i18n-plan</h1><p><a href="https://github.com/Tong-H/i18n-plan/blob/main/README_ch.md">中文</a>/<a href="https://github.com/Tong-H/i18n-plan">English</a></p>
<p>i18n-plan 是一个简单的 i18n Javascript 插件，支持基于 Node.js 和浏览器的 App，并且应该适用于所有 Javascript 框架。</p>
<p><strong>i18n-plan 能做什么</strong></p>
<ul>
<li>  <strong>生成和更新本地语言资源</strong>，只需执行一个命令即可</li>
<li>  提供<strong>导出和导入功能</strong>以便高效地管理本地语言资源。可以将本地语言资源导出为 <code>.xls</code> 文件，也可以通过导入 <code>.xls</code> 文件对本地语言资源进行更新。此功能可以让团队协作管理本地语言资源</li>
<li>  目前已集成 <strong>ChatGPT 和 YouDao，自动翻译功能开箱即用</strong>。此外还提供自定义选项可以将其他翻译器集成到 <code>i18n-plan</code> 的流程中</li>
<li>  在业务代码中通过<strong>相应的键获取文本内容</strong></li>
<li>  使用<strong>模板字符串</strong>，在翻译中注入动态数据</li>
</ul>
<h1 id="开始教程"><a href="#开始教程" class="headerlink" title="开始教程"></a>开始教程</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yarn add i18n-plan</span><br><span class="line">或</span><br><span class="line">npm -i i18n-plan</span><br></pre></td></tr></table></figure>

<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><h3 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h3><ul>
<li>  <code>I18NPLAN.config.cjs</code> 在的地方表示项目根目录</li>
<li>  下面是个简单的用例 <a href="#configuration">查看示例配置文件，包含每个配置项的详细解释</a></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 配置文件应该由 `module.exports` 导出</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">	<span class="attr">lans</span>: [<span class="string">&quot;en-US&quot;</span>, <span class="string">&quot;es-MX&quot;</span>],</span><br><span class="line">	<span class="attr">refer</span>: <span class="string">&quot;en-US&quot;</span>,</span><br><span class="line">	<span class="attr">output</span>: <span class="string">&quot;build/locales&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="管理本地语言资源"><a href="#管理本地语言资源" class="headerlink" title="管理本地语言资源"></a>管理本地语言资源</h3><ul>
<li>  在项目根目录创建配置文件后，就可以开始使用了</li>
<li>  你可以继续在项目中添加一些 <code>.lan.json</code> 文件。 <code>.lan.json</code> 是 <code>i18n-plan</code> 的命名约定，表示该 <code>json</code> 文件是语言资源的一部分</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">|-- project</span><br><span class="line">|   |</span><br><span class="line">|   |-- build</span><br><span class="line">|   |	|-- locales</span><br><span class="line">|   |</span><br><span class="line">|   |-- page1</span><br><span class="line">|   |   |-- index.js</span><br><span class="line">|   |   |-- index.css</span><br><span class="line">|   |   +-- page1.lan.json // new</span><br><span class="line">|   |</span><br><span class="line">|   `-- page2</span><br><span class="line">|       |-- index.js</span><br><span class="line">|       |-- index.css</span><br><span class="line">|       +-- page2.lan.json // new</span><br></pre></td></tr></table></figure>

<ul>
<li>  现在我们创建了两个 <code>.lan.json</code> 文件:  <code>page1.lan.json</code> 和 <code>page2.lan.json</code>, 假设文件内容是：</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// page1.lan.json</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;hello, I&#x27;m the page one&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;templateString&quot;</span>: <span class="string">&quot;now is $&#123;date&#125;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// page2.lan.json</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;while I&#x27;m the page two&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>  现在可以在终端中执行 <code>npx i18n-plan</code> 命令来生成语言资源。 <a href="#commands">查看有关 import / export / translation 命令详情</a></li>
<li>  在搜集过程中, 程序会从根目录开始搜寻所有以 <code>.lan.json</code> 为后缀的文件。根据上面的配置文件, 在 <code>build/locales</code> 目录中，会生成两个文件: <code>en-US.json</code> and <code>es-MX.json</code>.</li>
<li>  <code>lan.json</code> 文件的名称会作为它的集合的 <code>key</code>。如果两个及以上的 <code>.lan.json</code> 文件有着相同的名称，那么这些文件的内容会被合并。</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">&quot;page1&quot;</span>: &#123;</span><br><span class="line">		<span class="attr">&quot;name&quot;</span>: <span class="string">&quot;hello, I&#x27;m the page one&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;templateString&quot;</span>: <span class="string">&quot;now is $&#123;date&#125;&quot;</span></span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="attr">&quot;page2&quot;</span>: &#123;</span><br><span class="line">		<span class="attr">&quot;name&quot;</span>: <span class="string">&quot;while I&#x27;m the page two&quot;</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="翻译"><a href="#翻译" class="headerlink" title="翻译"></a>翻译</h3><ul>
<li>  将 <code>auto</code> 设为 <code>true</code> 来启用自动翻译功能</li>
<li>  <a href="#configuration">查看示例配置文件，包含每个配置项的详细解释</a></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">translation</span>: &#123;</span><br><span class="line">		<span class="attr">auto</span>: <span class="literal">true</span>,</span><br><span class="line">		<span class="attr">retryTime</span>: <span class="number">0</span>,</span><br><span class="line">		<span class="attr">interval</span>: <span class="number">1000</span>,</span><br><span class="line">		<span class="attr">inBatch</span>: <span class="literal">false</span>,</span><br><span class="line">		<span class="attr">resolve</span>: &#123;&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>  现在你可以在 <code>resolve</code> 配置翻译相关的设置</li>
</ul>
<h4 id="ChatGPT"><a href="#ChatGPT" class="headerlink" title="ChatGPT"></a>ChatGPT</h4><ul>
<li>  <a href="https://platform.openai.com/account/api-keys">Api key</a> 和 <a href="https://platform.openai.com/account/org-settings">Organization key</a> 是必需的</li>
<li>  如果你所在的地区需要通过 VPN 才能访问 ChatGPT, 那么 <code>proxy</code> 配置是必需的</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface TranslationResolveChatgpt &#123;</span><br><span class="line">	<span class="attr">translator</span>: <span class="string">&quot;chatgpt&quot;</span></span><br><span class="line">	rules?: string[]</span><br><span class="line">	<span class="attr">options</span>: &#123;</span><br><span class="line">		<span class="attr">organization</span>: string</span><br><span class="line">		<span class="attr">apiKey</span>: string</span><br><span class="line">	&#125;</span><br><span class="line">	proxy?: tunnel.ProxyOptions</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attr">resolve</span>: &#123;</span><br><span class="line">	<span class="attr">translator</span>: <span class="string">&quot;chatgpt&quot;</span>,</span><br><span class="line">	<span class="attr">rules</span>: [],</span><br><span class="line">	<span class="attr">options</span>: &#123;</span><br><span class="line">		<span class="attr">organization</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">		<span class="attr">apiKey</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="attr">proxy</span>: &#123;</span><br><span class="line">		<span class="attr">host</span>: <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">		<span class="attr">port</span>: <span class="number">10809</span>,</span><br><span class="line">	&#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h4 id="有道翻译"><a href="#有道翻译" class="headerlink" title="有道翻译"></a>有道翻译</h4><ul>
<li>  <a href="https://ai.youdao.com/console/#/service-singleton/text-translation">ID 和 应用 ID</a> 是必需的</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">interface TranslationResolveYoudao &#123;</span><br><span class="line">	<span class="attr">translator</span>: <span class="string">&quot;youdao&quot;</span></span><br><span class="line">	<span class="attr">options</span>: &#123;</span><br><span class="line">		<span class="attr">key</span>: string</span><br><span class="line">		<span class="attr">appkey</span>: string</span><br><span class="line">		api?: string</span><br><span class="line">		vocabId?: string</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">	</span><br><span class="line"><span class="attr">resolve</span>: &#123;</span><br><span class="line">	<span class="attr">translator</span>: <span class="string">&quot;youdao&quot;</span>,</span><br><span class="line">	<span class="attr">options</span>: &#123;</span><br><span class="line">		<span class="attr">key</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">		<span class="attr">appkey</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">	&#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h4 id="自定义集成"><a href="#自定义集成" class="headerlink" title="自定义集成"></a>自定义集成</h4><p>-你可以集成你需要的翻译服务到 <code>i18n-plan</code> 流程中，比如谷歌翻译或者 DeepL</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">type Translator= <span class="function">(<span class="params">props: &#123; config: Config; <span class="keyword">from</span>: string; to: string; content:  I18NPLAN.TranslationContent[] &#125;</span>) =&gt;</span> <span class="built_in">Promise</span>&lt;I18NPLAN.TranslationContent[] | TranslationError&gt;</span><br><span class="line">type TranslationContent = &#123; <span class="attr">key</span>: string[]; value: string; lanName: string &#125;</span><br><span class="line">type TranslationError = &#123;</span><br><span class="line">	<span class="attr">errorCode</span>: number</span><br><span class="line">	<span class="attr">error</span>: any</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attr">resolve</span>: &#123;</span><br><span class="line">	<span class="attr">custom</span>: <span class="function">(<span class="params">&#123; config, <span class="keyword">from</span>, to, content &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">			resolve(content.map(<span class="function"><span class="params">item</span> =&gt;</span> (&#123;...item, <span class="attr">value</span>: <span class="string">&quot;from the custom translation&quot;</span>&#125;)))</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="在-App-中使用"><a href="#在-App-中使用" class="headerlink" title="在 App 中使用"></a>在 App 中使用</h3><ul>
<li>  按照以上示例，我们已经生成了语言资源包, 那么现在我们可以在业务代码使用了</li>
</ul>
<h3 id="setLan"><a href="#setLan" class="headerlink" title="setLan"></a>setLan</h3><ul>
<li>  该函数可以用于保存语言资源。语言资源可以通过 import 来导入，如果担心包体积太大也可以通过 <code>Ajax</code> 请求来动态获取</li>
<li>  可以被调用多次来合并语言资源</li>
<li>  包含两个参数:</li>
</ul>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">lanRes</td>
<td align="left">Json 格式的语言资源</td>
</tr>
<tr>
<td align="left">isReset</td>
<td align="left">是否重置已有资源，反正合并。默认: <code>false</code></td>
</tr>
</tbody></table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setLan</span>(<span class="params">lanRes: I18NPLAN.Lan, isRestore?: boolean</span>): <span class="title">I18NPLAN</span>.<span class="title">Lan</span></span></span><br></pre></td></tr></table></figure>

<h3 id="getLan"><a href="#getLan" class="headerlink" title="getLan"></a>getLan</h3><ul>
<li>  此函数根据路径返回键对应的值</li>
<li>  包含两个参数:</li>
</ul>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">key</td>
<td align="left">key 的路径</td>
</tr>
<tr>
<td align="left">params</td>
<td align="left">一个对象，用于填充模板字符</td>
</tr>
</tbody></table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>  <span class="title">getLan</span>(<span class="params">key: string | string[], params?: Record&lt;string, I18NPLAN.BasicLanValue&gt;</span>): <span class="title">I18NPLAN</span>.<span class="title">BasicLanValue</span> | <span class="title">undefined</span></span></span><br></pre></td></tr></table></figure>

<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; setLan, getLan &#125; <span class="keyword">from</span> <span class="string">&quot;i18n-plan&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">	setLan(&#123;</span><br><span class="line">		<span class="attr">page1</span>: &#123;</span><br><span class="line">			<span class="attr">name</span>: <span class="string">&quot;hello, I&#x27;m the page one&quot;</span>,</span><br><span class="line">			<span class="attr">templateString</span>: <span class="string">&quot;what&#x27;s the time? It&#x27;s $&#123;date&#125;&quot;</span>,</span><br><span class="line">		&#125;,</span><br><span class="line">	&#125;)</span><br><span class="line">)</span><br><span class="line"><span class="built_in">console</span>.log(getLan(<span class="string">&quot;page1,templateString&quot;</span>, &#123; <span class="attr">date</span>: <span class="keyword">new</span> <span class="built_in">Date</span>().toLocaleTimeString() &#125;)) <span class="comment">// what&#x27;s the time? It&#x27;s 11:28:45 AM</span></span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">	setLan(&#123;</span><br><span class="line">		<span class="attr">page2</span>: &#123;</span><br><span class="line">			<span class="attr">name</span>: <span class="string">&quot;while I&#x27;m the page two&quot;</span>,</span><br><span class="line">		&#125;,</span><br><span class="line">	&#125;)</span><br><span class="line">)</span><br><span class="line"><span class="built_in">console</span>.log(getLan(<span class="string">&quot;page2,name&quot;</span>)) <span class="comment">// while I&#x27;m the page two</span></span><br><span class="line"><span class="built_in">console</span>.log(setLan(&#123;&#125;, <span class="literal">true</span>)) <span class="comment">// &#123;&#125;</span></span><br></pre></td></tr></table></figure>

<h1 id="可执行命令"><a href="#可执行命令" class="headerlink" title="可执行命令"></a><a href="#commands">可执行命令</a></h1><ul>
<li>  收集和更新本地语言资源</li>
<li>  该命令将在根目录中查找 ‘.lan.json’ 文件，并将文件中的所有条目合并以生成参考语言资源。该文件将作为更新其他语言的基础。</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npx i18n-plan</span><br></pre></td></tr></table></figure>

<ul>
<li>  翻译给定的 <code>key</code> 对应的内容</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  如果你想要翻译 `page1` 和 `page2` 中的 `name`</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="string">&quot;page1&quot;</span>: &#123;</span><br><span class="line">		<span class="string">&quot;name&quot;</span>: <span class="string">&quot;hello, I&#x27;m the page one&quot;</span>,</span><br><span class="line">		<span class="string">&quot;templateString&quot;</span>: <span class="string">&quot;what&#x27;s the time? It&#x27;s $&#123;date&#125;&quot;</span></span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="string">&quot;page2&quot;</span>: &#123;</span><br><span class="line">		<span class="string">&quot;name&quot;</span>: <span class="string">&quot;while I&#x27;m the page two&quot;</span>,</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 期望的文件内容是:</span></span><br><span class="line"> &#123;</span><br><span class="line"> 	<span class="string">&quot;keys&quot;</span>: [<span class="string">&quot;page1,name&quot;</span>, <span class="string">&quot;page2,name&quot;</span>]</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npx i18n-plan translate path=&lt;指向 .json 文件的绝对路径&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>  导出和导入</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npx i18n-plan export path=&lt;指向 .xls 文件的绝对路径&gt;</span><br><span class="line">npx i18n-plan import path=&lt;指向 .xls 文件的绝对路径&gt;</span><br></pre></td></tr></table></figure>

<h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a><a href="#configuration">配置文件</a></h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">		定义翻译的目标语言。此设置中列出的每一项都是输出文件的名称。</span></span><br><span class="line"><span class="comment">		当与翻译功能一起使用时，每一项都将作为翻译的目标语言发送给翻译服务，所以该值必须与翻译器要求的语言代码一致</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="attr">lans</span>: [<span class="string">&quot;en-US&quot;</span>, <span class="string">&quot;es-MX&quot;</span>, <span class="string">&quot;zh-CN&quot;</span>],</span><br><span class="line">	<span class="comment">// 指定将用作生成其他语言参考的主要语言</span></span><br><span class="line">	<span class="attr">refer</span>: <span class="string">&quot;en-US&quot;</span>,</span><br><span class="line">	<span class="comment">// 指定输出目录，相对于根目录的路径</span></span><br><span class="line">	<span class="attr">output</span>: <span class="string">&quot;locales&quot;</span>,</span><br><span class="line">	<span class="comment">// 是否缓存历史增删项. 如果设为 true，你可以在 `_cache.json` 文件中找到增删项的 key</span></span><br><span class="line">	<span class="attr">generateCache</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="comment">// 翻译配置</span></span><br><span class="line">	<span class="attr">translation</span>: &#123;</span><br><span class="line">		<span class="comment">/* </span></span><br><span class="line"><span class="comment">			默认: false</span></span><br><span class="line"><span class="comment">			是否在同步语言资源后自动化翻译。如果设置为 true，则新增加项将自动放入翻译队列中</span></span><br><span class="line"><span class="comment">		*/</span></span><br><span class="line">		<span class="attr">auto</span>: <span class="literal">true</span>,</span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">			默认: 0</span></span><br><span class="line"><span class="comment">			如果有翻译项失败，进行重试的次数</span></span><br><span class="line"><span class="comment">		*/</span></span><br><span class="line">		 <span class="attr">retryTime</span>: <span class="number">0</span>,</span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">			默认: 1000</span></span><br><span class="line"><span class="comment">			设置请求的时间间隔。建议避免发送过于频繁的请求</span></span><br><span class="line"><span class="comment">		*/</span></span><br><span class="line">		 <span class="attr">interval</span>: <span class="number">1000</span>,</span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">			默认: false</span></span><br><span class="line"><span class="comment">			是逐个翻译项目，还是一次性翻译某种语言的所有项目。只适用于 ChatGPT 和自定义翻译</span></span><br><span class="line"><span class="comment">		*/</span></span><br><span class="line">		<span class="attr">inBatch</span>: <span class="literal">true</span>,</span><br><span class="line">		<span class="comment">/* </span></span><br><span class="line"><span class="comment">			两个翻译服务开箱即用：有道和ChatGPT，此外，还提供了一个自定义函数，可以将其他翻译服务（如谷歌或DeepL）集成到我们的流程中</span></span><br><span class="line"><span class="comment">		*/</span></span><br><span class="line">		<span class="attr">resolve</span>: &#123;</span><br><span class="line">			<span class="attr">translator</span>: <span class="string">&quot;chatgpt&quot;</span>,</span><br><span class="line">			<span class="comment">// 设置一个正则表达式数组，指导 ChatGPT 跳过与其匹配的特定文本，可以让 ChatGPT 排除某些单词或格式保留其原始文本</span></span><br><span class="line">			<span class="attr">rules</span>: [<span class="string">&quot;(&lt;[a-zA-Z /]+&gt;)&quot;</span>],</span><br><span class="line">			<span class="attr">options</span>: &#123;</span><br><span class="line">				<span class="comment">// organization key</span></span><br><span class="line">				<span class="attr">organization</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">				<span class="comment">// apiKey</span></span><br><span class="line">				<span class="attr">apiKey</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">			&#125;,</span><br><span class="line">			<span class="comment">// 如果你所在的地区需要通过 VPN 才能访问 ChatGPT, 那么 `proxy` 配置是必需的</span></span><br><span class="line">			<span class="attr">proxy</span>: &#123;</span><br><span class="line">				<span class="attr">host</span>: <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">				<span class="attr">port</span>: <span class="number">10809</span>,</span><br><span class="line">			&#125;,</span><br><span class="line">		&#125;,</span><br><span class="line">		<span class="attr">resolve</span>: &#123;</span><br><span class="line">			<span class="attr">translator</span>: <span class="string">&quot;youdao&quot;</span>,</span><br><span class="line">			<span class="attr">options</span>: &#123;</span><br><span class="line">				<span class="attr">api</span>: <span class="string">&quot;https://openapi.youdao.com/api&quot;</span>,</span><br><span class="line">				<span class="comment">// key</span></span><br><span class="line">				<span class="attr">key</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">				<span class="comment">// appkey</span></span><br><span class="line">				<span class="attr">appkey</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">				<span class="comment">// 有道翻译使用自己的词典来过滤特殊单词或格式。请查看官方文档以获取详细信息</span></span><br><span class="line">				<span class="attr">vocabId</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">			&#125;,</span><br><span class="line">		&#125;,</span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">			这个自定义函数允许您根据您的喜好集成其他的翻译服务</span></span><br><span class="line"><span class="comment">		*/</span> </span><br><span class="line">		<span class="attr">resolve</span>: &#123;</span><br><span class="line">			<span class="comment">/*</span></span><br><span class="line"><span class="comment">				type Translator= (props: &#123; config: Config; from: string; to: string; content:  I18NPLAN.TranslationContent[] &#125;) =&gt; Promise&lt;I18NPLAN.TranslationContent[] | TranslationError&gt;</span></span><br><span class="line"><span class="comment">				type TranslationContent = &#123; key: string[]; value: string; lanName: string &#125;</span></span><br><span class="line"><span class="comment">				type TranslationError = &#123;</span></span><br><span class="line"><span class="comment">					errorCode: number</span></span><br><span class="line"><span class="comment">					error: any</span></span><br><span class="line"><span class="comment">				&#125;</span></span><br><span class="line"><span class="comment">			*/</span></span><br><span class="line">			<span class="attr">custom</span>: <span class="function">(<span class="params">&#123; config, <span class="keyword">from</span>, to, content &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">					resolve(content.map(<span class="function"><span class="params">item</span> =&gt;</span> (&#123;...item, <span class="attr">value</span>: <span class="string">&quot;来自自定义翻译器&quot;</span>&#125;)))</span><br><span class="line">				&#125;)</span><br><span class="line">			&#125;,</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
      <tags>
        <tag>国际化</tag>
      </tags>
  </entry>
  <entry>
    <title>js 拾遗：连续赋值 &amp;&amp; for 循环顺序对性能的影响</title>
    <url>/2019/08/09/js_one/</url>
    <content><![CDATA[<h2 id="连续赋值"><a href="#连续赋值" class="headerlink" title="连续赋值"></a>连续赋值</h2><p>在掘金看到一段很有意思的 js 代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;<span class="attr">n</span>: <span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">var</span> b = a</span><br><span class="line">a.x = a = &#123;<span class="attr">n</span>: <span class="number">2</span>&#125;</span><br><span class="line">a <span class="comment">// ?</span></span><br><span class="line">b <span class="comment">// ?</span></span><br></pre></td></tr></table></figure>

<p>*1、a，b指向 {n:1} 内存一<br>*2、a.x 可以看出 内存一.x ，内存一的值被修改为是{n: 1, x: {…}}，内存一.x 值被指向 a<br>*3、a 重新赋值执向 {n:2} 内存二<br>*4、若再修改内存二的属性 那么也同时修改 b.x 的值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">a <span class="comment">// &#123;n: 2&#125;</span></span><br><span class="line">b <span class="comment">// &#123;n: 1, x: &#123;…&#125;&#125;</span></span><br></pre></td></tr></table></figure>

<p><a href="https://stackoverflow.com/questions/38008672/how-does-a-x-a-n-b-work-in-javascript">https://stackoverflow.com/questions/38008672/how-does-a-x-a-n-b-work-in-javascript</a><br><a href="https://juejin.im/pin/5d4930756fb9a07d8724214f">https://juejin.im/pin/5d4930756fb9a07d8724214f</a></p>
<h2 id="for-循环顺序对性能的影响"><a href="#for-循环顺序对性能的影响" class="headerlink" title="for 循环顺序对性能的影响"></a>for 循环顺序对性能的影响</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> t1 = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime()</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">1000</span>; j++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> k = <span class="number">0</span>; k &lt; <span class="number">10000</span>; k++) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> t2 = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;first time&#x27;</span>, t2 - t1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">1000</span>; j++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> k = <span class="number">0</span>; k &lt; <span class="number">100</span>; k++) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> t3 = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;two time&#x27;</span>, t3 - t2)  </span><br></pre></td></tr></table></figure>

<p>1:  k 执行次数 10000<em>1000</em>100<br>    j 执行次数 1000*100<br>    i 执行次数 100</p>
<p>2:  k 执行次数 100<em>1000</em>10000<br>    j 执行次数 1000*1000<br>    i 执行次数 10000</p>
<p>总的循环次数是一样的<br>k 的执行次数不变，但是 j 和 i 执行次数变多，那么初始化次数也变多</p>
<p><a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/235">https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/235</a></p>
]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>前端是否需要对密码进行加密传输 &amp;&amp; HTTPS</title>
    <url>/2018/10/16/https/</url>
    <content><![CDATA[<p>最近学习node，写demo登陆和注册功能的时候因为要考虑后台的加密和安全所以也想了下前端的，前端传输密码的时候是否应该加密之后再传输呢<br>看了一些网站的登陆，csdn、简书等是明文传输，但腾讯、百度这些一线大站是经过前端加密的，看了些大佬的文章，顺便自己搬个凳子记个笔记</p>
<h1 id="前端是否需要对密码进行加密传输"><a href="#前端是否需要对密码进行加密传输" class="headerlink" title="前端是否需要对密码进行加密传输"></a>前端是否需要对密码进行加密传输</h1><p>前端的加密本身不能对网站的安全性有任何提高功能，所有的关于网站的安全技术都应该放在后台，但是这也不是完全没有意义，可以增加攻击成本，尽可能降低攻击带来的损失，毕竟丢了密文比丢了明文要强，而且犯罪分子技术参差不齐，简单的加密能够拦截很大一部分菜鸟，至于高手。。。</p>
<p>最后看到比较统一的是隐秘信息传输应该使用https</p>
<h1 id="什么是https-ssl证书又是什么"><a href="#什么是https-ssl证书又是什么" class="headerlink" title="什么是https? ssl证书又是什么"></a>什么是https? ssl证书又是什么</h1><p>这篇文章只是想弄懂流程和原理，不会去纠结具体的术语</p>
<p>HTTP协议以明文方式发送内容，不提供任何方式的数据加密，处在同一网络中的其它用户可以通过网络抓包来窃取和篡改数据包的内容，甚至运营商或者wifi提供者，有可能会篡改http报文，添加广告等信息以达到盈利的目的</p>
<p>可以通过和SSL(Secure Socket Layer，安全套接层)组合使用来为浏览器和服务器之间的通信加密。在这条加密线路上进行通信的http被称为HTTPS（HTTP Secure，超文本传输安全协议）。</p>
<p>SSL证书（Secure socket layer），就是遵守SSL协议，由受信任的数字证书颁发机构CA颁发，主要用来提供对用户浏览器和服务器的认证，对传送的数据进行加密和隐藏，确保数据在传送中不被改变保证数据的完整性，加密方式为「非对称加密」和「对称加密」。</p>
<h2 id="https的工作流程"><a href="#https的工作流程" class="headerlink" title="https的工作流程"></a>https的工作流程</h2><p>1、用户连接到你的Web站点，该Web站点受服务器证书所保护</p>
<p>2、你的服务器进行响应，并自动传送你网站的数字证书给用户，（浏览器内置一个受信任的机构列表和这些机构的证书）用户的浏览器查看该证书是否存在于浏览器的受信任机构列表中，并且通过服务器证书中的信息与当前正在访问的网站（域名等）是否一致来鉴别你的网站，鉴别没成功会提醒用户是否继续该访问</p>
<p>3、鉴别成功后，用户的浏览器产生一把唯一的会话钥匙，用以跟网站之间所有的通讯过程进行加密，会话密钥是随机生成，每次都会有不一样的结果，</p>
<p>4、使用者的浏览器以网站的公钥对交谈钥匙码进行加密，以便只有让你的网站得以阅读此交谈钥匙码</p>
<h2 id="https的优点："><a href="#https的优点：" class="headerlink" title="https的优点："></a>https的优点：</h2><p>1、使用HTTPS协议可认证用户和服务器，确保数据发送到正确的客户机和服务器；</p>
<p>2、HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，要比http协议安全，可防止数据在传输过程中不被窃取、改变，确保数据的完整性。</p>
<p>3、HTTPS是现行架构下最安全的解决方案，虽然不是绝对安全，但它大幅增加了中间人攻击的成本。</p>
<p>4、谷歌曾在2014年8月份调整搜索引擎算法，并称“比起同等HTTP网站，采用HTTPS加密的网站在搜索结果中的排名将会更高”。</p>
<h2 id="https的缺点："><a href="#https的缺点：" class="headerlink" title="https的缺点："></a>https的缺点：</h2><p>1、HTTPS协议握手阶段比较费时，会使页面的加载时间延长近50%</p>
<p>2、HTTPS连接缓存不如HTTP高效，会增加数据开销和功耗，甚至已有的安全措施也会因此而受到影响；</p>
<p>3、SSL证书需要钱，功能越强大的证书费用越高</p>
<p>4、SSL证书通常需要绑定IP，不能在同一IP上绑定多个域名</p>
<p>5、HTTPS协议的加密范围也比较有限，在黑客攻击、拒绝服务攻击、服务器劫持等方面几乎起不到什么作用。最关键的，SSL证书的信用链体系并不安全，特别是在某些国家可以控制CA根证书的情况下，中间人攻击一样可行。</p>
<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p>知乎各位大佬的回答 <a href="https://www.zhihu.com/question/25539382">https://www.zhihu.com/question/25539382</a><br>HTTP与HTTPS的区别  <a href="https://www.cnblogs.com/wqhwe/p/5407468.html">https://www.cnblogs.com/wqhwe/p/5407468.html</a></p>
]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
      <tags>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title>微前端实践:single-spa+vite</title>
    <url>/2025/01/23/micro_frontend/</url>
    <content><![CDATA[<h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><p>前段时间<a href="https://tong-h.github.io/2025/01/23/micro_frontend">微前端实践:single-spa+vite</a>的方式对项目进行了整合，也用 <a href="https://tong-h.github.io/2025/01/23/gitlab_cicd/">使用 Gitlab CI/CD 自动打包和部署微前端</a></p>
<p>微前端目前已经是非常成熟的前端技术，类似于微服务模式。允许使用不同的框架和技术栈，独立开发以及部署不同的模块。这也表示一个大型的应用可以拆分成小型的 “app”，在运行时再根据需要去整合以及加载这些 “app”。</p>
<p>优点很明显：</p>
<ul>
<li>可以拆分巨石应用，也可以用于整合小应用</li>
<li>对灰色部署友好，可以渐进式替换或重写项目的某些部分</li>
<li>可以共享通用库, 比如 react / vue 这类包，可以加载一次后在多个微前端中复用</li>
</ul>
<p>在着手开始做之前调研了一些比较流行的解决方案，也尝试过 <code>QianKun</code>, 最后衡量之下使用了 <code>single-spa</code>，我的场景是整合小型应用，它们的技术栈非常相似，都是 vite + vue，由于都是vue所以重合的包非常多</p>
<h2 id="Single-Spa"><a href="#Single-Spa" class="headerlink" title="Single-Spa"></a>Single-Spa</h2><p>Single-Spa 的文档非常完善，生态也很丰富。官方对目前流行的大部分框架都有整合方案，也提出了一套<a href="https://single-spa.js.org/docs/recommended-setup">最佳实践方案</a>, 基本可以覆盖到实践过程中出现的大部分问题和需求。</p>
<p><strong>workflow</strong></p>
<p>Single-Spa 通过监听 <code>location</code> 的变化, 匹配路由并加载相应的微前端应用</p>
<p>每个微前端应用都是独立的, 和目前 spa 应用没有区别，只是入口文件从<code>html</code> 文件变成了 <code>js</code> 文件。每个微应用需要提供 <code>dom</code> 容器 + 入口文件 + <a href="https://single-spa.js.org/docs/building-applications#lifecycle-props">生命周期</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">singleSpa.registerApplication(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;myApp&quot;</span>,</span><br><span class="line">  <span class="attr">app</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;src/myApp/main.js&quot;</span>),</span><br><span class="line">  <span class="attr">activeWhen</span>: [</span><br><span class="line">    <span class="string">&quot;/myApp&quot;</span>,</span><br><span class="line">    <span class="function">(<span class="params">location</span>) =&gt;</span> location.pathname.startsWith(<span class="string">&quot;/some/other/path&quot;</span>),</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">customProps</span>: &#123;</span><br><span class="line">    <span class="attr">some</span>: <span class="string">&quot;value&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="微前端应用通信"><a href="#微前端应用通信" class="headerlink" title="微前端应用通信"></a>微前端应用通信</h3><p>微前端应用应当保持隔离, 但在实际应用中共享是不可避免的。比如：函数、组件、业务逻辑、环境变量、API 接口、UI 状态</p>
<ul>
<li>常见的实现方式：<code>postMessage</code>、<code>storage</code>、<code>url</code>、<code>SharedWorker</code> <code>WebWorker</code>, <code>import / export</code>, <code>global store</code>(比如 <code>redux</code>, <code>pinia</code>)</li>
<li><code>props</code>, 在微前端挂载的时候可以通过 <code>customProps</code> 传递 token 之类的参数</li>
<li>推荐可以使用事件发射器的模式<ul>
<li><strong>rxjs</strong>, 是一个很成熟的响应式的库</li>
<li>使用 (CustomEvents)[developer.mozilla.org/en-US/docs/Web/Events/Creating_and_triggering_events] 来实现发布/订阅模式</li>
</ul>
</li>
</ul>
<h3 id="css-隔离"><a href="#css-隔离" class="headerlink" title="css 隔离"></a>css 隔离</h3><p>css 隔离有很多种方式</p>
<ul>
<li><code>命名约定</code>，唯一前缀或遵循特定命名格式</li>
<li><code>CSS Modules</code>, CSS class 在编译期间由打包工具转换为唯一的、本地范围的类名</li>
<li><code>Styled Components</code>, 在运行时动态创建样式元素。</li>
<li><code>Shadow Dom</code> 封装 HTML 和 CSS</li>
</ul>
<h3 id="import-map"><a href="#import-map" class="headerlink" title="import map"></a>import map</h3><ul>
<li><p>在浏览器中支持 <code>裸说明符</code>, 旧版本浏览器需要<code>polyfill</code>(例如 <code>systemjs</code>, <code>es-module-shims</code>), 并手动映射依赖项</p>
<ul>
<li>裸说明符(bare specifier) 是指通过模块名称导入该模块, 而不是通过文件路径、URL 或协议, 比如  <code>import &#39;react&#39;</code></li>
<li>在 nodejs 中, 根据 <code>package.json</code> 映射 <code>node_modules</code> 来解析 <code>裸说明符</code></li>
<li>在浏览器中, 打包工具在构建时将 <code>裸说明符</code> 映射到特定文件，或使用 <code>import map</code>(例如 <code>vite</code>)</li>
</ul>
</li>
<li><p>允许直接从 <code>CDN</code> 导入模块</p>
</li>
<li><p>允许自定义模块的解析方式, 例如重定向到不同版本或实现的包</p>
</li>
<li><p>根据范围对特定模块进行不同的映射</p>
  <figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">&quot;imports&quot;</span>: &#123;</span><br><span class="line">		<span class="attr">&quot;react&quot;</span>: <span class="string">&quot;https://cdn.skypack.dev/react@17&quot;</span></span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="attr">&quot;scopes&quot;</span>: &#123; <span class="comment">// Inside /app/, it resolves to version 18.</span></span><br><span class="line">		<span class="attr">&quot;/app/&quot;</span>: &#123;</span><br><span class="line">		<span class="attr">&quot;react&quot;</span>: <span class="string">&quot;https://cdn.skypack.dev/react@18&quot;</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h3 id="模块类型"><a href="#模块类型" class="headerlink" title="模块类型"></a>模块类型</h3><ul>
<li><p><code>in-browser</code> / <code>build-time</code> 模块</p>
<ul>
<li><code>in-browser</code> 模块<ul>
<li>模块在运行时由浏览器直接加载, 无需任何预处理或捆绑, 例如 <code>&lt;script type=&quot;module&quot;&gt;</code></li>
</ul>
</li>
<li><code>build-time</code> 模块<ul>
<li>需要经过预处理或捆绑的模块</li>
</ul>
</li>
</ul>
</li>
<li><p><code>ES 模块</code> (ESM), 浏览器和 nodejs 支持</p>
<ul>
<li><code>import</code> 和 <code>export</code> 在编译时进行静态解析</li>
<li><code>Tree-Shaking</code>, 打包工具可以在构建时自动删除未使用的导出以优化代码以及减少体积</li>
<li><code>strict mode</code> 为默认开启</li>
<li>作用域隔离由 <code>module scope</code> 天然支持</li>
</ul>
</li>
<li><p><code>CommonJS</code> (CJS), nodejs 支持</p>
<ul>
<li><code>require</code> 和 <code>module.exports</code> 在运行时动态解析</li>
</ul>
</li>
<li><p><code>IIFE</code> (立即调用函数表达式), 浏览器支持</p>
<ul>
<li>模块打包为自执行函数, 在现代模块系统出现之前使用</li>
</ul>
</li>
<li><p><code>AMD</code> (异步模块定义), 浏览器支持</p>
<ul>
<li>需要 <code>RequireJS</code>, 使用其 <code>define</code> 函数定义</li>
</ul>
</li>
<li><p><code>UMD</code> (通用模块定义), 通用</p>
<ul>
<li>在浏览器中用作 <code>AMD</code>, 在 Node.js 中用作 <code>CommonJS</code></li>
<li>在没有模块加载器的环境中自行执行</li>
</ul>
</li>
<li><p><code>SystemJS</code>, 通用</p>
<ul>
<li>基于 ESM 规范的模块加载器, 支持动态加载多种格式, 包括 <code>CommonJS</code> 和 <code>AMD</code></li>
<li>运行时动态加载</li>
</ul>
</li>
</ul>
<h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><p>官网有的教程我就不赘述了，相关传送: <a href="single-spa.js.org/docs/ecosystem-vue">vue</a>, <a href="single-spa.js.org/docs/ecosystem-vite">vite</a>，建议先过一遍</p>
<ul>
<li><strong>共享通用包</strong>，在主应用程序以及微应用中，谁先加载共享包，就把共享包注册到 import map 中, 那么后续的子应用的对应引用都将被 import map 重定向到已经加载的资源<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// import map, 可以在某个应用加载完共享包后设置 import map, 将其余的应用的重定向到当前应用的包地址</span></span><br><span class="line"><span class="keyword">const</span> setImportMap = <span class="function">(<span class="params">myModulePath</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> importmap = <span class="built_in">document</span>.createElement(<span class="string">&quot;script&quot;</span>)</span><br><span class="line">    importmap.type =  <span class="string">&quot;importmap&quot;</span></span><br><span class="line">    <span class="keyword">const</span> apps = [<span class="string">&quot;app1&quot;</span>, <span class="string">&quot;app2&quot;</span>]</span><br><span class="line">    <span class="keyword">const</span> json = &#123;</span><br><span class="line">      <span class="attr">imports</span>: &#123;</span><br><span class="line">        ...Object.fromEntries(apps.map(<span class="function"><span class="params">i</span> =&gt;</span> ([<span class="string">`/micoFrontendApps/<span class="subst">$&#123;i&#125;</span>/modules/`</span>,  <span class="string">`<span class="subst">$&#123;myModulePath&#125;</span>`</span>]))),</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    importmap.innerText = <span class="built_in">JSON</span>.stringify(json)</span><br><span class="line">    <span class="built_in">document</span>.querySelector(<span class="string">&quot;head&quot;</span>)?.appendChild(importmap)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong>关于包在 import map 中的引用有两种方式可以参考</strong></p>
<ul>
<li><p>如果一个包在项目里接近于全量引入，那么可以考虑在 <code>import map</code> 中设置 cdn 来重定向，这是最简单的方式</p>
</li>
<li><p>如果相反，项目只用到了部分功能，那么我们可能不想全量引入，我们可能需要在打包时通过去除不必要的导出缩小加载的大小，缩短运行时的加载时间，这时我们就可以不改变当下的 <code>npm install &amp; import</code> 的方式，在打包的时候做一些处理来构建通用包(vite配置在最后)</p>
</li>
<li><p><strong>设置 vue 作为共享包</strong>, <code>vue</code> 有一些内部工具包，比如 <code>vue/runtime-core</code> 等，为了使用方便，vue 导入并重新导出了这些工具包里的 module， 这样我们就可以直接从 vue 导入</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; computed, triggerRef, getCurrentScope, customRef&#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span><br><span class="line">  <span class="comment">// `triggerRef`, `getCurrentScope`, `customRef` 并不直接属于 vue 核心包</span></span><br><span class="line"><span class="keyword">import</span> &#123; computed, triggerRef, getCurrentScope, customRef&#125; <span class="keyword">from</span> <span class="string">&quot;@vue/reactivity&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>比如这些工具函数 <code>triggerRef</code>, <code>getCurrentScope</code>, <code>customRef</code>, 我们可以直接从 vue 导入，但其实它们并不直接属于 vue 核心包，即使使用了 <code>* as</code> 语法或者副作用导入(<code>Side-Effect Imports</code>)，如果没有明确使用依然会被  <code>tree shaking</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> vue <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(vue.triggerRef) <span class="comment">// 如果没有明确使用这个函数依然会被 tree shaking</span></span><br></pre></td></tr></table></figure>

<ul>
<li>在设置共享包的时候，vue 核心包是必需的包，但是这些子包却不一定，如果我们只将 vue 设置为共享包，那么 vite 会默认其子包与 vue 共享一个命名空间，也就是会将它们打包在一起</li>
<li>比如某一个应用使用了<code>@vue/reactivity</code> 里的 <code>triggerRef</code>，但是其他应用没有用到，那么这些应用的共享包就不会有这个函数，所以我们最好把 vue 主包和其子包分开</li>
</ul>
</li>
<li><p><strong>引用规范</strong>: 下面两行代码在构建时生成两个模块名称 <code>pinia</code> <code>Pinia</code>,  生成重复的引用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> pinia <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> Pinia <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>vite 静态资源处理</strong>，在主应用中方位微前端应用的时候，某些静态可能会出现 404 的情况</p>
</li>
<li><p>导入静态文件时, vite 会返回已解析的公共 URL</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logo <span class="keyword">from</span> <span class="string">&#x27;./logo.png&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(logo);</span><br></pre></td></tr></table></figure>
<p>通过 <code>new URL(url, import.meta.url)</code>, 也可以获取完整的资源地址 然后根据需要更改来源<br><code>server.origin</code>, 定义开发调试阶段生成的资源的 origin</p>
</li>
</ul>
<p>vite 打包配置供参考</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createHash &#125; <span class="keyword">from</span> <span class="string">&#x27;crypto&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> vitePluginSingleSpa <span class="keyword">from</span> <span class="string">&#x27;vite-plugin-single-spa&#x27;</span></span><br><span class="line"><span class="keyword">import</span> cssInjectedByJsPlugin <span class="keyword">from</span> <span class="string">&#x27;vite-plugin-css-injected-by-js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sharedPackages = [<span class="string">&quot;vue&quot;</span>, <span class="string">&quot;vue-router&quot;</span>, <span class="string">&quot;axios&quot;</span>]</span><br><span class="line">defineConfig(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="comment">// 默认情况下, Vite 将 css 提取到单独的样式文件中, 这是为了优化加载, 实现更好的缓存和样式更新</span></span><br><span class="line">    <span class="comment">// 但在 single-spa 微应用中, 只需要一个 js 单个入口点, 可以通过插件将 css 内联到 js, 或者在生命周期中通过操作 dom 的方式添加 style</span></span><br><span class="line">    cssInjectedByJsPlugin(),</span><br><span class="line">    <span class="comment">// SingleSpa 插件</span></span><br><span class="line">    vitePluginSingleSpa(&#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;mife&#x27;</span>,</span><br><span class="line">      <span class="attr">serverPort</span>: <span class="number">4101</span>,</span><br><span class="line">      <span class="attr">spaEntryPoints</span>: path.resolve(__dirname, <span class="string">&#x27;../src/main.ts&#x27;</span>),</span><br><span class="line">      <span class="attr">assetFileNames</span>: <span class="string">&#x27;assets/[name]-[hash][extname]&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">    <span class="comment">// 显式的包含共享包，确保被打包</span></span><br><span class="line">    <span class="attr">optimizeDeps</span>: &#123;</span><br><span class="line">      <span class="attr">include</span>: sharedPackages,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">build</span>: &#123;</span><br><span class="line">      <span class="attr">rollupOptions</span>: &#123;</span><br><span class="line">        <span class="comment">// 对于入口模块, Rollup 在保留模块签名(export 形状) 严格程度, 同上一条, 在共享包的场景下, 我们可能希望固定内部变量名词</span></span><br><span class="line">        <span class="attr">preserveEntrySignatures</span>: <span class="string">&quot;strict&quot;</span>, </span><br><span class="line">        <span class="attr">output</span>: &#123;</span><br><span class="line">          <span class="comment">// 默认情况下, Rollup 为了压缩代码会把内部变量导出为单个字母的变量</span></span><br><span class="line">          <span class="attr">minifyInternalExports</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">chunkFileNames</span>: <span class="function">(<span class="params">preRenderedChunk</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123; name, moduleIds &#125; = preRenderedChunk</span><br><span class="line">            <span class="comment">//  // 可用于将共享包与其他模块单独存放, 便于后续重定向</span></span><br><span class="line">            <span class="keyword">if</span> (sharedPackages.includes(<span class="string">`<span class="subst">$&#123;name&#125;</span>`</span>)) <span class="keyword">return</span> <span class="string">`modules/<span class="subst">$&#123;name&#125;</span>.js`</span></span><br><span class="line">            <span class="keyword">const</span> modulePaths = moduleIds.sort().join(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">            <span class="keyword">const</span> hash = createHash(<span class="string">&#x27;md5&#x27;</span>).update(modulePaths || <span class="string">&quot;&quot;</span>).digest(<span class="string">&#x27;hex&#x27;</span>).slice(<span class="number">0</span>, <span class="number">8</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">`chunks/<span class="subst">$&#123;name&#125;</span>-<span class="subst">$&#123;hash&#125;</span>.js`</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">assetFileNames</span>: <span class="string">`assets/[name]-[ext].[ext]`</span>,</span><br><span class="line">          <span class="attr">entryFileNames</span>: <span class="string">`entry/[name]-[format].js`</span>,</span><br><span class="line">          <span class="comment">// 创建自定义的公共 chunk</span></span><br><span class="line">          <span class="attr">manualChunks</span>: &#123;</span><br><span class="line">            ...Object.fromEntries(sharedPackages.map(<span class="function">(<span class="params">i</span>) =&gt;</span> [i, [i]])),</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h2 id="QianKun"><a href="#QianKun" class="headerlink" title="QianKun"></a>QianKun</h2><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><p><code>QianKun</code> 是目前国内最流行的方案，基于 <code>Single-Spa</code> 构建, 依赖 <code>Webpack</code> 的 <code>Module Federation</code> 动态加载 <code>UMD</code> 或者 <code>SystemJS</code> 模块类型的微前端。</p>
<p><code>QianKun</code> 在 <code>Single-Spa</code> 之上，添加了很多开箱即用的特性</p>
<ul>
<li>以 html 为入口文件, 每个微前端都是一个典型的前端 app(以html 为入口)。如果是像我一样，是整合小型 app, 那么就不需要更改微前端的包结构。</li>
<li>内置 <code>跨应用通信</code>、<code>js 沙箱</code> 和 <code>css 隔离</code></li>
</ul>
<p><strong>整合 vite 打包的应用</strong>, 相关<a href="https://github.com/umijs/qiankun/issues/1257">issue</a></p>
<ul>
<li><code>QianKun</code> 作为非常成熟的方案，一开始也是我的首选，但我们项目的应用都是使用的 vite，而 <code>QianKun</code> 的很多特性都是依靠于 <code>Webpack Module Federation</code> 带来的, 和 vite 无法很好的结合在一起, 所以最后还是使用了 <code>single-spa</code>。</li>
<li>社区是有一些成熟的插件可以试试，但随着 <code>vite</code> , <code>QianKun</code> 及其依赖的不断更新，会出现一些新的问题，可以多看看插件的 issue。</li>
</ul>
<h3 id="js-沙箱"><a href="#js-沙箱" class="headerlink" title="js 沙箱"></a>js 沙箱</h3><ul>
<li><p><code>ProxySandbox</code> <code>LegacySandbox</code></p>
<ul>
<li>这两个都是使用 <code>Proxy</code></li>
<li><code>LegacySandbox</code> 是单例模式，即一个页面只有一个微应用时, <code>sandbox.loose</code><ul>
<li>使用 <code>Proxy</code> 包装 <code>window</code>, 并且监听 <code>window</code> 上的操作，把操作分为新增和更新然后存进不同的 map 里</li>
<li>避免了 diff 的操作，也有了恢复环境的依据</li>
</ul>
</li>
<li><code>ProxySandbox</code> 多例模式，页面有多个微应用时<ul>
<li>使用 proxy 为每一个微应用分配一个 <code>fakeWindow</code>, 当修改全局变量的时候，操作的是 <code>fakeWindow</code>, 这样就不会影响原生 <code>window</code>，使用的时候会优先从<code>fakeWindow</code>，找不到再去原生 <code>window</code></li>
<li><code>fakeWindow</code> 在微应用失焦的时候会被存起来以便聚焦的时候再用</li>
</ul>
</li>
</ul>
</li>
<li><p><code>SnapshotSandbox</code>, 当浏览器不支持 <code>Proxy</code> 时</p>
<ul>
<li>在微前端挂载时记录一个 <code>window</code> 的快照，也就是浅拷贝 window。当微前端卸载时, <code>QianKun</code> 将当前 <code>window</code> 与快照进行  <code>diff</code> 比较, 并将 <code>window</code> 恢复到其原始状态</li>
</ul>
</li>
</ul>
<h3 id="webpack-模块联盟-webpack-module-federation"><a href="#webpack-模块联盟-webpack-module-federation" class="headerlink" title="webpack 模块联盟(webpack module federation)"></a>webpack 模块联盟(webpack module federation)</h3><ul>
<li>每个微前端应用都捆绑其所有依赖项。在浏览器中, 如果下载了任何共享依赖项, 则后续微前端应用将重用该共享依赖项, 而无需重新下载</li>
</ul>
<h2 id="web-components"><a href="#web-components" class="headerlink" title="web components"></a>web components</h2><ul>
<li>通过将 DOM 树附加到某个 element, 并将该树的内部内容隐藏在页面中运行的 JavaScript 和 CSS 中。因此, 样式和行为的自然封装</li>
<li>应该非常适合小型单页 app，或者封装可重复使用的 UI 组件。如果是构建和管理大型复杂的应用可能会很麻烦</li>
</ul>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><a href="https://single-spa.js.org/">single-spa 官方文档</a></li>
<li><a href="https://single-spa.js.org/docs/recommended-setup">single-spa recommended-setup</a></li>
<li><a href="https://juejin.cn/post/7120407245728268325?from=search-suggest#heading-1">微前端qiankun 沙箱与样式隔离的实现原理？</a></li>
<li><a href="https://github.com/umijs/qiankun/issues/1257">issue：想问一下，未来是否考虑支持 vite</a></li>
<li><a href="https://github.com/umijs/qiankun/issues/337">issue: Hi from the single-spa core team</a></li>
</ul>
]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
      <tags>
        <tag>micro_frontend</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql</title>
    <url>/2018/10/10/mysql/</url>
    <content><![CDATA[<p>sql语法特点：</p>
<ul>
<li><p>没有””双引号，字符串使用’’单引号包含；</p>
</li>
<li><p>没有逻辑相等，赋值和逻辑相等都是=；</p>
</li>
<li><p>类型不再是最严格的，任何数据都可以包含在’’单引号内；</p>
</li>
<li><p>没有布尔值的概念，但是在视图中可以输入true/false；</p>
</li>
<li><p>它也有关系运算符：&gt; &lt; &gt;= &lt;= = &lt;&gt; !=，返回一个布尔值；</p>
</li>
<li><p>它也有逻辑运算符：！(not) &amp;&amp;(and) ||(or)；</p>
</li>
<li><p>它不区别大小写。</p>
</li>
<li><p>以下语句，user为表名, id,name,sex,card,phone,address为字段</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#数据库创建#</span></span><br><span class="line"><span class="string">&quot;create database&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;drop table if exists user&quot;</span></span><br><span class="line"><span class="comment"># 如果存在(if exists)就删除表</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果没有(if not exists)就新增表，设置id为主键，address为外键关联address表的id字段</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;create table if not exists user(</span></span><br><span class="line"><span class="string">    id int auto_increment primary key,</span></span><br><span class="line"><span class="string">    name varchar(5),</span></span><br><span class="line"><span class="string">    sex  char(1),</span></span><br><span class="line"><span class="string">    card  char(18),</span></span><br><span class="line"><span class="string">    phone  char(11),</span></span><br><span class="line"><span class="string">    address varchar(30),</span></span><br><span class="line"><span class="string">    foreign key(address) references address(id))&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改自增长Id,数据库新增的数据会从1000开始但是原来的数据不会改变</span></span><br><span class="line"><span class="string">&quot;alter table user auto_increment=1000&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新增数据库表字段plus</span></span><br><span class="line"><span class="string">&quot;alter table user add plus varchar(8)&quot;</span></span><br><span class="line"><span class="comment"># --------------------------插入数据----------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># 数据插入时一定要注意 类型对应，数量对应，顺序对应</span></span><br><span class="line"><span class="comment"># 字符串值必须包含在&#x27;&#x27;以内，赋值可以使用default,null</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入单条数据，如果不列出字段名mysql会按照顺序添加</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;insert into user(name, sex, id_card, phone, address)</span></span><br><span class="line"><span class="string">        values (&#x27;李四&#x27;, &#x27;女&#x27;, &#x27;511569845612354879&#x27;, &#x27;10086&#x27;, &#x27;太古里77号&#x27;)&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 批量插入数据</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;insert into user(name, sex, id_card, phone, address)</span></span><br><span class="line"><span class="string">        values (%s, %s, %s, %s, %s)&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------------------------------------查询数据--------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># order by 对查询结果进行排序 select 字段1,字段2,字段3 from 表名 order by 字段 desc(降序)||asc(升序)</span></span><br><span class="line"><span class="string">&quot;select address,id from user order by id desc&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 去重复查询 select distinct 字段 from 表名</span></span><br><span class="line"><span class="string">&quot;select distinct address from user&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分页查询 limit select 字段1，字段2 from 表名 limit 初始位置，记录数</span></span><br><span class="line"><span class="string">&quot;select id, name, sex, id_card from user limit 3,6&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 精准查询 in 只查找括号内的数据； not in 则相反</span></span><br><span class="line"><span class="string">&quot;select * from user where ID in (1001,1003)&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 精准查询 between and 查找1001-1003范围内的数据；not between and 相反</span></span><br><span class="line"><span class="string">&quot;select * from user where ID between 1001 and 1003&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 模糊查询 like (% 代表任意字符 _ 代表单个字符)；not like相反</span></span><br><span class="line"><span class="string">&quot;select * from user where name like &#x27;_麻%&#x27;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多条件查询 and 关键字</span></span><br><span class="line"><span class="string">&quot;select * from user where sex=&#x27;女&#x27; and address=&#x27;太古里77号&#x27;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多条件查询 or 关键字 只需满足一个条件</span></span><br><span class="line"><span class="string">&quot;select * from user where name=&#x27;王麻子子&#x27; or address=&#x27;太古里77号&#x27; &quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多表查询，两个表comment，movie</span></span><br><span class="line"><span class="comment"># 语法：select * from 表1(左表) left join 表2(右表) on 表2.字段 = 表1.字段</span></span><br><span class="line"><span class="string">&quot;select * from comment left join movie on movie.id = comment.movieid&quot;</span></span><br><span class="line"><span class="comment"># inner join / join单独用   返回所有匹配的行</span></span><br><span class="line"><span class="comment"># left join     不论是否匹配会返回“left join”左边表所有的行，匹配不上的字段为null</span></span><br><span class="line"><span class="comment"># right join    和left join相反，会返回右边表的所有的行</span></span><br><span class="line"><span class="comment"># full join     只要存在一条匹配就会返回两个表所有的行</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ------删除数据和更新数据 or,and,between and,like等关键字可以查询到多条数据然后批量删除或者更新-------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除数据</span></span><br><span class="line"><span class="comment">#delete [from] 表名 where 条件</span></span><br><span class="line"><span class="string">&quot;delete from user where name=&#x27;王麻子子&#x27; or address=&#x27;太古里77号&#x27;&quot;</span></span><br><span class="line"><span class="comment"># 数据库清空</span></span><br><span class="line"><span class="string">&quot;truncate table user&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新数据</span></span><br><span class="line"><span class="string">&quot;update user set name = &#x27;更新&#x27; where ID in (1005,1006)&quot;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://www.cnblogs.com/esofar/p/6185210.html">https://www.cnblogs.com/esofar/p/6185210.html</a> 史上最全的MSSQL复习笔记</p>
]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mpvue小程序以及微信直播踩坑总结</title>
    <url>/2018/08/07/mpvue/</url>
    <content><![CDATA[<p>前段时间刚写完一个mpvue的小程序，现在得闲必须赶紧记录和总结一下，不然很多东西又要忘了</p>
<p>我是比较熟悉vue的语法，但是也犹豫过是用原生还是用mpvue，因为那时候原生小程序已经相当成熟而mpvue才刚出来（踩坑和填坑的前人还很少）</p>
<p>所以我学习了几天原生的框架和语法，果断选择了mpvue，真的是没有对比就没有伤害，对比原生体验不要太好</p>
<p>mpvue是一个使用 Vue.js 开发小程序的前端框架，他是将我们写的vue文件重新编译成wxml等文件，最后的底层实现还是用的小程序语法，所以原生小程序语法也是比较重要的，而且像很多下拉刷新，到底部请求下一页什么的等等很多地方也是要用到小程序api的，所以建议大家在入坑之前还是了解一些小程序语法比较好</p>
<p>附上<a href="http://mpvue.com/#_1">官方文档</a></p>
<h1 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h1><p>使用官方的5分钟上手，生成一个基本框架，后来开发也没有手动修改过他的配置</p>
<p>用到了4个插件</p>
<h2 id="mpvue-weui-ui库，相当方便轻量好使"><a href="#mpvue-weui-ui库，相当方便轻量好使" class="headerlink" title="mpvue-weui    ui库，相当方便轻量好使"></a>mpvue-weui    ui库，相当方便轻量好使</h2><p>官网地址：<a href="http://kuangpf.com/mpvue-weui/#/">http://kuangpf.com/mpvue-weui/#/</a></p>
<h2 id="mpvue-toast-一个基于mpvue的简单弹窗组件"><a href="#mpvue-toast-一个基于mpvue的简单弹窗组件" class="headerlink" title="mpvue-toast  一个基于mpvue的简单弹窗组件"></a>mpvue-toast  一个基于mpvue的简单弹窗组件</h2><p>因为mpvue目前还不支持全局的组件，所以没有办法像vue组件引入一次就能在所有页面使用，但是mpvue团队已经在考虑新增全局组件功能了</p>
<p>github地址：<a href="https://github.com/linrui1994/mpvue-toast">https://github.com/linrui1994/mpvue-toast</a> </p>
<h2 id="sass-不多介绍"><a href="#sass-不多介绍" class="headerlink" title="sass  不多介绍"></a>sass  不多介绍</h2><p>全局安装：npm install sass-loader node-sass –save-dev </p>
<p>在style节点加上lang=”scss”，这样就可以愉快地使用sass进行开发了</p>
<h2 id="mpvue-router-patch-在mpvue-中使用-vue-router-兼容的路由写法"><a href="#mpvue-router-patch-在mpvue-中使用-vue-router-兼容的路由写法" class="headerlink" title="mpvue-router-patch   在mpvue 中使用 vue-router 兼容的路由写法"></a>mpvue-router-patch   在mpvue 中使用 vue-router 兼容的路由写法</h2><p>当知道mpvue不支持vue-router的时候我还是非常难受，还好mpvue团队后面发布了这个插件，非常简单好用</p>
<p>github地址：<a href="https://github.com/F-loat/mpvue-router-patch">https://github.com/F-loat/mpvue-router-patch</a></p>
<p>接下来的3个插件我没有用过但是和mpvue-router-patch一样是mpvue团队发布的，感觉应该也不差，也推荐给大家如果需要可以花时间了解一下</p>
<h2 id="mpvue-echarts-适用于-Mpvue-的-ECharts-组件"><a href="#mpvue-echarts-适用于-Mpvue-的-ECharts-组件" class="headerlink" title="mpvue-echarts    适用于 Mpvue 的 ECharts 组件"></a>mpvue-echarts    适用于 Mpvue 的 ECharts 组件</h2><p>github地址：<a href="https://github.com/F-loat/mpvue-echarts">https://github.com/F-loat/mpvue-echarts</a></p>
<h2 id="微信小程序富文本解析组件-适用于-Mpvue-的微信小程序富文本解析自定义组件"><a href="#微信小程序富文本解析组件-适用于-Mpvue-的微信小程序富文本解析自定义组件" class="headerlink" title="微信小程序富文本解析组件  适用于 Mpvue 的微信小程序富文本解析自定义组件"></a>微信小程序富文本解析组件  适用于 Mpvue 的微信小程序富文本解析自定义组件</h2><p>github地址：<a href="https://github.com/F-loat/mpvue-wxParse">https://github.com/F-loat/mpvue-wxParse</a></p>
<h2 id="mpvue-entry自动生成各页面的入口文件-集中式页面配置，自动生成各页面的入口文件，优化目录结构，支持新增页面热更新"><a href="#mpvue-entry自动生成各页面的入口文件-集中式页面配置，自动生成各页面的入口文件，优化目录结构，支持新增页面热更新" class="headerlink" title="mpvue-entry自动生成各页面的入口文件  集中式页面配置，自动生成各页面的入口文件，优化目录结构，支持新增页面热更新"></a>mpvue-entry自动生成各页面的入口文件  集中式页面配置，自动生成各页面的入口文件，优化目录结构，支持新增页面热更新</h2><p>github地址：<a href="https://github.com/F-loat/mpvue-entry">https://github.com/F-loat/mpvue-entry</a></p>
<h2 id="关于ajax请求封装，拿走不谢"><a href="#关于ajax请求封装，拿走不谢" class="headerlink" title="关于ajax请求封装，拿走不谢"></a>关于ajax请求封装，拿走不谢</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> urlPath = <span class="string">&#x27;&#x27;</span> <span class="comment">// 项目的域名</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">post</span>(<span class="params">url, data</span>) </span>&#123;</span><br><span class="line">  wx.showLoading(&#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;努力加载中&#x27;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="comment">// 由于微信不会保存后端用于登陆验证的cookie，这里需要自己从登陆返回的数据里取到cookie，然后本地缓存，请求时在header里带上cookie</span></span><br><span class="line">  <span class="keyword">let</span> header = &#123;&#125; </span><br><span class="line">  url === <span class="string">&#x27;user/loginworker&#x27;</span> <span class="comment">// 通过传进来的url判断是否是登陆页</span></span><br><span class="line">    ? header = &#123;&#125; </span><br><span class="line">    : header = &#123;</span><br><span class="line">      <span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;cookie&#x27;</span>: wx.getStorageSync(<span class="string">&quot;sessionid&quot;</span>)</span><br><span class="line">    &#125; </span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    wx.request(&#123;</span><br><span class="line">      <span class="attr">url</span>: urlPath + url,</span><br><span class="line">      <span class="attr">data</span>: data,</span><br><span class="line">      <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">      <span class="attr">header</span>: header, <span class="function"><span class="title">success</span>(<span class="params">res</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res)</span><br><span class="line">        <span class="keyword">if</span> (res.statusCode === <span class="number">200</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (res.data === <span class="number">9999</span>) &#123; <span class="comment">// 后端返回9999表示cookie失效</span></span><br><span class="line">            wx.showModal(&#123;</span><br><span class="line">              <span class="attr">content</span>: <span class="string">&#x27;登陆超时请重新登陆&#x27;</span>,</span><br><span class="line">              <span class="attr">showCancel</span>: <span class="literal">false</span>,</span><br><span class="line">              <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (res.confirm) &#123;</span><br><span class="line">                  wx.navigateTo(&#123;</span><br><span class="line">                    <span class="attr">url</span>: <span class="string">&#x27;../../pages/login/main&#x27;</span>,</span><br><span class="line">                  &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (res.data.code &amp;&amp; res.data.code !== <span class="number">200</span>) &#123; <span class="comment">// 若返回coode码且不等于200表示传入参数有问题</span></span><br><span class="line">            res.message = res.data.message, reject(res)</span><br><span class="line">          &#125; <span class="keyword">else</span> resolve(res)</span><br><span class="line">            <span class="comment">// 存储cookie</span></span><br><span class="line">          res.data.message === <span class="string">&#x27;登录成功。&#x27;</span> ? wx.setStorageSync(<span class="string">&quot;sessionid&quot;</span>, res.header[<span class="string">&quot;Set-Cookie&quot;</span>]) : <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">          res.message = <span class="string">&#x27;服务器错误请求失败&#x27;</span></span><br><span class="line">          reject(res)</span><br><span class="line">        &#125;</span><br><span class="line">        wx.hideLoading()</span><br><span class="line">      &#125;, <span class="function"><span class="title">fail</span>(<span class="params">err</span>)</span> &#123;</span><br><span class="line">        err.message = <span class="string">&#x27;请求超时请稍后再试&#x27;</span></span><br><span class="line">        reject (err)</span><br><span class="line">        wx.hideLoading()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="生命周期钩子"><a href="#生命周期钩子" class="headerlink" title="生命周期钩子"></a>生命周期钩子</h2><p>created是vue的生命周期在mpvue里所有页面的created函数会在项目加载的时候被一起调用，可用性不大，可以使用onShow()代替，但是onShow()只有在隐藏又显示后才会显示,也就是第一次加载不会执行</p>
<p> created() {<br>    console.log(‘created’)<br>  },<br>  mounted() {<br>    console.log(‘mounted’)<br>  },<br>  onLoad() {<br>    console.log(‘onLoad’)<br>  },<br>  onShow() {<br>    console.log(‘onShow’)<br>  },<br>  onUnload() {<br>    console.log(‘onUnload’)<br>  },<br>  onHide() {<br>    console.log(‘onHide’)<br>  },</p>
<h2 id="页面跳转后并没有销毁页面实例"><a href="#页面跳转后并没有销毁页面实例" class="headerlink" title="页面跳转后并没有销毁页面实例"></a>页面跳转后并没有销毁页面实例</h2><p>比如一个搜索页面，页面第一次进来所有的数据都是空的，但你搜索一次之后，input框就有值了，这个时候再跳转到其他页面或者返回之后再进入这个页面那个值依然存在，页面跳转后并没有销毁页面实例，而是将其推入页面栈中，所以会保存之前的旧的数据，目前为止看到的比较统一的解决办法就是：在onShow()或者onLoad()手动清空</p>
<h2 id="关于微信直播"><a href="#关于微信直播" class="headerlink" title="关于微信直播"></a>关于微信直播</h2><p>这个小程序需要引入监控相当于是直播功能，这个组件也是有点坑</p>
<p>Live-player组件本身只能播放，如果想要在组件上加功能，像什么全屏静音播放暂停之类的功能需要使用wx.createLivePlayerContext()方法，而且由于live-player层级是最高的，如果你需要在组件上加功能比如点一下全屏再点下退出全屏或者加css样式，你必须写在 cover-view cover-image上面，直接加在live-player上是没用的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;live-player id=<span class="string">&#x27;liveInfo&#x27;</span> src=<span class="string">&quot;&quot;</span> mode=<span class="string">&quot;live&quot;</span> autoplay=<span class="string">&#x27;false&#x27;</span> @bindstatechange=<span class="string">&quot;statechange&quot;</span> binderror=<span class="string">&quot;error&quot;</span>&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">cover-image</span> @<span class="attr">click</span>=<span class="string">&quot;requestFullScreen&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">cover-image</span>&gt;</span></span></span><br><span class="line">&lt;/live-player&gt;</span><br></pre></td></tr></table></figure>

<p>你以为这样就完了嘛，不，如果你有一个直播列表，比如一个屏幕同时有一个以上的live-player组件那么你全屏的时候就会发现其余的组件因为层级的原因全部覆盖在你全屏的那个组件之上</p>
<p>解决办法：全屏是v-if隐藏其余的组件，退出时再显示</p>
<p>欢迎留言交流  (´▽`ʃ♡ƪ)</p>
]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
      <tags>
        <tag>mpvue</tag>
      </tags>
  </entry>
  <entry>
    <title>nodejs使用cors跨域</title>
    <url>/2018/09/28/node_cors/</url>
    <content><![CDATA[<p>相关文章：<a href="https://tong-h.github.io/2017/12/01/Nginx%E7%9A%84%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E8%B7%A8%E5%9F%9F/">Nginx的反向代理跨域</a></p>
<p>最近在学习express，遇到了跨域问题….</p>
<h1 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h1><p>CORS是一个W3C标准，全称是”跨域资源共享”（Cross-origin resource sharing）<br>跨域资源共享（ CORS ）机制允许 Web 应用服务器进行跨域访问控制，从而使跨域数据传输得以安全进行。浏览器支持在 API 容器中（例如 XMLHttpRequest 或 Fetch ）使用 CORS，以降低跨域 HTTP 请求所带来的风险。</p>
<h1 id="预检请求？"><a href="#预检请求？" class="headerlink" title="预检请求？"></a>预检请求？</h1><p>我自己在设置跨域的时候碰到的很多报错其实都是因为预检请求</p>
<p>** cors将请求场景分为 简单请求 和 非简单请求 **</p>
<p>简单请求：</p>
<ul>
<li>使用的方法是GET，HEAD，POST这三种之一</li>
<li>Content-Type 的值是text/plain、 multipart/form-data、 application/x-www-form-urlencoded 这三种之一</li>
</ul>
<p>那么浏览器检测到该请求非简单请求，会先发送一个预检请求到服务器，以获知服务器是否允许该实际请求</p>
<p>服务器会从预检请求拿到的以下3个信息去和服务器的Response的header对比，来决定是否允许该请求</p>
<ul>
<li>Access-Control-Request-Method ：实际请求的方法</li>
<li>Access-Control-Request-Headers：实际请求所携带的请求header字段</li>
<li>origin：实际请求的源站，域名</li>
</ul>
<h1 id="服务器header使用字段"><a href="#服务器header使用字段" class="headerlink" title="服务器header使用字段"></a>服务器header使用字段</h1><h2 id="Access-Control-Allow-Origin"><a href="#Access-Control-Allow-Origin" class="headerlink" title="Access-Control-Allow-Origin"></a>Access-Control-Allow-Origin</h2><p>** 必填字段，值：一个域名， *(表示接受任意域名的请求)，也可以读取请求headers中的origin字段 **</p>
<p>如果请求的源与该字段不符合服务器会返回一个正常的HTTP回应，状态码可能为200，但不会包含Access-Control-开头的Origin、Credentials、Headers3个字段，浏览器发现，回应的头信息没有包含Access-Control-Allow-Origin字段就会抛出一个错误，会被XMLHttpRequest的onerror回调函数捕获</p>
<h2 id="Access-Control-Request-Method"><a href="#Access-Control-Request-Method" class="headerlink" title="Access-Control-Request-Method"></a>Access-Control-Request-Method</h2><p>** 可选字段，表明服务器支持的所有跨域请求的方法 **</p>
<p>如果你用到除了HEAD，GET，POST之外的方法那么这个字段为必填</p>
<h2 id="Access-Control-Allow-Credentials-可选字段"><a href="#Access-Control-Allow-Credentials-可选字段" class="headerlink" title="Access-Control-Allow-Credentials 可选字段"></a>Access-Control-Allow-Credentials 可选字段</h2><p>** 该字段若存在便只能为true，表示服务器许可Cookie可以包含在请求中一起发给服务器 **</p>
<p>对于某些浏览器即使服务器为true，有时候也需要前端设置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.withCredentials = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure>

<p>若为true Access-Control-Allow-Origin字段便不能为*，必须明确指定域名，Cookie遵循同源政策，只有用服务器域名设置的Cookie才会上传，且（跨源）原网页代码中的document.cookie也无法读取服务器域名下的Cookie。</p>
<h2 id="Access-Control-Allow-Headers"><a href="#Access-Control-Allow-Headers" class="headerlink" title="Access-Control-Allow-Headers"></a>Access-Control-Allow-Headers</h2><p>** 可选字段，设置Response的额外发送的header字段 **</p>
<p>CORS请求时，XMLHttpRequest对象的getResponseHeader()方法只能拿到6个基本字段：Cache-Control、Content-Language、Content-Type、Expires、Last-Modified、Pragma</p>
<p>如果想拿到其他字段，就必须在Access-Control-Expose-Headers里面指定。</p>
<h2 id="Access-Control-Max-Age"><a href="#Access-Control-Max-Age" class="headerlink" title="Access-Control-Max-Age"></a>Access-Control-Max-Age</h2><p>** 设置预警请求的结果能够被缓存多久，单位为秒 **</p>
<h1 id="express如何使用cors跨域"><a href="#express如何使用cors跨域" class="headerlink" title="express如何使用cors跨域"></a>express如何使用cors跨域</h1><p>在express种使用cors跨域是需要使用第三方模块</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">npm install <span class="comment">--save cors</span></span><br></pre></td></tr></table></figure>
<p>在app.js中写入以下设置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">示例代码</span><br><span class="line">app.all(<span class="string">&quot;*&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  res.header(<span class="string">&quot;Access-Control-Allow-Credentials&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">  res.header(<span class="string">&quot;Access-Control-Allow-Headers&quot;</span>,<span class="string">&quot;Origin, X-Requested-With, Content-Type, Accept&quot;</span>);</span><br><span class="line">  res.header(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, req.headers.origin);</span><br><span class="line">  res.header(<span class="string">&quot;Access-Control-Allow-Methods&quot;</span>, <span class="string">&quot;PUT,POST,GET,DELETE,OPTIONS&quot;</span>);</span><br><span class="line">  next();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h1><p>HTTP访问控制（CORS） <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS</a></p>
<p>欢迎留言交流  (´▽`ʃ♡ƪ)</p>
]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
      <tags>
        <tag>跨域</tag>
      </tags>
  </entry>
  <entry>
    <title>nodejs之接收formdata表单</title>
    <url>/2018/10/09/node_fromdata/</url>
    <content><![CDATA[<p>最近在学习express，写一个vue+express+mysql的小demo，需要上传一张封面图和一些其他的表单字段….</p>
<h1 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h1><p>formdata主要用于发送表单数据，将数据编译成键值对的形式使用XMLHttpRequest来发送，一般的请求通常使用序列化的方法发送formdata格式的数据，所以formdata对象比较常见的应用场景是发送文件或者通过HTML表单创建的formdata对象用以发送表单<br>** 那么使用express搭建的nodejs的后台如何获取前台发送的formdata格式的数据 **</p>
<h1 id="Multer中间件"><a href="#Multer中间件" class="headerlink" title="Multer中间件"></a>Multer中间件</h1><p>Multer 是一个 node.js 中间件，用于处理 multipart/form-data 类型的表单数据</p>
<p>首先安装并存储在packjson中</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">npm install <span class="comment">--save multer</span></span><br></pre></td></tr></table></figure>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>Multer 需要接受一个 options 对象，用于对文件上传时做一些控制，比如文件存储，大小限制等<br>所以在路由文件中除了引入 multer 模块还要设置 options 对象</p>
<ul>
<li><p>dest or storage: 在哪里存储文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一般情况下只要设置 dest 属性设置文件存储的位置</span></span><br><span class="line"><span class="keyword">var</span> multer  = <span class="built_in">require</span>(<span class="string">&#x27;multer&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> upload = multer(&#123; <span class="attr">dest</span>: <span class="string">&#x27;uploads/&#x27;</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;但如果你想要设置更多,那么需要使用storage代替dest&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> storage = multer.diskStorage(&#123;<span class="comment">// 磁盘存储引擎可以让你控制文件的存储</span></span><br><span class="line">  <span class="attr">destination</span>: <span class="function"><span class="keyword">function</span> (<span class="params">req, file, cb</span>) </span>&#123;</span><br><span class="line">    cb(<span class="literal">null</span>, <span class="string">&#x27;/tmp/my-uploads&#x27;</span>) <span class="comment">// 文件存储路径</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">filename</span>: <span class="function"><span class="keyword">function</span> (<span class="params">req, file, cb</span>) </span>&#123;</span><br><span class="line">    cb(<span class="literal">null</span>, file.fieldname + <span class="string">&#x27;-&#x27;</span> + <span class="built_in">Date</span>.now()) <span class="comment">// 文件名称</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">var</span> upload = multer(&#123; <span class="attr">storage</span>: storage &#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>fileFilter: 文件过滤器，控制哪些文件可以被接受,接收一个函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fileFilter</span> (<span class="params">req, file, cb</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 你可以通过判断file的参数来判断这个文件是否跳过或者上传以及报错</span></span><br><span class="line">  <span class="comment">// 拒绝这个文件</span></span><br><span class="line">  cb(<span class="literal">null</span>, <span class="literal">false</span>)</span><br><span class="line">  <span class="comment">// 接受这个文件</span></span><br><span class="line">  cb(<span class="literal">null</span>, <span class="literal">true</span>)</span><br><span class="line">  <span class="comment">// 发送一个错误:</span></span><br><span class="line">  cb(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;I don\&#x27;t have a clue!&#x27;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>limits: 限制上传的数据，接受一个对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;fieldNameSize&quot;</span>	<span class="comment">// field 名字最大长度	100 bytes</span></span><br><span class="line">  <span class="string">&quot;fieldSize&quot;</span>	<span class="comment">// field 值的最大长度	1MB</span></span><br><span class="line">  <span class="string">&quot;fields&quot;</span>	<span class="comment">// 非文件 field 的最大数量	无限</span></span><br><span class="line">  <span class="string">&quot;fileSize&quot;</span>	<span class="comment">// 在 multipart 表单中，文件最大长度 (字节单位)	无限</span></span><br><span class="line">  <span class="string">&quot;files&quot;</span>	<span class="comment">// 在 multipart 表单中，文件最大数量	无限</span></span><br><span class="line">  <span class="string">&quot;parts&quot;</span>	<span class="comment">// 在 multipart 表单中，part 传输的最大数量(fields + files)	无限</span></span><br><span class="line">  <span class="string">&quot;headerPairs&quot;</span>	<span class="comment">// 在 multipart 表单中，键值对最大组数	2000</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><ul>
<li><p>.single(fieldname)接受一个参数名为fieldname的文件<br>应用场景：单个文件上传 + 一些其他的表单字段</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.post(<span class="string">&#x27;/profile&#x27;</span>, upload.single(<span class="string">&#x27;avatar&#x27;</span>), <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// req.file 是 `avatar` 文件的信息</span></span><br><span class="line">  <span class="comment">// req.body 将具有文本域数据，如果存在的话</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li><p>.array(fieldname, maxCount) 接受一个参数名为fieldname的文件数组, 可选参数maxcount限制上传的最大数量<br>应用场景：适合参数名相同的多文件上传 + 一些其他的表单字段</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.post(<span class="string">&#x27;/photos/upload&#x27;</span>, upload.array(<span class="string">&#x27;photos&#x27;</span>, <span class="number">12</span>), <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// req.files 是 `photos` 文件数组的信息</span></span><br><span class="line">  <span class="comment">// req.body 将具有文本域数据，如果存在的话</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>.fields(fields) 接受一个对象数组<code>[&#123;name:&quot;&quot;,maxCount: 1&#125;,]</code>，每个对象应该具有 name 和可选的 maxCount 属性,<br>应用场景：适合参数名不同的多文件上传 + 一些其他的表单字段</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> cpUpload = upload.fields([&#123; <span class="attr">name</span>: <span class="string">&#x27;avatar&#x27;</span>, <span class="attr">maxCount</span>: <span class="number">1</span> &#125;, &#123; <span class="attr">name</span>: <span class="string">&#x27;gallery&#x27;</span>, <span class="attr">maxCount</span>: <span class="number">8</span> &#125;])</span><br><span class="line">app.post(<span class="string">&#x27;/cool-profile&#x27;</span>, cpUpload, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// req.files 是一个对象 (String -&gt; Array) 键是文件名，值是文件数组</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// 例如：</span></span><br><span class="line">  <span class="comment">//  req.files[&#x27;avatar&#x27;][0] -&gt; File</span></span><br><span class="line">  <span class="comment">//  req.files[&#x27;gallery&#x27;] -&gt; Array</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// req.body 将具有文本域数据，如果存在的话</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li><p>.none() 只接受文本域</p>
</li>
<li><p>.any() 接受一切。文件数组将保存在 req.files。</p>
</li>
</ul>
<h1 id="代码参考"><a href="#代码参考" class="headerlink" title="代码参考"></a>代码参考</h1><p>在demo中的应用场景，很简单的单张图片上传+其他表单字段</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> router = express.Router();</span><br><span class="line"><span class="keyword">var</span> multer = <span class="built_in">require</span>(<span class="string">&quot;multer&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> storage = multer.diskStorage(&#123; </span><br><span class="line">  <span class="attr">destination</span>: <span class="function"><span class="keyword">function</span>(<span class="params">req, file, cb</span>) </span>&#123;</span><br><span class="line">    cb(<span class="literal">null</span>, <span class="string">&quot;img&quot;</span>); </span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">filename</span>: <span class="function"><span class="keyword">function</span>(<span class="params">req, file, cb</span>) </span>&#123;</span><br><span class="line">     <span class="comment">// Multer 不会为你添加任何扩展名，所以完整的名字需要我们自己拼接</span></span><br><span class="line">    cb(<span class="literal">null</span>, <span class="built_in">Date</span>.now() + <span class="string">&quot;.&quot;</span> + file.originalname.split(<span class="string">&quot;.&quot;</span>)[<span class="number">1</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> limits = &#123; </span><br><span class="line">  <span class="attr">files</span>: <span class="number">1</span>, <span class="comment">// 只接收一个文件</span></span><br><span class="line">  <span class="attr">fileSize</span>: <span class="number">2097152</span> <span class="comment">// 文件大小不超过2m </span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fileFilter</span>(<span class="params">req, file, cb</span>) </span>&#123; <span class="comment">// 文件类型判断</span></span><br><span class="line">  file.mimetype.split(<span class="string">&quot;/&quot;</span>)[<span class="number">0</span>] === <span class="string">&quot;image&quot;</span> ? cb(<span class="literal">null</span>, <span class="literal">true</span>) : cb(<span class="literal">null</span>, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> upload = multer(&#123;</span><br><span class="line">  <span class="attr">storage</span>: storage,</span><br><span class="line">  <span class="attr">fileFilter</span>: fileFilter,</span><br><span class="line">  <span class="attr">limits</span>: limits</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.post(<span class="string">&quot;/insert&quot;</span>, upload.single(<span class="string">&quot;img&quot;</span>), <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    res.json(req.body);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>req.file获取到的参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fieldname: <span class="string">&#x27;img&#x27;</span>,  <span class="comment">// 表单字段名称</span></span><br><span class="line"><span class="attr">originalname</span>: <span class="string">&#x27;1.png&#x27;</span>, <span class="comment">// 上传时在用户电脑上的名称</span></span><br><span class="line"><span class="attr">encoding</span>: <span class="string">&#x27;7bit&#x27;</span>, <span class="comment">// 文件编码</span></span><br><span class="line"><span class="attr">mimetype</span>: <span class="string">&#x27;image/png&#x27;</span>, <span class="comment">// 文件类型</span></span><br><span class="line"><span class="attr">destination</span>: <span class="string">&#x27;/&#x27;</span>, <span class="comment">// 接受后的保存路径</span></span><br><span class="line"><span class="attr">filename</span>: <span class="string">&#x27;img-1539066538986&#x27;</span>, <span class="comment">// 保存在 destination 中的文件名	</span></span><br><span class="line"><span class="attr">path</span>: <span class="string">&#x27;\\img-1539066538986&#x27;</span>, <span class="comment">// 已上传文件的完整路径</span></span><br><span class="line"><span class="attr">size</span>: <span class="number">80419</span>  <span class="comment">// size</span></span><br></pre></td></tr></table></figure>
<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p>express文档 <a href="http://www.expressjs.com.cn/4x/api.html#req.body">http://www.expressjs.com.cn/4x/api.html#req.body</a><br>multer文档 <a href="https://github.com/expressjs/multer/blob/master/README.md">https://github.com/expressjs/multer/blob/master/README.md</a></p>
]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>three.js</title>
    <url>/2023/09/08/node_graphic/</url>
    <content><![CDATA[<p><strong>PBR</strong><br><strong>anti-aliasing</strong> 反锯齿<br><strong>multi-sample anti-aliasing</strong> 多重采样, this is a build-in WebGL method, depending on GPU</p>
<h2 id="render"><a href="#render" class="headerlink" title="render"></a>render</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> renderer = <span class="keyword">new</span> WebGLRenderer(&#123;</span><br><span class="line">   <span class="attr">antialias</span>: <span class="literal">true</span>, <span class="comment">// turn on anti-aliasing, to blur the edges of square pixels.</span></span><br><span class="line"> &#125;);</span><br><span class="line"> renderer.physicallyCorrectLights = <span class="literal">true</span>; <span class="comment">// </span></span><br></pre></td></tr></table></figure>

<h2 id="camera"><a href="#camera" class="headerlink" title="camera"></a>camera</h2><blockquote>
<p>two types of camera</p>
</blockquote>
<ul>
<li><strong>perspective projection 透视投影</strong>,  the area in between the <code>Near Clipping Plane</code> and <code>the Far Clipping Plane</code> is the <strong>camera’s viewing frustum</strong>.<ul>
<li>field of view: how wide the camera’s view is, in degrees.</li>
<li>aspect ratio</li>
<li>near: defines the small end of the frustum. anything closer to the camera than this will be invisible.</li>
<li>far: defines the large end of the frustum. anything further away from the camera than this will be invisible.</li>
</ul>
</li>
<li><strong>orthographic projection 正投影</strong></li>
</ul>
<h2 id="light"><a href="#light" class="headerlink" title="light"></a>light</h2><p><strong>Direct lighting</strong>: light rays that come directly from the bulb and hit an object.<br><strong>Indirect lighting</strong>: light rays that have bounced off the walls and other objects in the room before hitting an object, changing color, and losing intensity with each bounce.</p>
<blockquote>
<p>four types of light</p>
</blockquote>
<ul>
<li>DirectionalLight =&gt; Sunlight</li>
<li>PointLight =&gt; Light Bulbs</li>
<li>RectAreaLight =&gt; Strip lighting or bright windows</li>
<li>SpotLight =&gt; Spotlights</li>
</ul>
<h2 id="transformation"><a href="#transformation" class="headerlink" title="transformation"></a>transformation</h2><h3 id="translating"><a href="#translating" class="headerlink" title="translating"></a>translating</h3><ul>
<li>created from <code>Vector3</code> class, stored in the <code>.position</code> property</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">mesh.position.x = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line">mesh.position.set(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure>

<h3 id="scaling"><a href="#scaling" class="headerlink" title="scaling"></a>scaling</h3><ul>
<li><p>created from <code>Vector3</code> class, stored in the <code>.scale</code> property</p>
</li>
<li><p>Use a <code>negative value</code> will mirror the object</p>
</li>
<li><p>Cameras and Lights Cannot be Scaled</p>
</li>
<li><p><code>Uniform Scaling</code>, use the same value for all three axes</p>
</li>
<li><p><code>Non-Uniform Scaling</code>, to scale individual axes</p>
<ul>
<li><code>x</code>, the object will become wider or narrower</li>
<li><code>y</code>, the object will become taller or shorter</li>
<li><code>z</code>,  the depth of the object will be affected</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">mesh.scale.x = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line">mesh.scale.set(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure>

<h3 id="Rotation"><a href="#Rotation" class="headerlink" title="Rotation"></a>Rotation</h3><ul>
<li><p>Two Rotation Class</p>
<ul>
<li>Using <code>Euler angles</code>, represented using the <code>Euler class</code> and stored in the <code>.rotation</code> property.</li>
<li>Using <code>quaternions</code>, represented using the <code>Quaternion class</code> and stored in the <code>.quaternion</code> property.</li>
<li>the both can be used interchangeably. but in particular, the former has some short comings(like<code>gimbal lock万向锁</code>), while the later is harder to use</li>
</ul>
</li>
<li><p>Angles in three.js are specified using <code>radians</code>, not degrees, except <code>PerspectiveCamera.fov</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; MathUtils &#125; <span class="keyword">from</span> <span class="string">&#x27;three&#x27;</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * convert from degrees to radians.</span></span><br><span class="line"><span class="comment"> * π = Math.PI</span></span><br><span class="line"><span class="comment"> * 360∘ = 2π</span></span><br><span class="line"><span class="comment"> * 90∘ = π/2</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> rads = MathUtils.degToRad(<span class="number">90</span>); <span class="comment">// 1.57079... = π/2</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="transformation-matrix"><a href="#transformation-matrix" class="headerlink" title="transformation matrix"></a>transformation matrix</h3><p>stored in the Object3D.matrix property</p>
<ul>
<li><p><code>local matrix and word matrix</code>, the former is relative to parent and stored in the <code>.matrix</code> property, while the later is relative to world space and stored in the <code>.matrixWorld</code> property</p>
</li>
<li><p><code>identity matrix</code>:  all ones on the main diagonal and zeros everywhere else</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>  <span class="number">0</span>   <span class="number">0</span>   <span class="number">0</span></span><br><span class="line"><span class="number">0</span>   <span class="number">1</span>  <span class="number">0</span>   <span class="number">0</span></span><br><span class="line"><span class="number">0</span>   <span class="number">0</span>   <span class="number">1</span>  <span class="number">0</span></span><br><span class="line"><span class="number">0</span>   <span class="number">0</span>   <span class="number">0</span>  <span class="number">1</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>matrix of translating and scaling</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">mesh.position.x = Tx;</span><br><span class="line">mesh.position.y = Ty;</span><br><span class="line">mesh.position.z = Tz;</span><br><span class="line"></span><br><span class="line">mesh.scale.x = Sx;</span><br><span class="line">mesh.scale.y = Sy;</span><br><span class="line">mesh.scale.z = Sz;</span><br><span class="line"></span><br><span class="line">Sx  <span class="number">0</span>   <span class="number">0</span>   Tx</span><br><span class="line"><span class="number">0</span>   Sy  <span class="number">0</span>   Ty</span><br><span class="line"><span class="number">0</span>   <span class="number">0</span>   Sz  Tz</span><br><span class="line"><span class="number">0</span>   <span class="number">0</span>   <span class="number">0</span>   <span class="number">1</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>matrix of rotation</code><br>cos(degree) 余弦<br>sin(degree) 正弦</p>
<ul>
<li><p>x-axis</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>       <span class="number">0</span>        <span class="number">0</span>      <span class="number">0</span></span><br><span class="line"><span class="number">0</span>      cos      sin     <span class="number">0</span></span><br><span class="line"><span class="number">0</span>     -sin      cos     <span class="number">0</span></span><br><span class="line"><span class="number">0</span>       <span class="number">0</span>        <span class="number">0</span>      <span class="number">1</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>y-axis</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cos    <span class="number">0</span>       sin      <span class="number">0</span></span><br><span class="line"><span class="number">0</span>      <span class="number">1</span>        <span class="number">0</span>       <span class="number">0</span></span><br><span class="line">-sin   <span class="number">0</span>       cos      <span class="number">0</span></span><br><span class="line"><span class="number">0</span>      <span class="number">0</span>        <span class="number">0</span>       <span class="number">1</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>z-axis</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cos  -sin   <span class="number">0</span>      <span class="number">0</span></span><br><span class="line">sin   cos   <span class="number">0</span>      <span class="number">0</span></span><br><span class="line"><span class="number">0</span>     <span class="number">0</span>     <span class="number">1</span>      <span class="number">0</span></span><br><span class="line"><span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>      <span class="number">1</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h2 id="Sine-Wave"><a href="#Sine-Wave" class="headerlink" title="Sine Wave"></a>Sine Wave</h2>]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
      <tags>
        <tag>threeJs</tag>
      </tags>
  </entry>
  <entry>
    <title>git</title>
    <url>/2021/11/17/notes_git/</url>
    <content><![CDATA[<p>git config –global push.autoSetupRemote true<br>git rm -r –cached .</p>
<h2 id="bisect"><a href="#bisect" class="headerlink" title="bisect"></a>bisect</h2><p><code>git bisect start &lt;end point&gt; &lt;start point&gt;</code> repeatedly checking out the midpoint commit between two endpoints, and then narrowing down the search space based on whether the bug is present or not.</p>
<h2 id="stash"><a href="#stash" class="headerlink" title="stash"></a>stash</h2><p><code>git stash</code> is for temporarily storing changes, <code>git add</code> is for preparing changes for the next commit<br><code>git stash list</code><br><code>git stash apply</code> apply stashed changes to the working directory<br><code>git stash pop</code> apply stashed changes to the working directory and remove that changes from the stash list</p>
<h2 id="to-avoid-Enter-passphrase-for-key"><a href="#to-avoid-Enter-passphrase-for-key" class="headerlink" title="to avoid Enter passphrase for key"></a>to avoid <code>Enter passphrase for key</code></h2><p><a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh/working-with-ssh-key-passphrases#auto-launching-ssh-agent-on-git-for-windows">auto-launching-ssh-agent-on-git-for-windows</a></p>
<h2 id="rebase"><a href="#rebase" class="headerlink" title="rebase"></a>rebase</h2><ul>
<li><code>git rebase -i HEAD~&lt;number&gt;</code> or <code>git rebase -i &lt;commit number&gt;</code>  for using other commands, <strong>just change the <code>pick</code> word to the command name</strong></li>
<li><code>edit multiple commit messages</code>:<ul>
<li><code>git rebase -i HEAD~&lt;number&gt;</code> or <code>git rebase -i &lt;commit number&gt;</code> modify <code>pick</code> to <code>edit</code>,  then save and exit</li>
<li><code>git commit --amend -m &quot;&quot;</code></li>
<li><code>git rebase -continue</code> to the next commit</li>
</ul>
</li>
<li><code>insert commit:</code> run rebase command to the location, and change the commit to <code>edit</code> whose location is right before the location you want to insert. then you will be at the insert location and able to make a new commit or pick a commit.</li>
<li><code>squash commits</code>, change commits you want merged to <code>squash</code> or <code>fixup(this will discard the commit messages)</code>. (only consecutive commits can be squashed, while the commits order in editor is changeable)</li>
</ul>
<h2 id="tag"><a href="#tag" class="headerlink" title="tag"></a>tag</h2><ul>
<li><code>git tag &lt;tag name&gt;</code> create</li>
<li><code>git tag -a &lt;tag name&gt; &lt;commit number&gt; -m &lt;tag commit message&gt;</code>  create</li>
<li><code>git tag -d &lt;tag name&gt;</code> delete</li>
<li><code>git push origin tag &lt;tag name&gt;</code> </li>
<li><code>git push origin --delete &lt;tag name&gt;</code> push the delete operation to the remote</li>
<li><code>git show &lt;tag name&gt;</code> to display the tag info along with the commit info</li>
</ul>
<h2 id="basic"><a href="#basic" class="headerlink" title="basic"></a>basic</h2><p>Config user name and email <code>git config  --global  user.name / user.email “”</code><br><code>git config --list</code> check git config list<br><code>pwd show</code><br><code>git init</code><br>SSH binding computer <code>ssh-keygen -t rsa -C &quot;your email@example.com&quot;</code></p>
<ul>
<li><code>git config --remove-section gui</code> reset gui settings</li>
</ul>
<h2 id="diff"><a href="#diff" class="headerlink" title="diff"></a>diff</h2><ul>
<li><code>git diff</code> show all the changes with detail</li>
<li><code>git diff --name-only</code> show all the changed file name</li>
<li><code>git diff --name-status</code> show only names and status of changed files</li>
<li><code>git diff --unified=0</code> <code>git diff -U0</code> only show the changed lines</li>
</ul>
<h2 id="show"><a href="#show" class="headerlink" title="show"></a>show</h2><blockquote>
<p><code>show</code> is used for a certain commit, while log is for getting a history</p>
</blockquote>
<ul>
<li><code>git show commit number</code> display the changes of a given commit</li>
<li><code>git show-branch &lt;branch 1&gt; &lt;branch 2&gt;</code>  </li>
</ul>
<h2 id="log"><a href="#log" class="headerlink" title="log"></a>log</h2><p><code>git log --name-status</code> show history list with file name and status<br><code>git log -p &lt;file path&gt;</code> show history list of the given file<br><code>git log --follow -p &lt;file path&gt;</code> show the entire history(including rename ) of the given file<br><code>git log -L &lt;start line number&gt;,&lt;end line number&gt;:&lt;file path&gt;</code> show a history list of the limited lines of the given file<br><code>git log &lt;commit number&gt; -L &lt;line number&gt;,&lt;line number&gt;:&lt;file path&gt;</code> show a history list of the limited lines of the given file of the given commit</p>
<p><code>git log --all</code> show all the branch commits<br><code>git log --author=&lt;author name&gt;</code> show a history list made by the given author<br><code>git fetch --all &amp;&amp; git log &lt;origin/branchName&gt;</code> get the repo state from remote and show the given branch commit history<br><code>git status</code><br><code>git log --date=relative|local|default|iso|iso-strict|rfc|short|raw</code>  to change date formats</p>
<p><code>git log  --grep=helloworld</code> search for commit tips<br><code>git log --pretty=format:&quot;%ad - %an: %s&quot; --after=&quot;2016-01-31&quot; --until=&quot;2017-03-10&quot; --author=&quot;&quot;</code> to show commits in a specified date range<br><code>git log -S &#39;helloworld&#39; --source --all</code> search for commit code<br>git log -G “^(\s)<em>function foo[(]<a href="%5Cs">)</a></em>{$” –source –all</p>
<h2 id="revert-amp-amp-reset"><a href="#revert-amp-amp-reset" class="headerlink" title="revert &amp;&amp; reset"></a>revert &amp;&amp; reset</h2><ul>
<li><p><code>git revert &quot;commit number&quot;</code> <code>revert</code> means a new commit which reverts to a given commit</p>
</li>
<li><p><code>git reset &quot;commit number&quot;</code> revert to a given commit, and the commits after the given commit will be deleted</p>
</li>
<li><p><code>git reset HEAD^</code></p>
</li>
<li><p><code>git reset --hard origin/feat-windows</code> setting branch to match remote exactly</p>
</li>
<li><p><code>git push origin +&lt;commit&gt;:master</code> revert to a certain commit, and force push to the remote </p>
</li>
</ul>
<h2 id="restore"><a href="#restore" class="headerlink" title="restore"></a>restore</h2><ul>
<li><code>git restore .</code> discard local changes</li>
</ul>
<h2 id="remote"><a href="#remote" class="headerlink" title="remote"></a>remote</h2><ul>
<li><code>git remote show origin</code> </li>
<li><code>git remote -v</code> remote list</li>
<li><code>git remote add/rm origin [repo name]</code> add or remove a remote repo address</li>
<li><code>git remote set-url origin [repo name]</code> change the url of an existing remote repository</li>
<li><code>git fetch download from remote</code></li>
</ul>
<h2 id="push"><a href="#push" class="headerlink" title="push"></a>push</h2><ul>
<li><code>git add [file] &amp;&amp; git commit -a || git commit -m “message”&amp;&amp; git push</code></li>
<li><code>git commit --amend -m &quot;&quot;</code> amend the last commit mesg</li>
<li><code>git push –u origin [branch name]</code> push local file to remote</li>
<li><code>git push origin [branch name]</code> push the last altered file to remote when local made a submit</li>
<li><code>git push -u origin [branch name] -f</code>  update forcibly</li>
<li><code>git push origin [branch name]</code>  submit the content that altered by branch</li>
<li><code>git add --patch &lt;filename&gt;</code> break down the given file into thunks, and choose thunks to commit. input <code>?</code> to get commands description</li>
<li><code>git push origin &lt;commit&gt;:&lt;branch name&gt;</code> push a given commit to a branch</li>
</ul>
<h2 id="branch"><a href="#branch" class="headerlink" title="branch"></a>branch</h2><ul>
<li><code>git branch -r --list</code></li>
<li><code>git branch -a</code> all the branches</li>
<li><code>git branch --show-current</code></li>
<li><code>git branch -m &lt;new name&gt;</code> alter branch name</li>
<li><code>git branch -d &lt;name&gt;</code> delete branch name locally</li>
<li><code>git branch -D &lt;name&gt;</code> delete branch name remotely</li>
<li><code>git clone -b &lt;branch&gt; &lt;remote_repo&gt;</code></li>
<li><code>git checkout -b [branch name]</code> create(if the branch doesn’t exist) and switch to the branch</li>
</ul>
<h3 id="restore-a-deleted-branch"><a href="#restore-a-deleted-branch" class="headerlink" title="restore a deleted branch"></a>restore a deleted branch</h3><ul>
<li><code>git reflog</code> find the last sha of the deleted branch, and <code>git checkout -b &lt;branch_name&gt; &lt;sha&gt;</code> get back</li>
</ul>
<h2 id="checkout"><a href="#checkout" class="headerlink" title="checkout"></a>checkout</h2><ul>
<li><p><code>git checkout -d [branch name]</code> delete a branch locally, so need push to remote</p>
</li>
<li><p><code>git checkout -D [branch name]</code> delete a branch locally, to force deleting the branch without checking merged status</p>
</li>
<li><p><code>git checkout -b [branch name]</code> create(if the branch doesn’t exist) and switch to the branch</p>
</li>
<li><p><code>git checkout [branch name]</code> switch to a branch only</p>
</li>
<li><p><code>git push [repo name] --delete [branch name]</code> delete a branch both locally and remotely</p>
</li>
<li><p><code>git checkout .</code> clean un-staged changes made in the current branch</p>
</li>
<li><p><code>git checkout &lt;file path&gt;</code> clean the change of a specific file in the current branch</p>
</li>
<li><p><code>git checkout &lt;branch name&gt; &lt;file path&gt;</code> to revert a single file according to branch</p>
</li>
<li><p><code>git checkout &lt;commit number&gt; &lt;file path&gt;</code> to revert a file according to previous commit</p>
</li>
<li><p>get a file from another branch or another commit and then put it into another path</p>
<ul>
<li><code>git checkout &lt;branch name&gt; &lt;file name&gt;</code>、<code>git checkout &lt;commit num&gt; &lt;file name&gt;</code> get file</li>
<li><code>git mv &lt;old file name&gt; &lt;new file name&gt;</code> copy and move</li>
<li><code>git reset &lt;old file name&gt;</code> reset the original file</li>
</ul>
</li>
<li><p><code>git push --set-upstream origin [branch name]</code> To push the current branch and set the remote as upstream</p>
</li>
</ul>
<h2 id="cherry-pick"><a href="#cherry-pick" class="headerlink" title="cherry-pick"></a>cherry-pick</h2><ul>
<li><code>git cherry-pick &lt;commit -number&gt;</code> to apply a specific commit to the current branch</li>
<li><code>git cherry-pick -n &lt;commit -number&gt;</code> to apply a specific commit to the current branch without commit automatically</li>
<li><code>git cherry-pick -v &lt;branch name 1&gt; &lt;branch name 2&gt;</code></li>
<li><code>git cherry-pick &lt;commit start&gt;^..&lt;commit end&gt;</code> pick multiple commits</li>
</ul>
<h2 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h2><ul>
<li><code>git merge &lt;branch name or a commit num&gt;</code> to merge with the given branch or commit  </li>
<li><code>git merge &lt;branch name&gt; --allow-unrelated-histories</code> to merge two branches no common bases</li>
<li><code>git merge-base &lt;target branch&gt; &lt;refer branch&gt;</code> compare the two branches and show the common base</li>
<li><code>git push -o merge_request.create -o merge_request.assign=branchname</code> </li>
</ul>
<h2 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h2><ul>
<li><code>git clean -f</code> remove untracked files</li>
<li><code>git clean -fd</code> remove untracked directories</li>
</ul>
<h2 id="pull"><a href="#pull" class="headerlink" title="pull"></a>pull</h2><ul>
<li><code>git pull --all</code></li>
</ul>
<h2 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h2><ul>
<li><code>git fetch --all</code> get all the change of all the branches</li>
</ul>
<h2 id="config"><a href="#config" class="headerlink" title="config"></a>config</h2><ul>
<li><code>git config --global gui.encoding utf-8</code> set <code>gui</code> encoding <code>as utf-8</code></li>
</ul>
<h2 id="Exit-editor"><a href="#Exit-editor" class="headerlink" title="Exit editor"></a>Exit editor</h2><p>press <code>i</code> to enter insert mode, <code>ESC</code> (exit the inset mode)<br>write <code>:WQ</code> (write &amp; quit) and press enter</p>
]]></content>
      <categories>
        <category>Notes</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Financial Market Terms</title>
    <url>/2021/11/17/notes_invest/</url>
    <content><![CDATA[<p>Some investment terminology or concepts in the financial market.</p>
<h2 id="about-Fund"><a href="#about-Fund" class="headerlink" title="about Fund"></a>about Fund</h2><ul>
<li><strong>Mutual Fund(共同基金)</strong> 专业的基金经理进行投资管理<ul>
<li><strong>主动型基金</strong>：基金经理通过自身分析（包括技术分析和基本面分析）来选股和择时以取得市场超额收益</li>
<li><strong>混合型基金</strong>: 依赖基金经理的能力，仓位较为灵活随股市行情而波动</li>
<li><strong>被动型基金</strong>: 一般选取特定的指数作为跟踪对象，因此通常又被称为指数基金, 复制指数，与其保持一致，适合定投</li>
<li>混合行业**: 含有两个行业以及以上的主动性基金</li>
<li>灵活配置混合**: 不规定股票、债券、可转债、现金、其他资产的比例</li>
</ul>
</li>
<li><strong>ETF (Exchange-Traded Fund)</strong><ul>
<li><strong>上证指数</strong>：反映上证所上市公司股票整体表现的股价指数。</li>
<li><strong>科创</strong>：科技创新板，上证所上市。主要吸引的是在生物医药、新一代信息技术、人工智能、高端制造、新材料等领域具备创新能力的公司</li>
<li><strong>沪深300</strong>：上证券所和深证所上市的300只市值较大、流动性较好的股票组成，旨在反映中国A股市场的整体表现。相比上证，其反映的市场动态可能更集中在蓝筹股上，而上证指数则涵盖了更多中小型公司</li>
<li><strong>中概股</strong>：海外上市的中国公司，通常指中国公司在美国等海外证券市场（尤其是纳斯达克或纽约证券交易所）上市的股票。由于这些公司通常在中国开展主要业务，但选择在海外上市，因此被称为“中概股”（中国概念股）</li>
<li><strong>中概互联ETF</strong>：选取在美国和香港上市的中国互联网企业</li>
<li><strong>恒生指数</strong>：在香港联合交易所上市的最大、最具流动性的公司。恒生指数的目的是反映香港股市的整体表现，尤其是香港市场中的蓝筹股。</li>
<li><strong>恒生科技指数</strong></li>
<li><strong>道琼斯工业平均指数</strong>：美国30家市值最大、流动性最好的公司组成</li>
<li><strong>标普500指数</strong>：美国500家市值最大、流动性最好的公司组成，是全球投资者中使用最广泛的市场基准之一。该指数的多样性和覆盖面使其成为衡量美国经济整体表现的重要指标</li>
<li><strong>纳斯达克综合指数</strong>：在纳斯达克交易所上市的科技股，以科技企业为主。</li>
<li><strong>MSCI</strong> 摩根士丹利资本国际</li>
<li><strong>MSCI全球指数</strong></li>
<li><strong>MSCI新兴市场指数</strong></li>
</ul>
</li>
<li><strong>Private Equity Fund(私募)</strong><ul>
<li>typically hold investments for 5 to 10 years</li>
<li><strong>Hedge Fund(对冲)</strong></li>
</ul>
</li>
<li><strong>Closed-End Fund(封闭式)</strong></li>
</ul>
<h2 id="bond-types"><a href="#bond-types" class="headerlink" title="bond types"></a>bond types</h2><p><strong>bond types</strong> are categorized into different risk levels based on the issuer’s creditworthiness, financial stability</p>
<ul>
<li><strong>First-Level Bonds 一级债券</strong><ul>
<li>Chinese Government Bonds, Policy Bank Bonds, Savings Bonds (储蓄国债)</li>
</ul>
</li>
<li><strong>Second-Level Bonds 二级债券</strong></li>
<li><strong>Third-Level Bonds 二级债券</strong></li>
</ul>
<h2 id="金融市场"><a href="#金融市场" class="headerlink" title="金融市场"></a>金融市场</h2><ul>
<li><p><strong>一级市场</strong></p>
<ul>
<li>政府或公司将新发行的股票、债券或其他证券出售给投资者，用于融资。投资者(机构投资者、个人投资者)在一级市场上直接从发行方购买证券，而不是从其他投资者手中购买</li>
<li>政府通过发行国债筹集资金</li>
<li>公司通过IPO集中交易所首次发行股票</li>
<li>发行方式<ul>
<li><strong>IPO</strong>（首次公开募股）：公司首次在公开市场上发行股票。</li>
<li><strong>增发</strong>：公司已经上市，但需要额外融资，会通过发行新股或债券来进行增发。</li>
<li><strong>私募</strong>：公司通过非公开方式向特定的机构或个人发行股票或债券。</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>二级市场</strong></p>
<ul>
<li>通过公开市场（如股票交易所）进行交易</li>
<li>证券的价格由市场供求关系决定</li>
</ul>
</li>
<li><p><strong>三级市场</strong></p>
<ul>
<li>通过经纪商网络或场外市场进行交易，为大宗交易服务</li>
<li>公开显示在交易所的订单薄上，但也受监管机构的监管</li>
</ul>
</li>
<li><p><strong>四级市场</strong></p>
<ul>
<li>机构投资者直接彼此交易，不通过中介或经纪商。避免了交易所和经纪商的费用</li>
<li>主要服务于大宗交易，尤其是机构投资者间的跨资产类别交易</li>
<li>不公开披露，更具隐私性，避免影响市场</li>
</ul>
</li>
<li><p><strong>场内</strong> 场内市场指的是在上海证券交易所等集中交易所进行的公开交易。</p>
</li>
<li><p><strong>场外</strong> OTC，Over-the-Counter Market** 通过经纪商、做市商或其他中介机构在不同地点进行。买卖双方通过协商确定价格和交易条件</p>
</li>
</ul>
<h2 id="M1-amp-M2-amp-M3"><a href="#M1-amp-M2-amp-M3" class="headerlink" title="M1&amp;M2&amp;M3"></a>M1&amp;M2&amp;M3</h2><p>Refer to the total amount of money available in an economy. categorized based on liquidity, or how easily the money can be used for transactions.</p>
<ul>
<li>M1 Includes the most liquid forms of money, which can be quickly used for transactions.</li>
<li>M2 Includes all of M1 plus near-money assets that are not as liquid but can still be converted to cash relatively easily.</li>
<li>M3 Includes all of M2 plus larger, less liquid assets.</li>
</ul>
<h2 id="Federal-Reserve-System"><a href="#Federal-Reserve-System" class="headerlink" title="Federal Reserve System"></a>Federal Reserve System</h2><blockquote>
<p>Banks are required by the Federal Reserve to keep a certain amount of money (called reserves) in their accounts at the Fed to ensure they can cover withdrawals and other obligations.</p>
</blockquote>
<ul>
<li><strong>federal funds rate 联邦基金利率</strong><ul>
<li>applies to <strong>overnight loans</strong> between depository institutions (primarily banks) that have excess reserves and those that need additional reserves.</li>
<li>The Federal Open Market Committee (FOMC) sets a target range for the <strong>federal funds rate</strong> during its meetings (typically eight times a year). This rate is influenced through the Fed’s open market operations, such as buying or selling U.S. Treasury securities.</li>
<li><strong>overnight loan</strong>, Sometimes, at the end of the business day, a bank might find that it has less than the required reserve amount. The bank with extra reserves can lend those reserves overnight to the bank that is short, at an interest rate known as the <strong>federal funds rate</strong>.</li>
</ul>
</li>
</ul>
<h3 id="Federal-Reserve-System-Fed-adjusts-federal-funds-rate"><a href="#Federal-Reserve-System-Fed-adjusts-federal-funds-rate" class="headerlink" title="Federal Reserve System (Fed) adjusts federal funds rate"></a>Federal Reserve System (Fed) adjusts federal funds rate</h3><ul>
<li><strong>rate cut</strong> lowering interest rates =&gt; reduce the cost of borrowing</li>
<li><strong>the effects of low interest rates</strong><ul>
<li><strong>create jobs and reduce unemployment</strong>, as stimulating economic growth</li>
<li><strong>lead to higher stock prices</strong><ul>
<li>as cheaper borrowing costs improve business profitability and growth prospects. this also <strong>make bonds less attractive</strong>, driving more investors toward stocks.</li>
<li><strong>benefit Technology and Growth Stocks</strong>, lower borrowing costs make thoese stocks easier to fund expansion. Investors are also more willing to invest in companies that are expected to deliver strong future earnings when interest rates are low.</li>
</ul>
</li>
<li><strong>rise bond price</strong>.<ul>
<li>newly issued bonds are issued with lower <strong>coupon rates</strong> because the overall cost of borrowing in the economy has decreased. they will offer lower yields after a rate cut. Bonds with higher interest rates (issued before the cut) become more attractive to investors, so the demand for these older bonds increases,</li>
<li><strong>coupon rate</strong> is the interest rate paid by a bond issuer on the bond’s <em>face value (par value)</em> to bondholders.</li>
</ul>
</li>
<li><strong>increase inflation</strong><ul>
<li><strong>Gold Prices Rise</strong>. Gold is often viewed as a hedge against inflation and currency devaluation.</li>
</ul>
</li>
<li><strong>weaker the U.S. dollar</strong>.<ul>
<li>lower interest rates make dollar-denominated assets less attractive to foreign investors. investors may move capital to countries where interest rates are higher, seeking better returns on fixed-income investments.</li>
<li><strong>but can benefit U.S. export</strong>. as cheaper U.S. dollar making American goods cheaper and more competitive in global markets</li>
<li><strong>increase the cost of import</strong>, contributing to inflationary pressures, higher price and cheaper dollars</li>
</ul>
</li>
</ul>
</li>
<li><strong>rate rise</strong></li>
<li><strong>the impact of high interest rates</strong> slows economic growth, dampens consumer and business spending, and can lead to volatility in both the bond and stock markets.<ul>
<li>Higher rates can make consumers more cautious</li>
<li>opposite from the low rates</li>
<li>stronger U.S. dollar, attract foreign capital</li>
<li>cool inflation</li>
<li>captial flow from stock market to bond market or othe more stable markets</li>
<li>new bond</li>
</ul>
</li>
</ul>
<h2 id="terminology"><a href="#terminology" class="headerlink" title="terminology"></a>terminology</h2><ul>
<li><p>周期型 &amp;&amp; 非周期性</p>
<ul>
<li>非周期性：食品、饮料、银行、保险、消费等，与衣食住行相关，不论经济发展如何都需要的行业</li>
<li>周期性：随着经济周期盛衰大起大落的行业， 和国内或国际经济波动相关性较强。与国运关联较大。钢铁、有色、煤炭等大宗商品、船舶、机械等</li>
</ul>
</li>
<li><p><code>Engel&#39;s Coefficient</code> refers to the proportion of household income that is spent on food. Engelobserved that as income increases, the percentage of income spent on food decreases, even if the absolute amount spent on food increases.</p>
</li>
<li><p><strong>做空/空头Short Selling</strong></p>
<ul>
<li>指投资者从券商或其他持有者借入资产（如股票、期货合约等），在市场上卖出，期望未来价格下跌时再以更低的价格买回资产归还给借出方，从而赚取价差利润</li>
<li><strong>空头挤压（Short Squeeze）</strong> 若股票价格上涨，空头投资者为了避免进一步损失，可能会被迫平仓（即买回股票），这种大量买回股票的行为会进一步推高价格，形成一种循环，使得股票价格在短时间内急剧上升，从而使空头投资者遭受更大的损失。</li>
</ul>
</li>
<li><p><strong>利空</strong> 是指能够促使股价下跌的信息</p>
</li>
<li><p><strong>Premium rate 溢价率</strong></p>
<ul>
<li>(市场价格-净值)/净值*100%, (1 - 0.8) / 0.8 = 0.25, 溢价率为 25%</li>
<li>为正时：市场价格高于净值，反映出市场对该ETF的需求上涨。</li>
<li>为负时：市场价格低于净值，反映出市场对该ETF的需求下降。</li>
<li><strong>市场价格</strong> 是通过交易所的实时交易价格产生</li>
</ul>
</li>
<li><p><strong>最大回撤</strong></p>
<ul>
<li>在选定的时间周期内，找出资产价格的最高点（峰值）和随后出现的最低点（谷值）</li>
<li>(峰值-谷值)/谷值*100%, (100 - 80)/ 80 = 0.25, 回撤为 25%</li>
<li>反映了在最不利情况下可能面临的最大损失</li>
</ul>
</li>
<li><p><strong>投机</strong>：期望在短时间内通过市场价格波动获得利润</p>
</li>
<li><p><strong>对冲</strong></p>
<ul>
<li>通过在不同的市场或资产上持有相反的头寸，来减少单一市场或资产价格变动对投资的影响。如果一种资产的价格下跌，对应的对冲头寸可能会上涨，从而减少整体损失</li>
</ul>
</li>
<li><p><strong>dividend 股息</strong></p>
</li>
<li><p><strong>Price-to-Earnings (P/E) ratio 市盈率</strong></p>
<ul>
<li>best compared within the same industry</li>
</ul>
</li>
<li><p><strong>trading volume 换手</strong> the buying and selling of shares between investors</p>
</li>
<li><p><strong>Amplitude  振幅</strong></p>
<ul>
<li>the range of price fluctuations of a stock</li>
<li>Amplitude = High Price−Low Price</li>
<li>A large amplitude signifies significant price fluctuations (high volatility), while a small amplitude indicates relatively stable price movement (low volatility).</li>
</ul>
</li>
<li><p><strong>Structural Bull Market 结构性牛市</strong> refers to a long-term upward trend in stock prices that is driven by fundamental changes in the economy or market structure.</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Others</category>
      </categories>
      <tags>
        <tag>financial</tag>
      </tags>
  </entry>
  <entry>
    <title>janpan words</title>
    <url>/2024/11/17/notes_jpwords/</url>
    <content><![CDATA[<h2 id="名前-vs-名字"><a href="#名前-vs-名字" class="headerlink" title="名前 vs 名字"></a>名前 vs 名字</h2><p>名字 pecifically refer to a person’s family name or surname</p>
<h2 id="人-vs-人間"><a href="#人-vs-人間" class="headerlink" title="人 vs 人間"></a>人 vs 人間</h2><p>人間  is used when discussing the <em>human race</em>, <em>human nature</em>, or <em>humans as a collective</em>.<br>あの人は医者です<br>人間は感情を持っている動物です</p>
<h2 id="表情-vs-顔色"><a href="#表情-vs-顔色" class="headerlink" title="表情 vs 顔色"></a>表情 vs 顔色</h2><p>表情 focuses on expression (emotional display).<br>顔色 focuses on color/complexion (physical appearance)(类似脸色、面色).</p>
<h2 id="今まで-vs-これまで"><a href="#今まで-vs-これまで" class="headerlink" title="今まで vs これまで"></a>今まで vs これまで</h2><p>これまで refer to a particular point in time or a certain period up to the present, slightly more formal</p>
]]></content>
      <categories>
        <category>Notes</category>
      </categories>
      <tags>
        <tag>japanese</tag>
      </tags>
  </entry>
  <entry>
    <title>linux</title>
    <url>/2021/11/17/notes_linux/</url>
    <content><![CDATA[<p>as root user: <code>sudo su</code></p>
<p><code>CTRL + L</code> clear terminal</p>
<p>~ is the home directory of user</p>
<h2 id="Sharing-SSH-keys-between-Windows-and-WSL-2"><a href="#Sharing-SSH-keys-between-Windows-and-WSL-2" class="headerlink" title="Sharing SSH keys between Windows and WSL 2"></a>Sharing SSH keys between Windows and WSL 2</h2><ul>
<li>copy the entrie <code>.ssh</code> from the windows path <code>c:\Users\&lt;username&gt;\.ssh</code> to linux dir <code>~/.ssh</code></li>
</ul>
<p><code>cp -r /mnt/c/Users/&lt;username&gt;/.ssh ~/.ssh</code></p>
<ul>
<li><code>chmod 600 ~/.ssh/id_rsa</code> set Read/Write access for the owner, and no access for anyone else. That means that nobody but you can see this key.</li>
</ul>
<h2 id="WSL"><a href="#WSL" class="headerlink" title="WSL"></a>WSL</h2><ol>
<li><code>wsl --distribution Ubuntu-22.04</code></li>
<li><code>wsl -l</code> get distribution list</li>
<li><code>wsl -s &lt;distribution Name&gt;</code> set default distribution</li>
<li><code>explorer.exe</code> open file explorer</li>
</ol>
<h2 id="apt"><a href="#apt" class="headerlink" title="apt"></a>apt</h2><ol>
<li><code>apt --purge remove</code> remove package and all their global (i.e., system wide) configuration files.</li>
<li><code>apt list --installed</code></li>
<li><code>wget &quot;&lt;url&gt;&quot;</code> download from a url</li>
</ol>
<h2 id="dir"><a href="#dir" class="headerlink" title="dir"></a>dir</h2><p><code>mv &lt;name&gt; &lt;new name&gt;</code> rename dir<br><code>mkdir</code></p>
<h2 id="File-access"><a href="#File-access" class="headerlink" title="File access"></a>File access</h2><p><code>cat &lt;file name&gt;</code> read<br><code>cat &gt; &lt;file name&gt;</code> overthrow</p>
<p><code>mv &lt;old name&gt; &lt;new name&gt;</code> rename a file<br><code>rm</code> remove</p>
<ol>
<li><strong><code>cp &lt;options&gt; &lt;from path&gt; &lt;to path&gt;</code></strong> copy dir or file<ol>
<li>multiple from path is allowed</li>
<li>options<ol>
<li><code>-r</code> recursively copy</li>
<li><code>-i</code> to prompt if there are already existing files with same names in the destination folder</li>
<li><code>-p</code> to preserver it’s timestamp, filer permission, owner ship and so on</li>
</ol>
</li>
</ol>
</li>
<li><strong><code>cut</code></strong></li>
<li><strong><code>find &lt;path&gt; -name &lt;name | regular expression  &gt;</code></strong> search by file name or regular expression</li>
</ol>
<h2 id="vi-editor"><a href="#vi-editor" class="headerlink" title="vi editor"></a>vi editor</h2><p><code>vi &lt;file name&gt;</code> open vi editor<br><code>:w</code> save<br><code>:wq</code> or <code>zz</code> save and exit<br><code>:q!</code> exit without saving<br><code>i</code> insert<br><code>d</code> or <code>&lt;number&gt;dd</code> delete lines<br><code>b</code> to the beginning of the word<br><code>e</code> to the end of the word<br><code>:u</code> or <code>:&lt;number&gt;u</code> undo<br><code>:set nu</code> show line number<br><code>:&lt;line number&gt;</code> to the given line<br><code>&lt;number&gt;yy</code> yank multiple lines from the cursor position</p>
<h2 id="Nano-editor"><a href="#Nano-editor" class="headerlink" title="Nano editor"></a>Nano editor</h2><p><code>ctrl + &lt;command&gt;</code></p>
]]></content>
      <categories>
        <category>Notes</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown</title>
    <url>/2018/08/23/notes_markdown/</url>
    <content><![CDATA[<h2 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">特殊符号使用 \ 转义，例 \* \# \&gt;</span><br></pre></td></tr></table></figure>

<h2 id="字体颜色"><a href="#字体颜色" class="headerlink" title="字体颜色"></a>字体颜色</h2><p><font face="黑体">我是黑体字</font><br><font face="微软雅黑">我是微软雅黑</font><br><font face="STCAIYUN">我是华文彩云</font><br><font color="#bb1509" size="4" face="黑体">color=#0099ff size=72 face=”黑体”</font><br><font color="#bb1509" size="72">color=#00ffff</font><br><font color="gray" size="72">color=gray</font></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">&quot;黑体&quot;</span>&gt;</span>我是黑体字<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">&quot;微软雅黑&quot;</span>&gt;</span>我是微软雅黑<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">&quot;STCAIYUN&quot;</span>&gt;</span>我是华文彩云<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">#0099ff</span> <span class="attr">size</span>=<span class="string">7</span> <span class="attr">face</span>=<span class="string">&quot;黑体&quot;</span>&gt;</span>color=#0099ff size=72 face=&quot;黑体&quot;<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">#00ffff</span> <span class="attr">size</span>=<span class="string">72</span>&gt;</span>color=#00ffff<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">gray</span> <span class="attr">size</span>=<span class="string">72</span>&gt;</span>color=gray<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1535269125851&di=5b30256aeac0e1016d165ded3ccaa568&imgtype=0&src=http://note.youdao.com/iyoudao/wp-content/uploads/2016/09/8881.jpg" alt="示例图片"></p>
<p><a href="https://www.appinn.com/markdown/index.html">官方文档</a></p>
<h2 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h2><p>半方大的空白&ensp;或&#8194;<br>全方大的空白&emsp;或&#8195;<br>不断行的空白格&nbsp;或&#160;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">半方大的空白&amp;ensp;或&amp;#8194;</span><br><span class="line">全方大的空白&amp;emsp;或&amp;#8195;</span><br><span class="line">不断行的空白格&amp;nbsp;或&amp;#160;</span><br></pre></td></tr></table></figure>

<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">少量代码使用 ` 一个反引号包裹</span><br><span class="line">多行代码使用三个反引号包裹</span><br></pre></td></tr></table></figure>

<p>使用三个反引号包裹并指定语言</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>支持的语言：1c, abnf, accesslog, actionscript, ada, apache, applescript, arduino, armasm, asciidoc, aspectj, autohotkey, autoit, avrasm, awk, axapta, bash, basic, bnf, brainfuck, cal, capnproto, ceylon, clean, clojure, clojure-repl, cmake, coffeescript, coq, cos, cpp, crmsh, crystal, cs, csp, css, d, dart, delphi, diff, django, dns, dockerfile, dos, dsconfig, dts, dust, ebnf, elixir, elm, erb, erlang, erlang-repl, excel, fix, flix, fortran, fsharp, gams, gauss, gcode, gherkin, glsl, go, golo, gradle, groovy, haml, handlebars, haskell, haxe, hsp, htmlbars, http, hy, inform7, ini, irpf90, java, javascript, json, julia, kotlin, lasso, ldif, leaf, less, lisp, livecodeserver, livescript, llvm, lsl, lua, makefile, markdown, mathematica, matlab, maxima, mel, mercury, mipsasm, mizar, mojolicious, monkey, moonscript, n1ql, nginx, nimrod, nix, nsis, objectivec, ocaml, openscad, oxygene, parser3, perl, pf, php, pony, powershell, processing, profile, prolog, protobuf, puppet, purebasic, python, q, qml, r, rib, roboconf, rsl, ruby, ruleslanguage, rust, scala, scheme, scilab, scss, smali, smalltalk, sml, sqf, sql, stan, stata, step21, stylus, subunit, swift, taggerscript, tap, tcl, tex, thrift, tp, twig, typescript, vala, vbnet, vbscript, vbscript-html, verilog, vhdl, vim, x86asm, xl, xml, xquery, yaml, zephir</p>
<h2 id="字体大小"><a href="#字体大小" class="headerlink" title="字体大小"></a>字体大小</h2><h1 id="1号"><a href="#1号" class="headerlink" title="1号"></a>1号</h1><h2 id="2号"><a href="#2号" class="headerlink" title="2号"></a>2号</h2><h3 id="3号"><a href="#3号" class="headerlink" title="3号"></a>3号</h3><h4 id="4号"><a href="#4号" class="headerlink" title="4号"></a>4号</h4><h5 id="5号"><a href="#5号" class="headerlink" title="5号"></a>5号</h5><h6 id="6号"><a href="#6号" class="headerlink" title="6号"></a>6号</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 1号</span><br><span class="line">## 2号</span><br><span class="line">### 3号</span><br><span class="line">#### 4号</span><br><span class="line">##### 5号</span><br><span class="line">###### 6号</span><br></pre></td></tr></table></figure>

<h2 id="字体着重"><a href="#字体着重" class="headerlink" title="字体着重"></a>字体着重</h2><p><strong>这是加粗的文字</strong><br><em>这是倾斜的文字</em>`<br><strong><em>这是斜体加粗的文字</em></strong><br><del>这是加删除线的文字</del></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">**这是加粗的文字**</span><br><span class="line">*这是倾斜的文字*`</span><br><span class="line">***这是斜体加粗的文字***</span><br><span class="line">~~这是加删除线的文字~~</span><br></pre></td></tr></table></figure>

<h2 id="字体缩进"><a href="#字体缩进" class="headerlink" title="字体缩进"></a>字体缩进</h2><blockquote>
<p>这是引用的内容</p>
<blockquote>
<p>这是引用的内容</p>
<blockquote>
<blockquote>
<blockquote>
<p>这是引用的内容</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;这是引用的内容</span><br><span class="line">&gt;&gt;这是引用的内容</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;这是引用的内容</span><br></pre></td></tr></table></figure>

<h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">三个以上的 - 或者 * ,效果一样</span><br><span class="line">***</span><br></pre></td></tr></table></figure>
<hr>
<hr>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line">## 图片引用</span><br><span class="line"></span><br><span class="line">``` <span class="type">text</span></span><br><span class="line">![图片alt](图片地址 <span class="string">&#x27;&#x27;</span>图片titl<span class="string">e&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[百度](http://baidu.com)</span><br></pre></td></tr></table></figure>

<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><ul>
<li>列表</li>
</ul>
<p>1.列表内容<br>2.列表内容<br>3.列表内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">无序列表，使用- + *效果一样</span><br><span class="line">- 列表</span><br><span class="line">+ 列表</span><br><span class="line">* 列表</span><br><span class="line"></span><br><span class="line">有序列表</span><br><span class="line">1.列表内容</span><br><span class="line">2.列表内容</span><br><span class="line">3.列表内容</span><br><span class="line"></span><br><span class="line">注意：符号跟内容之间要有一个空格</span><br></pre></td></tr></table></figure>

<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><table>
<thead>
<tr>
<th>表头</th>
<th align="center">表头</th>
<th align="right">表头</th>
</tr>
</thead>
<tbody><tr>
<td>内容</td>
<td align="center">内容</td>
<td align="right">内容</td>
</tr>
<tr>
<td>内容</td>
<td align="center">内容</td>
<td align="right">内容</td>
</tr>
</tbody></table>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">表头|表头|表头</span><br><span class="line">---|:--:|---:</span><br><span class="line">内容|内容|内容</span><br><span class="line">内容|内容|内容</span><br><span class="line"></span><br><span class="line">| 左对齐标题 | 右对齐标题 | 居中对齐标题 |</span><br><span class="line">| :------| ------: | :------: |</span><br><span class="line"></span><br><span class="line">表格内换行使用 &lt;/br&gt; 标签</span><br></pre></td></tr></table></figure>

<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="http://baidu.com/">百度</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[百度](http://baidu.com)</span><br></pre></td></tr></table></figure>

<h2 id="选择框"><a href="#选择框" class="headerlink" title="选择框"></a>选择框</h2><ul>
<li><input checked disabled type="checkbox"> Write the press release</li>
<li><input disabled type="checkbox"> Update the website</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- [x] Write the press release</span><br><span class="line">- [ ] Update the website</span><br></pre></td></tr></table></figure>

<h2 id="高亮"><a href="#高亮" class="headerlink" title="高亮"></a>高亮</h2><p>I need to highlight these ==very important words==.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">I need to highlight these ==very important words==.</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Notes</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>npm &amp;&amp; yarn 差异以及常用命令</title>
    <url>/2019/07/01/npm&amp;&amp;yarn/</url>
    <content><![CDATA[<p>yarn 从去年vue-cli更新以来一直用，但一直都没认真了解过</p>
<h2 id="yarn-背景介绍"><a href="#yarn-背景介绍" class="headerlink" title="yarn 背景介绍"></a>yarn 背景介绍</h2><p>安装方法 <a href="https://yarn.bootcss.com/docs/install">三种安装方式</a><br>Yarn 是一个包管理器，代码通过包（package） 或者模块（module）的方式来共享， 一个包里包含所有需要共享的代码，以及描述包信息的文件，称为 package.json 。</p>
<h2 id="yarn-npm-差异"><a href="#yarn-npm-差异" class="headerlink" title="yarn npm 差异"></a>yarn npm 差异</h2><ul>
<li>同步安装：npm 是按照队列执行每个 package，Yarn 是同步执行所有任务</li>
<li>离线模式：Yarn可以从缓存中获取以前安装过的安装包，而npm每次都从网络下载</li>
<li>安装版本统一：yarn.lock 文件记录了所有安装模块的版本号，这样使我们每次拉取同一个项目依赖时使用都是一样的版本号，而 npm 需要执行 npm shrinkwrap 才会生成一个锁定文件 npm-shrinkwrap.json</li>
<li>npm 输出内容多长，安装慢就算了还老是失败，相较而言 yarn 真的快多了</li>
</ul>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>更多命令 <a href="https://yarn.bootcss.com/docs/cli/">官网 CLI 命令</a></p>
<p><strong>npm 命令</strong>|<strong>yarn 命令</strong>|<strong>命令介绍</strong><br>:—-:|:—-:|:—:|:—:<br>npm install xxx  <br>  npm i xxx | yarn | 安装但不写入package.json<br>npm install –save xxx  <br>  npm i -s xxx | yarn add xxx | 安装xxx模块，并且记录到package.json字段对应的dependency<br>npm install –save-dev xxx  <br>  npm i -D xxx | yarn add xxx –dev | 安装xxx模块，并且记录到package.jso字段对应的dev-dependency是开发环境必须依赖的模块<br>npm install –global xxx  <br>  npm i -g xxx | yarn global add xxx | 全局安装xxx模块，如果模块里package.json有bin配置，会自动链接，作为cli命令<br>npm uninstall react –save | yarn remove taco | 安装并记录package.json中的dependency字段<br>npm update –save | yarn upgrade | 更新并记录package.json中的dependency字段</p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://yarn.bootcss.com/">官网命令</a><br><a href="https://zhuanlan.zhihu.com/p/27449990">知乎文章：npm和yarn的区别，我们该如何选择？</a></p>
]]></content>
      <categories>
        <category>Others</category>
      </categories>
      <tags>
        <tag>yarn</tag>
      </tags>
  </entry>
  <entry>
    <title>python操作mysql/mysql增删查改语句</title>
    <url>/2018/08/09/python_mysql/</url>
    <content><![CDATA[<h1 id="PyMySQL安装-方法介绍"><a href="#PyMySQL安装-方法介绍" class="headerlink" title="PyMySQL安装/方法介绍"></a>PyMySQL安装/方法介绍</h1><p>PyMySQL是由python编写的，速度上比不上 MySQLdb，但是他安装非常方便同时也兼容 MySQL-python</p>
<p>pip install pymssql</p>
<h1 id="基本方法介绍"><a href="#基本方法介绍" class="headerlink" title="基本方法介绍"></a>基本方法介绍</h1><p>close():关闭此connect对象<br>commit():提交当前事务<br>rollback():取消当前事务<br>cursor():创建游标对象</p>
<h2 id="关于游标"><a href="#关于游标" class="headerlink" title="关于游标"></a>关于游标</h2><p>游标是一段私有的SQL工作区,也就是一段内存区域,用于暂时存放受SQL语句影响到的数据。通俗理解就是将受影响的数据暂时放到了一个内存区域的虚表中，而这个虚表就是游标。</p>
<p>也就是说在commit之前你操作的都是这个游标，操作错误你可以使用rollback()方法回滚，如果在增删改之后没有commit所有操作都是白搭</p>
<h2 id="操作游标的方法"><a href="#操作游标的方法" class="headerlink" title="操作游标的方法"></a>操作游标的方法</h2><p>close():关闭此游标对象<br>fetchone():得到结果集的下一行<br>fetchmany([size = cursor.arraysize]):得到结果集的下几行<br>fetchall():得到结果集中剩下的所有行<br>excute(sql[, args]):执行一个数据库查询或命令<br>excutemany(sql, args):执行多个数据库查询或命令</p>
<h1 id="现在上代码"><a href="#现在上代码" class="headerlink" title="现在上代码"></a>现在上代码</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="comment"># 连接mysql</span></span><br><span class="line"><span class="comment"># host为数据库的主机IP地址, port为MySQL的默认端口号, user为数据的用户名, password为数据库的登录密码, db为数据库的名称</span></span><br><span class="line">config = &#123;</span><br><span class="line">    <span class="string">&#x27;host&#x27;</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;port&#x27;</span>: <span class="number">3306</span>,</span><br><span class="line">    <span class="string">&#x27;user&#x27;</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;database&#x27;</span>: <span class="string">&#x27;reptiledata&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">db = pymysql.connect(**config)</span><br><span class="line">cursor = db.cursor() <span class="comment"># 建立游标对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -----------------------------------------表操作----------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># 如果存在就删除表</span></span><br><span class="line">cursor.execute(<span class="string">&quot;drop table if exists user&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新增表</span></span><br><span class="line">cursor.execute(<span class="string">&quot;&quot;&quot;create table if not exists user(</span></span><br><span class="line"><span class="string">                  id int auto_increment primary key,</span></span><br><span class="line"><span class="string">                  name varchar(5),</span></span><br><span class="line"><span class="string">                  sex  char(1),</span></span><br><span class="line"><span class="string">                  id_card  char(18),</span></span><br><span class="line"><span class="string">                  phone  varchar(14),</span></span><br><span class="line"><span class="string">                  address  varchar(12),</span></span><br><span class="line"><span class="string">                  create_time time)&quot;&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改自增长Id,数据库新增的数据会从1000开始但是原来的数据不会改变</span></span><br><span class="line">cursor.execute(<span class="string">&#x27;alter table user AUTO_INCREMENT=1000&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新增数据库表字段</span></span><br><span class="line">cursor.execute(<span class="string">&#x27;alter table user add plus varchar(8)&#x27;</span>)</span><br><span class="line"><span class="comment"># --------------------------插入数据-------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># 批量插入数据</span></span><br><span class="line">cursor.execute(<span class="string">&#x27;alter table user drop plus&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入单条数据但因为后面用了db.rollback()回滚，所以此条数据不会被添加</span></span><br><span class="line">cursor.execute(<span class="string">&quot;&quot;&quot;insert into user(name, sex, id_card, phone, address)</span></span><br><span class="line"><span class="string">        values (&#x27;李四&#x27;, &#x27;女&#x27;, &#x27;511569845612354879&#x27;, &#x27;10086&#x27;, &#x27;数据不会被添加&#x27;)&quot;&quot;&quot;</span>)</span><br><span class="line">db.rollback() </span><br><span class="line"></span><br><span class="line"><span class="comment"># 批量插入数据，如果不列出字段名mysql会按照顺序添加</span></span><br><span class="line">sql = <span class="string">&quot;&quot;&quot;insert into user(name, sex, id_card, phone, address)</span></span><br><span class="line"><span class="string">        values (%s, %s, %s, %s, %s)&quot;&quot;&quot;</span></span><br><span class="line">sql_data = [[<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;511569845612354879&#x27;</span>, <span class="string">&#x27;10086&#x27;</span>, <span class="string">&#x27;太古里77号&#x27;</span>],</span><br><span class="line">            [<span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;511569845612354879&#x27;</span>, <span class="string">&#x27;10086&#x27;</span>, <span class="string">&#x27;太古里77号&#x27;</span>],</span><br><span class="line">            [<span class="string">&#x27;王麻子子&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;511569845612354879&#x27;</span>, <span class="string">&#x27;10086&#x27;</span>, <span class="string">&#x27;太古里66号&#x27;</span>],</span><br><span class="line">            [<span class="string">&#x27;张二&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;511569845612354879&#x27;</span>, <span class="string">&#x27;10086&#x27;</span>, <span class="string">&#x27;太古里77号&#x27;</span>],</span><br><span class="line">            [<span class="string">&#x27;李五&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;511569845612354879&#x27;</span>, <span class="string">&#x27;10086&#x27;</span>, <span class="string">&#x27;太古里88号&#x27;</span>],</span><br><span class="line">            [<span class="string">&#x27;王麻子&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;511569845612354879&#x27;</span>, <span class="string">&#x27;10086&#x27;</span>, <span class="string">&#x27;太古里99号&#x27;</span>]]</span><br><span class="line">cursor.executemany(sql, sql_data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------------------------------------查询数据-----------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># order by 对查询结果进行排序 select 字段1,字段2,字段3 from 表名 order by 字段 desc(降序)||asc(升序)</span></span><br><span class="line">cursor.execute(<span class="string">&quot;select address,id from user order by id desc&quot;</span>)</span><br><span class="line">select = cursor.fetchall()</span><br><span class="line"><span class="built_in">print</span>(select)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 去重复查询 select distinct 字段 from 表名</span></span><br><span class="line">cursor.execute(<span class="string">&quot;select distinct address from user&quot;</span>)</span><br><span class="line">select = cursor.fetchall()</span><br><span class="line"><span class="built_in">print</span>(select)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分页查询 limit select 字段1，字段2 from 表名 limit 初始位置，记录数</span></span><br><span class="line">cursor.execute(<span class="string">&quot;select id, name, sex, id_card from user limit 3,6&quot;</span>)</span><br><span class="line">select = cursor.fetchall()</span><br><span class="line"><span class="built_in">print</span>(select)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 精准查询 in 只查找括号内的数据； not in 则相反</span></span><br><span class="line">cursor.execute(<span class="string">&quot;select * from user where ID in (1001,1003)&quot;</span>)</span><br><span class="line">select = cursor.fetchall()</span><br><span class="line"><span class="built_in">print</span>(select)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 精准查询 between and 查找1001-1003范围内的数据；not between and 相反</span></span><br><span class="line">cursor.execute(<span class="string">&quot;select * from user where ID between 1001 and 1003&quot;</span>)</span><br><span class="line">select = cursor.fetchall()</span><br><span class="line"><span class="built_in">print</span>(select)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模糊查询 like (% 代表任意字符 _ 代表单个字符)；not like相反</span></span><br><span class="line">cursor.execute(<span class="string">&quot;select * from user where name like &#x27;_麻%&#x27;&quot;</span>)</span><br><span class="line">select = cursor.fetchall()</span><br><span class="line"><span class="built_in">print</span>(select)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多条件查询 and 关键字</span></span><br><span class="line">cursor.execute(<span class="string">&quot;select * from user where sex=&#x27;女&#x27; and address=&#x27;太古里77号&#x27;&quot;</span>)</span><br><span class="line">select = cursor.fetchall()</span><br><span class="line"><span class="built_in">print</span>(select)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多条件查询 or 关键字 只需满足一个条件</span></span><br><span class="line">cursor.execute(<span class="string">&quot;select * from user where name=&#x27;王麻子子&#x27; or address=&#x27;太古里77号&#x27; &quot;</span>)</span><br><span class="line">select = cursor.fetchall()</span><br><span class="line"><span class="built_in">print</span>(select)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ------删除数据和更新数据 or,and,between and,like等关键字可以查询到多条数据然后批量删除或者更新-----------------------------------</span></span><br><span class="line"><span class="comment"># 删除数据</span></span><br><span class="line">cursor.execute(<span class="string">&quot;delete from user where name=&#x27;王麻子子&#x27; or address=&#x27;太古里77号&#x27;&quot;</span>)</span><br><span class="line"><span class="comment"># 数据库清空</span></span><br><span class="line">cursor.execute(<span class="string">&quot;truncate table user&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新数据</span></span><br><span class="line">cursor.execute(<span class="string">&quot;update user set name = &#x27;更新&#x27; where ID in (1005,1006)&quot;</span>)</span><br><span class="line"></span><br><span class="line">cursor.close()  <span class="comment"># 关闭游标对象</span></span><br><span class="line">db.commit()  <span class="comment"># 提交操作</span></span><br><span class="line">db.close()  <span class="comment"># 关闭数据库</span></span><br></pre></td></tr></table></figure>



<p>欢迎留言交流  (´▽`ʃ♡ƪ)</p>
]]></content>
      <categories>
        <category>Others</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python爬虫之selenium自动化测试让你爬虫更像用户</title>
    <url>/2018/08/22/python_selenium/</url>
    <content><![CDATA[<p>全程序自动化操作<br><img src="/2018/08/22/python_selenium/selenium.gif" alt="demo效果"></p>
<p>先科普一下selenium，这是一个用于Web应用程序测试的工具，支持多种浏览器多种语言</p>
<p>框架底层使用JavaScript模拟真实用户对浏览器进行操作，Selenium测试直接运行在浏览器中，代码执行时，可以自动打开浏览器/表单输入/按钮点击，就像真实用户在操作的一样</p>
<p>真真是反爬虫的一大神器啊</p>
<p>先附上文档了解一些基础知识：<a href="https://selenium-python.readthedocs.io/index.html">官方文档</a><a href="https://selenium-python-zh.readthedocs.io/en/latest/installation.html">中文文档</a></p>
<h1 id="关于安装"><a href="#关于安装" class="headerlink" title="关于安装"></a>关于安装</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cmd命令：pip3 install selenium</span><br></pre></td></tr></table></figure>

<p>下载谷歌驱动安装：<a href="https://sites.google.com/a/chromium.org/chromedriver/downloads">https://sites.google.com/a/chromium.org/chromedriver/downloads</a> </p>
<p>放在谷歌文件夹C:\Program Files (x86)\Google\Chrome\Application下再把这路径加入环境变量</p>
<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><p><em>Xpath是非常强大的元素查找方式，它可以定位到页面上的任意元素</em></p>
<p>我这里只介绍了一些今天这个实例会用到的</p>
<h2 id="首先先了解一下它的一些语法"><a href="#首先先了解一下它的一些语法" class="headerlink" title="首先先了解一下它的一些语法"></a><em>首先先了解一下它的一些语法</em></h2><p>// ： 相对路径，以这个开头表示从寻找文档的根节点开始查找元素，若出现在xpath路径中则表示寻找父节点下任意符合条件的子节点，不管嵌套了多少层级<br>/：绝对路径，表示寻找父节点下的第一层子元素也就是直接子元素<br>“//标签名[@属性名=’属性值’]”：表示从根目录查找和标签名、属性值相匹配的元素<br>几乎所有的Xpath路径都是以上面3种方法来组合的</p>
<h2 id="精准定位"><a href="#精准定位" class="headerlink" title="精准定位"></a>精准定位</h2><p>以下面这个百度文库这段html举例</p>
<p><img src="http://pe5zctnu4.bkt.clouddn.com/selenium.PNG" alt="shili"></p>
<p>要获取输入框怎么写，写法不只一种哈，这地方你也可以直接使用input的id获取元素（一个页面正常来讲不会有相同的id）</p>
<p>input = browser.find_element(By.XPATH, “//form[@name=’ftop’]//input[@id=’kw’]”)</p>
<p>上面这行是用的是find_element是查找单个元素，api在下面可以先看下</p>
<p>表示从根目录查找第一个匹配路径 name为flop的form标签 ，找到这个元素之后再去他所有子元素里面查找id为kw的input框</p>
<p>假设这个页面有两个name为ftop的form标签（name一样的form标签讲道理一个页面是不会有两个现在只是假设，有可能你会遇到class名一样的div标签）</p>
<p>那么获取第二个form标签：”//form[@name=’ftop’][2]//input[@id=’kw’]”, 就在大括号后面加上他的索引，索引是从1开始的</p>
<h2 id="模糊定位"><a href="#模糊定位" class="headerlink" title="模糊定位"></a>模糊定位</h2><p>contains关键字：input = browser.find_element(By.XPATH, “//input[contains(@id, ‘kw’)]”)<br>表示寻找页面中id属性值包含kw所有input元素</p>
<p>text关键字：input = browser.find_element(By.XPATH, “//button[contains(text(), ‘搜索’)]”)<br>表示寻找页面中文字中包含有搜索的所有button元素</p>
<p>starts-with关键字：input = browser.find_element(By.XPATH, “//a[starts-with(@href,’http://‘)]”)<br>表示寻找页面中href属性以http://开头的a标签</p>
<p>ends-with关键字：input = browser.find_element(By.XPATH, “//a[ends-with(@href,’com’)]”)<br>表示寻找页面中href属性以’com’结尾的a标签<br>关于ends-widh我在使用的时候会报错提示语法不正确而且网上关于ends-with介绍也很少所以我没有找到原因如果大家知道欢迎留言告诉我不胜感激 (´▽`ʃ♡ƪ)</p>
<p><em>这是一个简单的关于用selenium和xpath来做模糊查询的小实例</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">chrome_options = Options()</span><br><span class="line"></span><br><span class="line">chrome_options.add_argument(<span class="string">&quot;--headless&quot;</span>)</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome(chrome_options=chrome_options)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开百度网址</span></span><br><span class="line"></span><br><span class="line">browser.get(<span class="string">&quot;https://www.baidu.com/&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取第一个http链接</span></span><br><span class="line"></span><br><span class="line">element_contains = browser.find_element(By.XPATH, <span class="string">&quot;//a[contains(@href, &#x27;http://&#x27;)]&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(element_contains.text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取第一个包含文字中包含&#x27;地图&#x27;的a标签</span></span><br><span class="line">element_text = browser.find_element(By.XPATH, <span class="string">&quot;//a[contains(text(), &#x27;地图&#x27;)]&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(element_text.text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取第一个文字以&#x27;贴&#x27;开头的a标签</span></span><br><span class="line">element_starts = browser.find_element(By.XPATH, <span class="string">&quot;//a[starts-with(text(), &#x27;贴&#x27;)]&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(element_starts.text)</span><br><span class="line"></span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure>

<h2 id="selenium的一些常用api"><a href="#selenium的一些常用api" class="headerlink" title="selenium的一些常用api"></a>selenium的一些常用api</h2><p><em>find_element和find_elements的使用</em></p>
<p>browser.find_element(By.XPATH, ‘//button[text()=”Some text”]’)  //单个元素获取</p>
<p>browser.find_elements(By.XPATH, ‘//button’) //多个元素获取</p>
<p>ID = “id”<br>XPATH = “xpath”<br>LINK_TEXT = “link text”<br>PARTIAL_LINK_TEXT = “partial link text”<br>NAME = “name”<br>TAG_NAME = “tag name”<br>CLASS_NAME = “class name”<br>CSS_SELECTOR = “css selector”</p>
<p><em>单个元素选取（多个元素选取：就是在element后面加一个s，比如find_elements_by_id）：</em></p>
<p>find_element_by_id<br>find_element_by_name<br>find_element_by_xpath<br>find_element_by_link_text<br>find_element_by_partial_link_text<br>find_element_by_tag_name<br>find_element_by_class_name<br>find_element_by_css_selector</p>
<p><em>获取到标签之后的界面交互：</em></p>
<p>input.send_keys(“输入中”)  <br>input.clear()  清空输入框<br>button.click()  按钮点击</p>
<p><em>常用的控制浏览器的api：</em></p>
<p>browser.back() 浏览器后退<br>browser.forward() 浏览器前进<br>browser.get(“<a href="https://www.zhihu.com/explore&quot;">https://www.zhihu.com/explore&quot;</a>) 打开页面<br>browser.execute_script(“alert(‘To Button’)”)  执行js代码<br>print(browser.window_handles) 所有的标签<br>browser.switch_to_window(browser.window_handles[1]) 切换到指定标签页<br>browser.close() 关闭当前标签页</p>
<h1 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h1><h2 id="关于页面模块引入"><a href="#关于页面模块引入" class="headerlink" title="关于页面模块引入"></a>关于页面模块引入</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 引入浏览器驱动</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里我们需要引入浏览器内核才可以使用浏览器的无头模式，这里我引入的是chrome</span></span><br><span class="line"><span class="comment"># Gecko：是Firefox浏览器的内核</span></span><br><span class="line"><span class="comment"># Trident：是IE浏览器的内核</span></span><br><span class="line"><span class="comment"># Blink：是webkit的一个分支版本，由google开发</span></span><br><span class="line"><span class="comment"># 关于什么是无头模式：即headless browser，是一种没有界面的浏览器，主要是用作爬虫，用以捕捉Web上的各类数据</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 主要用于使用两个私有方法find_element和find_elements</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 调用键盘api</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用于时间延迟</span></span><br><span class="line"><span class="keyword">import</span> time</span><br></pre></td></tr></table></figure>

<h2 id="功能代码"><a href="#功能代码" class="headerlink" title="功能代码"></a>功能代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">chrome_options = Options()</span><br><span class="line"></span><br><span class="line">chrome_options.add_argument(<span class="string">&quot;--headless&quot;</span>)</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开页面</span></span><br><span class="line">browser.get(<span class="string">&quot;https://wenku.baidu.com/&quot;</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取搜索输入框</span></span><br><span class="line"><span class="built_in">input</span> = browser.find_element(ID, <span class="string">&#x27;kw&#x27;</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入内容</span></span><br><span class="line"><span class="built_in">input</span>.send_keys(<span class="string">&quot;IT/计算机&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟回车</span></span><br><span class="line"><span class="built_in">input</span>.send_keys(Keys.ENTER) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取&#x27;我知道了&#x27;按钮</span></span><br><span class="line">btn = browser.find_element(By.XPATH, <span class="string">&quot;//div[@class=&#x27;new-filter-box fc5&#x27;]//span[@class=&#x27;btn-know&#x27;]&quot;</span>)</span><br><span class="line"></span><br><span class="line">btn.click()</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">1</span>) <span class="comment"># 时间延迟</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 点击列表的第一条数据</span></span><br><span class="line">btn = browser.find_element(By.XPATH, <span class="string">&quot;//div[@class=&#x27;main&#x27;]//dl[1]//a[1]&quot;</span>)</span><br><span class="line"></span><br><span class="line">btn.click()</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将browser页面切换至当前页面</span></span><br><span class="line">browser.switch_to_window(browser.window_handles[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭当前页面</span></span><br><span class="line">browser.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换至第一个页面</span></span><br><span class="line">browser.switch_to_window(browser.window_handles[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 点击列表的第二条数据</span></span><br><span class="line">btn = browser.find_element(By.XPATH, <span class="string">&quot;//div[@class=&#x27;main&#x27;]//dl[2]//a[1]&quot;</span>)</span><br><span class="line"></span><br><span class="line">btn.click()</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 视图切换至第一个页面</span></span><br><span class="line">browser.switch_to_window(browser.window_handles[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 去往百度页面</span></span><br><span class="line">browser.get(<span class="string">&quot;https://baidu.com/&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印所有标签</span></span><br><span class="line"><span class="built_in">print</span>(browser.window_handles)</span><br></pre></td></tr></table></figure>
<p>开启无头模式<br>只需要修改一行代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">browser = webdriver.Chrome(chrome_options=chrome_options)</span><br></pre></td></tr></table></figure>

<p>欢迎留言交流  (´▽`ʃ♡ƪ)</p>
]]></content>
      <categories>
        <category>Others</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python爬虫之爬取掘金网首页存入mysql数据库</title>
    <url>/2018/08/07/python_%E7%88%AC%E8%99%AB/</url>
    <content><![CDATA[<p>博主是个前端小白，最近在学习爬虫，写个实战系列也是想记录自己学习的过程，以便后续回顾</p>
<p>欢迎大家一起交流学习、共同进步</p>
<p>这篇文章达成的效果是爬掘金网的首页的数据存到mysql数据库里</p>
<p><img src="https://img-blog.csdn.net/2018080714283577?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RvbmdfMTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="效果"><br><img src="https://img-blog.csdn.net/20180807143043893?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RvbmdfMTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="效果"></p>
<p>做这个实战你需要具有一点点python的基础知识，当然没有也行可以复制代码先跑一跑感受一下会有动力一点</p>
<p>爬取的网站：<a href="https://juejin.im/timeline">https://juejin.im/timeline</a></p>
<p>系统：win10</p>
<p>python版本:3.7</p>
<p>MYSQL安装包下载：<a href="https://dev.mysql.com/downloads/windows/installer/">https://dev.mysql.com/downloads/windows/installer/</a> </p>
<p><img src="https://img-blog.csdn.net/20180802145942417?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RvbmdfMTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="效果"></p>
<p>mysql-installer-web-community  15.9M那个是在线安装</p>
<p>mysql-installer-community 推荐下载第二个离线安装</p>
<p>现在这个安装包好像不分32位还是64位，我是64位的安装成功，MSI安装版安装挺简单的我就不赘述了（其实我安装蛮久了没记录下来）</p>
<p>安装完成可以通过·mysql -u root -p查看</p>
<p>mysql安装成功后你还需要一个python操作mysql的库，cmd执行使用pip安装pymysql:</p>
<p>pip install pymysql<br>环境准备好后就开始愉快的学习吧</p>
<p>网站分析<br>我们进入网站<a href="https://juejin.im/%EF%BC%8C%E7%84%B6%E5%90%8E%E6%89%93%E5%BC%80f12%EF%BC%88%E5%8D%9A%E4%B8%BB%E7%94%A8%E7%9A%84%E6%98%AFchrome%E6%B5%8F%E8%A7%88%E5%99%A8%EF%BC%8C%E5%9C%A8%E5%89%8D%E7%AB%AF%E7%9C%BC%E9%87%8Cchrome%E6%98%AF%E6%9C%80%E5%A5%BD%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B2%A1%E6%9C%89%E4%B9%8B%E4%B8%80%EF%BC%89">https://juejin.im/，然后打开f12（博主用的是chrome浏览器，在前端眼里chrome是最好浏览器没有之一）</a></p>
<p>掘金网是个动态网站，即客户端（浏览器）根据服务端（服务器）返回的数据动态渲染网页</p>
<p>那么数据从哪儿来，服务端会根据客户端不同的请求或者请求参数的差异来返回数据</p>
<p>这里我们需要登陆下，我们登陆成功即通过服务端验证后服务器会签发一个 Token发送给客户端，你可以理解为一个验证身份的令牌，客户端收到 Token 以后把它存储起来，每次向服务端请求资源的时候都需要带着这个token，服务端收到请求，去验证客户端请求里面带着的 Token，如果验证成功，就向客户端返回请求的数据</p>
<p><img src="https://img-blog.csdn.net/20180807120526739?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RvbmdfMTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="效果"></p>
<p>我们可以看到有很多请求，什么图片、脚本资源、svg很多</p>
<p>点击XHR按钮过滤请求只显示XMLHttpRequest方法发送的请求</p>
<p><img src="https://img-blog.csdn.net/20180807120941504?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RvbmdfMTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="效果"></p>
<p>过滤之后现在挨着查看，找到返回文章数据的那条请求</p>
<p>大部分数据都是页面或者服务器做判断用的，我们提取这些参数就好</p>
<p>[‘category’][‘name’] 文章分类<br>[‘title’] 文章标题<br>[‘content’] 文章概要<br>[‘originalUrl’] 文章链接<br>[’tags’] 文章标签<br>[‘user’][‘username’] 文章作者</p>
<p><img src="https://img-blog.csdn.net/20180807124337750?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RvbmdfMTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="效果"></p>
<p>然后我们查看他的Headers，滑到底部可以看到uery string params是由客户端发给服务器时请求携带的参数</p>
<p><img src="https://img-blog.csdn.net/20180807130603595?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RvbmdfMTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="参数"></p>
<p>这些参数里面有个limit是请求的条数，就是你请求多少条就会返回多少条数据</p>
<p>现在上代码<br>需要3个库，除了第一个pymsql以为都是python自带的</p>
<figure class="highlight capnproto"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql <span class="comment"># 操作mysql的库</span></span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request, parse <span class="comment">#请求需要的库</span></span><br><span class="line"><span class="keyword">import</span> json <span class="comment"># 处理参数需要的库</span></span><br></pre></td></tr></table></figure>
<p>我们先发送请求获取数据 </p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">def juejin_re<span class="string">q(data_num)</span>: <span class="comment"># data_num是请求的条数</span></span><br><span class="line">    url = <span class="string">&#x27;https://timeline-merger-ms.juejin.im/v1/get_entry_by_rank&#x27;</span> <span class="comment"># 请求的url</span></span><br><span class="line">    req_data = &#123;  <span class="comment"># 请求需要携带的参数</span></span><br><span class="line">        <span class="string">&#x27;src&#x27;</span>: <span class="string">&#x27;web&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;uid&#x27;</span>: <span class="string">&#x27;5b5ebcd1f265da0f60132076&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;device_id&#x27;</span>: <span class="number">1533608440568</span>,</span><br><span class="line">        <span class="string">&#x27;token&#x27;</span>: <span class="string">&#x27;你的token&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;limit&#x27;</span>: data_num,</span><br><span class="line">        <span class="string">&#x27;category&#x27;</span>: <span class="string">&#x27;all&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;recomment&#x27;</span>: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    req_data = str(parse.urlencode(req_data, <span class="string">&#x27;utf-8&#x27;</span>)) <span class="comment"># 由于是get请求所以我们在使用parse.urlencode()方法转换编码格式后还需要使用str()方法转换为字符串</span></span><br><span class="line">    json_data = request.urlopen(url+<span class="string">&#x27;?&#x27;</span>+req_data) <span class="comment"># 拼凑url发送请求</span></span><br><span class="line">    <span class="keyword">print</span>(<span class="string">&#x27;数据请求成功&#x27;</span>)</span><br><span class="line">    json_data = json_data.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)  <span class="comment"># 拿到数据转换编码格式</span></span><br><span class="line">    json_data = json.loads(json_data)  <span class="comment"># 使用json.loads()将字符串序列化</span></span><br><span class="line">    json_data = json_data[<span class="string">&#x27;d&#x27;</span>][<span class="string">&#x27;entrylist&#x27;</span>] <span class="comment"># 获取到数据列表</span></span><br><span class="line">    sql_data = [] <span class="comment"># 最后储存到数据的变量</span></span><br><span class="line">    <span class="keyword">for</span> item in json_data: <span class="comment"># 循环遍历列表提取需要的数据</span></span><br><span class="line">        tag = [] </span><br><span class="line">        <span class="keyword">for</span> aa in item[<span class="string">&#x27;tags&#x27;</span>]: <span class="comment"># 提取标签</span></span><br><span class="line">            tag.append(aa[<span class="string">&#x27;title&#x27;</span>])</span><br><span class="line">        sql_data.append((item[<span class="string">&#x27;category&#x27;</span>][<span class="string">&#x27;name&#x27;</span>],  item[<span class="string">&#x27;title&#x27;</span>], item[<span class="string">&#x27;content&#x27;</span>], item[<span class="string">&#x27;originalUrl&#x27;</span>], str(tag), item[<span class="string">&#x27;user&#x27;</span>][<span class="string">&#x27;username&#x27;</span>],))</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">&#x27;一共有%s条数据&#x27;</span> % len(sql_data))</span><br><span class="line">    <span class="keyword">return</span> sql_data</span><br></pre></td></tr></table></figure>

<p>打开workbench，这是自带的一款可视化的sql操作工具</p>
<p><img src="https://img-blog.csdn.net/20180802151203471?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RvbmdfMTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="参数"></p>
<p>首先我们先新建一个连接<br>点击新建一个连接—–填上连接名字hellosql—–点击ok—–在弹出的弹框中输入你的密码–点击ok</p>
<p><img src="https://img-blog.csdn.net/20180803104853455?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RvbmdfMTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="参数"></p>
<p>连接建立后我们新建一个数据库，在左侧红圈空白地方右键—create scheme（新建一个数据库），这地方我已经建了</p>
<p><img src="https://img-blog.csdn.net/20180807133227686?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RvbmdfMTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="参数"></p>
<p>输入数据库名字reptiledata—点击apply—出现一个弹框继续点击apply，这样我们就新建了一个数据库</p>
<p><img src="https://img-blog.csdn.net/20180807133445579?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RvbmdfMTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="参数"></p>
<p>这是操作数据库的代码，获取到请求的数据后将数据return处理在传给juejin_sql函数，所以把这段代码放在上面那段代码后面 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">juejin_sql</span>(<span class="params">sql_data</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;连接数据库&#x27;</span>)</span><br><span class="line">    db = pymysql.connect(host=<span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">                        port=<span class="number">3306</span>, <span class="comment"># 端口号</span></span><br><span class="line">                        user=<span class="string">&#x27;root&#x27;</span>, </span><br><span class="line">                        password=<span class="string">&#x27;123456&#x27;</span>, <span class="comment"># 密码</span></span><br><span class="line">                        database=<span class="string">&#x27;reptiledata&#x27;</span>) <span class="comment"># 数据库</span></span><br><span class="line">    cursor = db.cursor() <span class="comment"># 建立一个游标对象</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment">#判断表是否存在，若不存在则新建</span></span><br><span class="line">        cursor.execute(<span class="string">&quot;&quot;&quot;CREATE TABLE IF NOT EXISTS juejin(</span></span><br><span class="line"><span class="string">                    category  TEXT,</span></span><br><span class="line"><span class="string">                    title  TEXT,</span></span><br><span class="line"><span class="string">                    content  TEXT,</span></span><br><span class="line"><span class="string">                    originalUrl  TEXT,</span></span><br><span class="line"><span class="string">                    tags  TEXT,</span></span><br><span class="line"><span class="string">                    username TEXT)&quot;&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Table &#x27;juejin&#x27; already exists&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    sql = <span class="string">&quot;&quot;&quot;insert into juejin(category, title, content, originalUrl, tags, username)</span></span><br><span class="line"><span class="string">            values (%s, %s, %s, %s, %s, %s)&quot;&quot;&quot;</span> <span class="comment"># sql语句</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;正在批量添加&#x27;</span>)</span><br><span class="line">    cursor.executemany(sql, sql_data) <span class="comment"># 批量添加</span></span><br><span class="line">    cursor.execute(<span class="string">&#x27;select count(*) from juejin&#x27;</span>)</span><br><span class="line">    results = cursor.fetchall() <span class="comment"># 查询全部总条数</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;数据库目前有%d条数据&#x27;</span> % results[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line">    db.commit()  <span class="comment"># 对于数据增删改之后一定要提交操作</span></span><br><span class="line">    cursor.close()  <span class="comment"># 关闭游标</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;操作完成关闭数据库关闭游标&#x27;</span>)</span><br><span class="line">    db.close()  <span class="comment"># 关闭数据库连接</span></span><br><span class="line"></span><br><span class="line">juejin_sql(juejin_req(<span class="number">100</span>))</span><br></pre></td></tr></table></figure>
<p>欢迎留言交流  (´▽`ʃ♡ƪ)</p>
]]></content>
      <categories>
        <category>Others</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Service Worker 缓存静态资源</title>
    <url>/2022/07/09/service_worker/</url>
    <content><![CDATA[<p>最近有用到 <code>Service Worker</code> 和 <code>CacheStorage</code> 做离线缓存,  一方面是因为项目资源包着实大, 另一方面也是因为之前没有用缓存, 这也是需要的优化。<br>相比起 <code>Http</code> 缓存或者 <code>manifest</code> 文件管理缓存（如果还有其他缓存方法, 欢迎提出来讨论！）,  <code>Service Worker</code> 完全由前端维护, 让前端对资源拥有了更大的控制权, 能自由的对资源进行增删改, 另一方面也是因为自己没用过。也碰到了一些问题, 查阅了一些资料, 希望对你有帮助。</p>
<h2 id="Service-Worker"><a href="#Service-Worker" class="headerlink" title="Service Worker"></a><code>Service Worker</code></h2><p>附上 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Service_Worker_API">MDN 文档</a> ,还有一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Service_Worker_API/Using_Service_Workers#service_workers_demo">Demo</a>  除了 MDN, <a href="https://developer.chrome.com/docs/workbox/service-Worker-overview/">Google 的文档</a>也是很有帮助的</p>
<p><code>Service Worker</code> 的特点</p>
<ul>
<li>是一个<strong>浏览器与网络之间的拦截器</strong>, 通过 <code>Service Worker</code> 你可以拦截任何网络请求</li>
<li>必须在 Https 下运行, 但 localhost 作为开发环境也可以</li>
<li>拥有<strong>自己的 Worker 上下文</strong> <a href="https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerGlobalScope">ServiceWorkerGlobalScope</a> (继承于 WorkerGlobalScope，而 WorkerGlobalScope 继承于 EventTarget), 与主线程 (原有的浏览器上下文) 互不干扰，<code>ServiceWorkerGlobalScope</code> 包含的一些属性<ul>
<li>Caches，这个后面会提到</li>
<li>Clients，</li>
</ul>
</li>
<li>在主线程中需要使用 <code>navigator.serviceWorker</code>, 该对象的原型是 <code>ServiceWorkerContainer</code>, 包含注册，删除，更新 <code>Service Worker</code> 以及与 <code>Service Worker</code> 通信的方法。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">if</span> (<span class="string">&quot;serviceWorker&quot;</span> <span class="keyword">in</span> navigator) &#123;</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		<span class="keyword">const</span> registration = <span class="keyword">await</span> navigator.serviceWorker.register(<span class="string">&quot;/worker.js?v=&quot;</span> + version)</span><br><span class="line">		<span class="keyword">if</span> (registration.installing) &#123;</span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">&quot;Service worker installing&quot;</span>)</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (registration.waiting) &#123;</span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">&quot;Service worker installed&quot;</span>)</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (registration.active) &#123;</span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">&quot;Service worker active&quot;</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">		<span class="built_in">console</span>.error(<span class="string">`Registration failed with <span class="subst">$&#123;error&#125;</span>`</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>如同页面有 <code>load</code> <code>unload</code> 等生命周期事件一样, <code>Service Worker</code> 也拥有自己的生命周期, 下图来自 MDN, 描绘了 <code>Service Worker</code> 的生命周期<br>  <img src="/2022/07/09/service_worker/sw-lifecycle.png" alt="生命周期"><br>  安装中 =&gt; 安装后 =&gt; 激活中 =&gt; 激活后 =&gt; 结束<br>  用户第一次进入网页，只是安装 woker，那么第二次进入网站才会激活 worker，激活后才会开始响应各类事件</li>
<li>相关事件，可以使用 <code>addEventListener</code> 进行监听<ul>
<li>install, 生命周期事件</li>
<li>activate，生命周期事件</li>
<li>fetch，当浏览器发起请求获取资源时，可在此监听和拦截<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">self.addEventListener(<span class="string">&quot;fetch&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">const</span> &#123; request, currentTarget &#125; = event</span><br><span class="line">		event.respondWith(</span><br><span class="line">			caches.match(_name).then(<span class="function">(<span class="params">cachedResponse</span>) =&gt;</span> &#123;</span><br><span class="line">				<span class="keyword">if</span> (cachedResponse) <span class="keyword">return</span> cachedResponse</span><br><span class="line">				<span class="keyword">return</span> fetch(request).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">					<span class="keyword">return</span> caches.open(cacheName).then(<span class="function"><span class="keyword">function</span> (<span class="params">cache</span>) </span>&#123;</span><br><span class="line">						cache.put(_name, response.clone())</span><br><span class="line">						<span class="keyword">return</span> response</span><br><span class="line">					&#125;)</span><br><span class="line">				&#125;)</span><br><span class="line">			&#125;)</span><br><span class="line">		)</span><br><span class="line">	&#125;)</span><br></pre></td></tr></table></figure></li>
<li>push，</li>
<li>sync</li>
</ul>
</li>
</ul>
<h2 id="caches-amp-amp-cache"><a href="#caches-amp-amp-cache" class="headerlink" title="caches &amp;&amp; cache"></a><code>caches</code> &amp;&amp; <code>cache</code></h2><p>上面提到了 <code>Service Worker</code> 可以拦截请求 =&gt; 拦截到静态资源的请求 =&gt; 获得 <code>Response</code> =&gt; 存储 <code>Response</code>, <code>caches</code> 登场。</p>
<p><code>caches</code> 被定义为 <code>ServiceWorkerGlobalScope</code> 的一部分, 但也被暴露在主线程的作用域下, <code>ServiceWorkerGlobalScope.caches</code> 和  <code>Window.caches</code> 都可以调用, 所以 <code>caches</code> 并不一定只能和 <code>Worker</code> 搭配使用。</p>
<p>注意：这里有两个重要的 api, <code>caches</code> 和 <code>cahce</code>, 字面意思理解, 一个单数一个复数。</p>
<ul>
<li><code>cache</code>, 一个存储区域, 以 <code>Request / Response</code> 作为 <code>key / value</code> 的模式来进行存储, 包含 <code>add</code> <code>addAll</code> <code>keys</code> <code>delete</code> <code>match</code> <code>matchAll</code> <code>put</code> 等一些 <strong>对数据进行增删查改</strong> 的 api</li>
<li><code>caches</code>, 接口模型是 <code>CacheStorage</code>, 是一个 <code>cache</code> 实例的集合, 包含 <code>keys</code> <code>open</code> <code>delete</code> <code>has</code> <code>match</code> 等一些 <strong>对 <code>cache</code> 增删查改</strong> 的 api</li>
</ul>
<p>以上所有方法都是以 <code>promise</code> 的形式返回结果</p>
<p>如果我们需要操作数据, 那么需要先使用 <code>open</code> 方法获取 <code>cache</code> 实例, 如果该 <code>cache</code> 不存在就会新建一个</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">caches.open(cacheName).then(<span class="function"><span class="keyword">function</span> (<span class="params">cache</span>) </span>&#123;</span><br><span class="line">	<span class="comment">// todo...</span></span><br><span class="line">	<span class="comment">// 使用 Cache 实例上的方法操作数据</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="存储限制"><a href="#存储限制" class="headerlink" title="存储限制"></a>存储限制</h3><p>W3C 描绘了两种存储类型 <code>Temporary</code> 和 <code>Persistent</code>。<a href="https://www.w3.org/TR/quota-api/#storage-types">参考 W3C 文档 Temporary vs Persistent</a></p>
<p><code>CacheStorage</code> 属于 <code>Temporary</code>, 是作为类似 <code>temp/</code> 中的临时数据, 当浏览器存储到达了极限，那么会根据 <code>LRU(least recently used) policy</code> 来删除 <code>Temporary</code> 类型的数据，使存储再次回到限制内。（参考 MDN 文档 <a href="https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Browser_storage_limits_and_eviction_criteria">Browser storage limits and eviction criteria</a>）</p>
<h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><ul>
<li><p>我们可以在前端资源包中添加一个 <code>Worker.json</code> 的文件</p>
  <figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	useWorker: <span class="literal">true</span>, <span class="comment">// 是否启用 `Worker`，根据该属性来注销和注册 `Worker`</span></span><br><span class="line">	version: <span class="number">1.0</span> <span class="comment">// 项目版本号</span></span><br><span class="line">	swVersion: <span class="number">2.0</span> <span class="comment">// worker 的版本号</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在应用初始化时以接口的方式请求该 <code>Worker.json</code> 文件, 对比返回的版本和当前的版本来决定是否对资源进行增删改</p>
</li>
<li><p>通过修改 <code>swVersion</code> 版本号，也可以动态更新 <code>Worker.js</code> 文件</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">const</span> sw = &#123;</span><br><span class="line">	<span class="attr">registration</span>: <span class="keyword">async</span> (version) =&gt; &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="string">&quot;serviceWorker&quot;</span> <span class="keyword">in</span> navigator) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				<span class="keyword">const</span> registration = <span class="keyword">await</span> navigator.serviceWorker.register(<span class="string">&quot;/worker.js?v=&quot;</span> + version)</span><br><span class="line">				<span class="keyword">if</span> (registration.installing) &#123;</span><br><span class="line">					<span class="built_in">console</span>.log(<span class="string">&quot;Service worker installing&quot;</span>)</span><br><span class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span> (registration.waiting) &#123;</span><br><span class="line">					<span class="built_in">console</span>.log(<span class="string">&quot;Service worker installed&quot;</span>)</span><br><span class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span> (registration.active) &#123;</span><br><span class="line">					<span class="built_in">console</span>.log(<span class="string">&quot;Service worker active&quot;</span>)</span><br><span class="line">				&#125;</span><br><span class="line">			&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">				<span class="built_in">console</span>.error(<span class="string">`Registration failed with <span class="subst">$&#123;error&#125;</span>`</span>)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="attr">unregistration</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">		navigator.serviceWorker.getRegistrations().then(<span class="function">(<span class="params">registrations</span>) =&gt;</span> &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">let</span> registration <span class="keyword">of</span> registrations) &#123;</span><br><span class="line">				registration.unregister()</span><br><span class="line">				sw.cleanRes()</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="attr">cleanRes</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">		<span class="keyword">const</span> cacheName = <span class="string">&quot;myResource&quot;</span></span><br><span class="line">		caches.delete(cacheName).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">			res &amp;&amp; <span class="built_in">window</span>.location.reload()</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;,</span><br><span class="line">&#125;</span><br><span class="line">api.system.getFrontendVersion().then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (!res.useWorker) &#123;</span><br><span class="line">		Sw.unregistration()</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	Sw.registration(res.swVersion)</span><br><span class="line">	<span class="keyword">const</span> _new = <span class="string">`<span class="subst">$&#123;res.version&#125;</span>`</span>,</span><br><span class="line">		_old = <span class="string">`<span class="subst">$&#123;Settings.version&#125;</span>`</span></span><br><span class="line">	<span class="keyword">if</span> (_new !== _old) &#123;</span><br><span class="line">		Sw.cleanRes()</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Worker.js</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> resPath = <span class="string">&quot;static&quot;</span>,</span><br><span class="line">	cacheName = <span class="string">&quot;myResource&quot;</span>,</span><br><span class="line">	exclude = [<span class="string">&quot;version.json&quot;</span>]</span><br><span class="line">self.addEventListener(<span class="string">&quot;fetch&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">const</span> &#123; request, currentTarget &#125; = event</span><br><span class="line">	<span class="keyword">const</span> _name = isCacheable(request.url, currentTarget.registration.scope)</span><br><span class="line">	<span class="keyword">if</span> (_name)</span><br><span class="line">		event.respondWith(</span><br><span class="line">			caches.match(_name).then(<span class="function">(<span class="params">cachedResponse</span>) =&gt;</span> &#123;</span><br><span class="line">				<span class="keyword">if</span> (cachedResponse) <span class="keyword">return</span> cachedResponse</span><br><span class="line">				<span class="keyword">return</span> fetch(request).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">					<span class="keyword">return</span> caches.open(cacheName).then(<span class="function"><span class="keyword">function</span> (<span class="params">cache</span>) </span>&#123;</span><br><span class="line">						cache.put(_name, response.clone())</span><br><span class="line">						<span class="keyword">return</span> response</span><br><span class="line">					&#125;)</span><br><span class="line">				&#125;)</span><br><span class="line">			&#125;)</span><br><span class="line">		)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> isCacheable = <span class="function">(<span class="params">url, scope</span>) =&gt;</span> &#123;</span><br><span class="line">	<span class="keyword">const</span> _i = url.match(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">`<span class="subst">$&#123;scope&#125;</span><span class="subst">$&#123;resPath&#125;</span>\/(?&lt;name&gt;.*)`</span>))</span><br><span class="line">	<span class="keyword">if</span> (!_i) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">	<span class="keyword">const</span> name = _i.groups.name</span><br><span class="line">	<span class="keyword">if</span> (exclude.some(<span class="function">(<span class="params">el</span>) =&gt;</span> name.indexOf(el) &gt; -<span class="number">1</span>)) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">	<span class="keyword">return</span> name</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="问题集锦"><a href="#问题集锦" class="headerlink" title="问题集锦"></a>问题集锦</h2><h3 id="fetch-event-不生效"><a href="#fetch-event-不生效" class="headerlink" title="fetch event 不生效"></a>fetch event 不生效</h3><p>Q: Worker 注册后, 调用了 install event, 调用了 activate event, 但却一个 fetch event 都没有调用, 为什么? fetch event 不生效？</p>
<p>A: 在实际场景里, 服务器路径由后端配置, 而静态资源通常是单独配置了路径。那如果我们需要监听所有的静态资源请求, 是否把 work 文件放在静态资源的目录下就可以了？</p>
<p>scope 这个参数在 MDN 中描绘得并不详细, Google 文档中的 <a href="https://developer.chrome.com/docs/workbox/service-worker-lifecycle/#scope">scope 描述</a>会更生动些。</p>
<blockquote>
<p>A <code>Service Worker</code>‘s scope is determined by its location on a web server. If a <code>Service Worker</code> runs on a page located at /subdir/index.html, and is located at /subdir/sw.js, the <code>Service Worker</code>‘s scope is /subdir/.</p>
</blockquote>
<p>所以我理解 Worker 文件需要和 Html 文件在同一级下, Html 产生的请求才会被捕获。所以不妨再请求下后端同学支持, 再为 Worker 配置一个路径, 与 html 同级。</p>
<h3 id="Cannot-construct-a-Request-with-a-Request-object-that-has-already-been-used"><a href="#Cannot-construct-a-Request-with-a-Request-object-that-has-already-been-used" class="headerlink" title="Cannot construct a Request with a Request object that has already been used"></a>Cannot construct a Request with a Request object that has already been used</h3><p><code>request</code> has already consumed by the <code>fetch()</code>, and <code>request</code> can’t use twice. so clone <code>request</code> before using it</p>
<h3 id="an-opaque-request"><a href="#an-opaque-request" class="headerlink" title="an opaque request"></a>an opaque request</h3><p>it‘s not allowed to access response body from an <code>opaque request</code>. <code>cors-origin</code> request with <code>mode: no-cors</code> and their response cannot be intercept by service worker, but change <code>CORS-safelisted request headers</code>.</p>
]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
      <tags>
        <tag>Cache</tag>
      </tags>
  </entry>
  <entry>
    <title>SVG 路径动画</title>
    <url>/2021/12/13/svg-1/</url>
    <content><![CDATA[<p>简单百搭普普通通平平无奇 SVG 路径动画优化网站效果, 如何实现一个 SVG 进度条动画以及虚线走马灯动画</p>
<p>我习惯于使用 canvas 来做一些动画效果，数据展示或者图片处理之类的。SVG 和 Canvas 的功能类似，但应用场景又完全不同，各有各的特点。最近有用到一些 SVG，补补~~~</p>
<h1 id="Canvas-和-SVG-的区别"><a href="#Canvas-和-SVG-的区别" class="headerlink" title="Canvas 和 SVG 的区别"></a>Canvas 和 SVG 的区别</h1><ul>
<li><p>canvas 以像素点为单位，而 SVG 是矢量图形，即放大图像不会失真，不依赖分辨率，对于 ui 同学来说大概就是 photoshop 与 illustrator 的区别了。</p>
<ul>
<li>canvas 依赖分辨率，适合图片处理，可以做一些图片裁剪合成之类的功能。</li>
<li>SVG 放大不失真的图形展示当然很好，但矢量图之所以不会失真是因为保存了图形的线条和图块，所以渲染速度会和图形的复杂度成正比，这也表示 svg 非常适合用来绘制扁平化的图像，比如常用的 icon 或者扁平风格的 logo。</li>
</ul>
</li>
<li><p>canvas 通过 js api 绘图，而 SVG 基于 XML 文档。</p>
<ul>
<li>在 XML 这一点上来说 SVG 因 DOM 方法而拥有的交互能力的确是吊打 Canvas。</li>
<li>Canvas 是一张画布，通过 js api 在渲染上下文中进行清除重绘，相比于 SVG 操作 DOM，Canvas 会更适合复杂的场景。</li>
</ul>
</li>
</ul>
<h1 id="SVG-圆形百分比动画"><a href="#SVG-圆形百分比动画" class="headerlink" title="SVG 圆形百分比动画"></a>SVG 圆形百分比动画</h1><p><a href="https://mser.xyz/canvas-store/svg_circle_progress/index.html">效果戳这儿</a>，可以看到就是两个简简单单普普通通的圆和一个数字，蓝色圆形从无到有的绘制过程就是进度条的状态</p>
<p><img src="https://tong-h.github.io/canvas-store/svg_circle_progress/img.png" alt="效果图片"></p>
<p>在这个例子里，我本来只想展示 svg 动画，但考虑到毕竟是在实现一个进度条的场景下，所以为了完整的效果还是用了 js 来动态改变数字，但 js 也只改变了数字，而动画是<strong>纯html</strong>。</p>
<p>我之前也有分享过用 canvas 写的一个环形百分比动画，[戳这儿][<a href="https://mser.xyz/canvas-store/roundPercent/index.html]%EF%BC%8C%E4%BD%86%E6%AF%94%E8%B5%B7">https://mser.xyz/canvas-store/roundPercent/index.html]，但比起</a> svg 纯 html 的代码，canvas 依靠 js api 重绘就显得复杂许多。</p>
<p>肉眼可见，这个例子的流程：</p>
<ol>
<li><p>画一个完整的白色的圆形，这一步就很简单，普普通通 <code>cycle</code> 标签</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;50%&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;50%&quot;</span> <span class="attr">r</span>=<span class="string">&quot;44&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;#fff&quot;</span> <span class="attr">stroke-width</span>=<span class="string">&quot;8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">circle</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在白色圆形之上再<strong>重叠一个圆形</strong>，带有<strong>渐变填充</strong>以及<strong>发光的效果</strong>。也是普普通通 <code>cycle</code> 标签，但是 <code>stroke</code> 填充从单色改为了渐变，那么如何做一个渐变色呢？看 <code>linearGradient</code> 标签，再通过 <code>filter</code> 和高斯模糊 <code>feGaussianBlur</code> 来做出发光的效果。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">defs</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">linearGradient</span> <span class="attr">id</span>=<span class="string">&quot;gradient&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;0%&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;#10a5ff&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;50%&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;#03c6fd&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;95%&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;#11ffe4&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">linearGradient</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">filter</span> <span class="attr">id</span>=<span class="string">&quot;shadow&quot;</span> <span class="attr">width</span>=<span class="string">&quot;150%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;150%&quot;</span> <span class="attr">x</span>=<span class="string">&quot;-25%&quot;</span> <span class="attr">y</span>=<span class="string">&quot;-25%&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">feGaussianBlur</span> <span class="attr">in</span>=<span class="string">&quot;SourceGraphic&quot;</span> <span class="attr">stdDeviation</span>=<span class="string">&quot;6&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">feBlend</span> <span class="attr">in</span>=<span class="string">&quot;SourceGraphic&quot;</span>  <span class="attr">mode</span>=<span class="string">&quot;normal&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">defs</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">circle</span></span></span><br><span class="line"><span class="tag">	<span class="attr">cx</span>=<span class="string">&quot;50%&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">cy</span>=<span class="string">&quot;50%&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">r</span>=<span class="string">&quot;44&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">fill</span>=<span class="string">&quot;none&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">transform</span>=<span class="string">&quot;rotate(-90 70 70)&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">stroke</span>=<span class="string">&quot;url(#gradient)&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">filter</span>=<span class="string">&quot;url(#shadow)&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">stroke-linecap</span>=<span class="string">&quot;round&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">stroke-width</span>=<span class="string">&quot;8&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">stroke-dasharray</span>=<span class="string">&quot;276&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">stroke-dashoffset</span>=<span class="string">&quot;276&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">circle</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>动起来！！！让蓝色圆形从无到有，逐步变成一个完整圆形。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">animate</span> <span class="attr">id</span>=<span class="string">&quot;progress&quot;</span> <span class="attr">attributeName</span>=<span class="string">&quot;stroke-dashoffset&quot;</span> <span class="attr">attributeType</span>=<span class="string">&quot;XML&quot;</span> <span class="attr">from</span>=<span class="string">&quot;276&quot;</span> <span class="attr">to</span>=<span class="string">&quot;0&quot;</span> <span class="attr">dur</span>=<span class="string">&quot;2s&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;freeze&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">animate</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>重点就是这第三步了，动画效果是通过 <code>animate</code> 标签实现的，这个标签与 <code>css3</code> 的 <code>animation</code> 类似，从一个配置逐步过渡到另一个配置，css3 变化的的是样式配置，但 animate 标签过渡的是标签的属性，在这个例子中变化的属性是 <code>stroke-dashoffsst</code>，但真正理解这个例子我们还需要了解 <code>stroke-dasharray</code>。</p>
<p>我这里就不多赘诉了。在这个例子里可以简单理解为，stroke-dasharray 是圆的周长，stroke-dashoffset 是周长的偏移，dashoffset 的数字越小，圆的路径就越长，当 dashoffset 等于 0 时就等于一个整圆。</p>
<p>可以通过 MDN 的 文档了解，<a href="https://developer.mozilla.org/zh-CN/docs/Web/SVG/Attribute/stroke-dasharray">stroke-dasharray</a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/SVG/Attribute/stroke-dashoffset">stroke-dashoffset</a>，css-tricks 的两篇文章也很不错可以帮助理解 <a href="https://css-tricks.com/almanac/properties/s/stroke-dasharray/">stroke-dasharray</a>、<a href="https://css-tricks.com/almanac/properties/s/stroke-dashoffset/">stroke-dashoffset</a>。</p>
</li>
</ol>
<h1 id="SVG-虚线走马灯动画"><a href="#SVG-虚线走马灯动画" class="headerlink" title="SVG 虚线走马灯动画"></a>SVG 虚线走马灯动画</h1><p>我们进一步运用这两个属性，让 dasharray 的虚线动起来，<a href="https://mser.xyz/canvas-store/svg_dash_animation/index.html">戳这儿</a>，这个动画也用在了博客首页上。</p>
<p>这个例子是四条不同颜色的虚线叠加，再通过 dashoffset 偏移让其动起来</p>
<p><img src="https://tong-h.github.io/canvas-store/svg_dash_animation/img.png" alt="效果图片"></p>
]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
      <tags>
        <tag>Svg</tag>
      </tags>
  </entry>
  <entry>
    <title>(译)一个编译成 JavaScript 接口框架的案例</title>
    <url>/2021/06/17/translation-A-Case-for-Compile-to-JavaScript-Interface-Frameworks/</url>
    <content><![CDATA[<blockquote>
<ul>
<li>原文地址：<a href="https://javascript.plainenglish.io/a-case-for-compile-to-javascript-interface-frameworks-a684b361884f">A Case for Compile to JavaScript Interface Frameworks</a></li>
<li>原文作者：<a href="https://medium.com/@asyncbanana">AsyncBanana</a></li>
<li>译文出自：<a href="https://github.com/xitu/gold-miner">掘金翻译计划</a></li>
<li>本文永久链接：<a href="https://github.com/xitu/gold-miner/blob/master/article/2021/a-case-for-compile-to-javascript-interface-frameworks.md">https://github.com/xitu/gold-miner/blob/master/article/2021/a-case-for-compile-to-javascript-interface-frameworks.md</a></li>
<li>译者：<a href="https://github.com/Tong-H">tong-h</a></li>
<li>校对者：<a href="https://github.com/KimYangOfCat">KimYangOfCat</a> <a href="https://github.com/PassionPenguin">PassionPenguin</a></li>
</ul>
</blockquote>
<h1 id="一个编译成-JavaScript-接口框架的案例"><a href="#一个编译成-JavaScript-接口框架的案例" class="headerlink" title="一个编译成 JavaScript 接口框架的案例"></a>一个编译成 JavaScript 接口框架的案例</h1><p><img src="https://cdn-images-1.medium.com/max/10296/0*LUP7NJrirKlw-voh" alt="图源 [Ferenc Almasi](https://unsplash.com/@flowforfrank?utm_source=medium&amp;utm_medium=referral) 上传至 [Unsplash](https://unsplash.com?utm_source=medium&amp;utm_medium=referral)"></p>
<p>如今的 web 框架，类似 React 和 Vue 在创建现代 web 应用方面非常受欢迎，这是有原因的。这些框架帮助把代码片段变成可复用的组件，通过使用声明式性的标记使组件易于根据数据更新。</p>
<p>但几乎所有的这类框架运行时都需要重量型的程序库，这代表着性能上的消耗。而且这类界面语言不够强势，且因为原生 js 的限制而更繁琐。</p>
<p>不管怎样，针对这个问题的解决方案可以让你使用更简洁的代码获得更好的性能</p>
<p>这些框架把那些为声明式用户接口设计而优化的语言编译为原生 JavaScript。因为这是被编译后的，不需要大型的运行时的库，所以他们更小。</p>
<p>编译为 JavaScript 用户接口框架的类型有两种。一种是为了实际的逻辑而使用 JavaScript，类似 <a href="https://svelte.dev/">Svelte</a> 和 <a href="https://github.com/solidjs/solid">Solid</a>；另一种使用完全不同的语言，比如 <a href="https://elm-lang.org/">Elm</a> 和 <a href="https://www.mint-lang.com/">Mint</a>，它们通常不只是为了做声明性标记。这篇文章我们主要着重于前一种框架。现在让我们去了解一下为什么要用这些框架。</p>
<p>Solid 可以被看成是运行时的框架，但由于它常常用于优化代码的编译，在这篇文章中，我将它看为一种对 JS 框架的编译。</p>
<h2 id="被编译后的-JavaScript-运行更快"><a href="#被编译后的-JavaScript-运行更快" class="headerlink" title="被编译后的 JavaScript 运行更快"></a>被编译后的 JavaScript 运行更快</h2><p>很多被编译后的框架，尤其是那些比较新的，会比运行时的框架更小更快。</p>
<p>这是因为他们可以在代码运行前做很多优化，将代码转变为普通 DOM 操作的 JavaScript，避免使用大型的程序包。</p>
<p>比如，相比于着重利用编译的两个框架 Svelte 和 Solid ，React 和 vue 的设计更常用于运行时。</p>
<ul>
<li>React 使用被编译后的 JSX，但这只是基于调用<code>createElement</code> 的基础语法糖。</li>
</ul>
<p>根据 BundlePhobia 计算，React 和 vue 的包大小分别是 39.4kb GZip 和 22.9kb GZip。</p>
<p><img src="https://cdn-images-1.medium.com/max/2724/1*yWAVUnOXKsrwrRzTSb6kzw.png" alt="React 包大小"></p>
<p><img src="https://cdn-images-1.medium.com/max/2684/1*eTVWVuDuNORYhxf1g5bF_w.png" alt="Vue 包大小"></p>
<p>相比之下，Svelte 除了原生 DOM 操作以外使用的东西很少，所以几乎没有基本的包大小，且对于只有一些小型函数帮助 DOM 更新。</p>
<p>因为编译器占据了大部分的包大小，但它并不包含在最后生成的 web 应用中，你不能从 Bundlephobia 量化其大小，但是启动时间基准可以合理的评估大小。</p>
<p>另外，Solid 和 Svelte 在运行时都明显更快。 根据 <a href="https://krausest.github.io/js-framework-benchmark/2021/table_chrome_90.0.4430.72.html">Krausest Framework Benchmarks</a>, Solid 和 Svelte 在启动时间，DOM 操作速度以及内存使用方面更快。</p>
<p><img src="https://cdn-images-1.medium.com/max/2000/1*cyKBaU7O35rKAPZJ4jsO2A.png" alt="框架速度基准对比"></p>
<p><img src="https://cdn-images-1.medium.com/max/2000/1*m5e36L44ph12wCOhCq576Q.png" alt="框架启动速度对比"></p>
<p><img src="https://cdn-images-1.medium.com/max/2000/1*EuwkvRIURVuvKk7XqphdYQ.png" alt="框架内存基准对比"></p>
<p>就像你看到的，在大型 Dom 操作上，启动（受脚本大小和编译时间影响）时间和内存使用方面，Solid 和 Svelte 比 React 和 Vue 表现更佳。</p>
<p>当然，你必须记住，大部分时候这并不是很重要。但是如果你追求更好的性能，那么利用 UI 代码的编译去优化框架性能可能会是一个好方向。</p>
<p>比如，如果你在为使用慢速 2G 或 3G 网络的用户做开发，那么使用 Svelte 去减少大小将会很有帮助。</p>
<p>而且，记住，虽然被优化后编译的框架可能会比没有优化过的框架更快，vanilla JavaScript 几乎一直更快，但 vanilla JavaScript 更繁琐枯燥，这引出我们的第二个重点。</p>
<h2 id="优化编译后的框架是为了更少的代码量"><a href="#优化编译后的框架是为了更少的代码量" class="headerlink" title="优化编译后的框架是为了更少的代码量"></a>优化编译后的框架是为了更少的代码量</h2><p>JavaScript 的最初设计并不是为了创造类似 React 这类声明型的标记，正是因为这样，React 的很多特色强迫你使用函数和方法而不是使用一般的变量，比如<code>useState()</code> ，这不糟糕但是也谈不上好。</p>
<p>另外，大部分功能在运行时就需要被装载，所以只有很少的功能。Svelte 对反应性变量有内置支持，你可以使用一般的语法<code>let variable = value</code>去声明。</p>
<p>另外，仅仅用<code>$:</code> 你就可以做一个反应性的声明。这可能会让人有点困惑，有一些例子可以帮助你理解。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useState&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> [clicks,setClicks] = useState(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Clicks: &#123;clicks&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="xml">        setClicks(clicks+1)</span></span><br><span class="line"><span class="xml">      &#125;&#125;&gt;Click Me!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">	let clicks = 0</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;Clicks: &#123;clicks&#125;&lt;/h1&gt;</span><br><span class="line">&lt;button on:click=&#123;()=&gt;</span><br><span class="line">	clicks++</span><br><span class="line">&#125;&gt;Click Me!&lt;/button&gt;</span><br></pre></td></tr></table></figure>

<p>正如你看到的，语法风格完全不同。Svelte 更有原生的感觉，且比 React 少 1/3 的代码。</p>
<p>不管怎样，主要取决于你想要怎样的语法，但是编译者为语法增加了更多的灵活性。你可能会想花费在编译和设置编译器上的时间胜于它带来的语法优势，这就引出了最后一点。</p>
<h2 id="你可能已经在编译-JavaScript-了"><a href="#你可能已经在编译-JavaScript-了" class="headerlink" title="你可能已经在编译 JavaScript 了"></a>你可能已经在编译 JavaScript 了</h2><p>你可能只使用原生 JavaScript，但是你仍然还是要编译它，即使只是为了将 ES6 转化为旧版本浏览器所支持的代码，或者是为了压缩代码。<a href="https://create-react-app.dev/">创建 React App</a> 在后台使用 Webpack 去执行不同的代码。实际上，被 Reat 团队推荐的 React JSX，需要编译成函数调用去创建真实的元素。</p>
<p>不幸的是， React 并不能充分利用并优化它，尽管他们最近在新的 JSX 转换方面取得了一些改进。 <a href="https://cli.vuejs.org/">Vue Cli</a> 也在后台使用 Webpack。这表示虽然你不需要使用编译器，但不管怎样你很可能会用，而且这非常容易设置。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>使用一个编译成 JavaScript 框架不永远是答案。有些不编译成 JavaScript 的框架比那些用编译器的框架更快一些，且使用编译器并不代表它就是一个更好的框架。</p>
<p>而且，被编译的范围很广。比如 Alpine.js 这类框架被设计成完全不需要任何构建的步骤就可以运行。</p>
<p>其他的，类似 React，只选择性的编译少部分代码。Solid 使用 JSX，有点类似 React，但是它在编译时优化更进一步。</p>
<p>编译的最后一个水平是任何代码都可以被编译，比如 Svelte。你想编译多少这是你的选择，每种方案都有各自的优缺点。</p>
<p>我希望从这篇文章中你能够有收获，感谢阅读。</p>
<blockquote>
<p>如果发现译文存在错误或其他需要改进的地方，欢迎到 <a href="https://github.com/xitu/gold-miner">掘金翻译计划</a> 对译文进行修改并 PR，也可获得相应奖励积分。文章开头的 <strong>本文永久链接</strong> 即为本文在 GitHub 上的 MarkDown 链接。</p>
</blockquote>
<hr>
<blockquote>
<p><a href="https://github.com/xitu/gold-miner">掘金翻译计划</a> 是一个翻译优质互联网技术文章的社区，文章来源为 <a href="https://juejin.im/">掘金</a> 上的英文分享文章。内容覆盖 <a href="https://github.com/xitu/gold-miner#android">Android</a>、<a href="https://github.com/xitu/gold-miner#ios">iOS</a>、<a href="https://github.com/xitu/gold-miner#%E5%89%8D%E7%AB%AF">前端</a>、<a href="https://github.com/xitu/gold-miner#%E5%90%8E%E7%AB%AF">后端</a>、<a href="https://github.com/xitu/gold-miner#%E5%8C%BA%E5%9D%97%E9%93%BE">区块链</a>、<a href="https://github.com/xitu/gold-miner#%E4%BA%A7%E5%93%81">产品</a>、<a href="https://github.com/xitu/gold-miner#%E8%AE%BE%E8%AE%A1">设计</a>、<a href="https://github.com/xitu/gold-miner#%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD">人工智能</a>等领域，想要查看更多优质译文请持续关注 <a href="https://github.com/xitu/gold-miner">掘金翻译计划</a>、<a href="http://weibo.com/juejinfanyi">官方微博</a>、<a href="https://zhuanlan.zhihu.com/juejinfanyi">知乎专栏</a>。</p>
</blockquote>
]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
      <tags>
        <tag>translation</tag>
      </tags>
  </entry>
  <entry>
    <title>前端使用html5、ffmpeg实现录屏摄像等功能</title>
    <url>/2018/11/06/streamcapture/</url>
    <content><![CDATA[<p>前段时间做一个windows的桌面应用，vue + electron，涉及到录屏和摄像功能，网上相关的文档蛮少的给需要的人一些参考</p>
<p>如果文章描写有误或者还有更好的方法，请留言告诉我，笔芯 (´▽`ʃ♡ƪ)</p>
<h1 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h1><p>** 涉及技术：vue、electron、ffmpeg、node **</p>
<p>关于录屏和摄像对比了两种方法</p>
<ul>
<li><p>使用HTML5的api实现</p>
<p>摄像：mediaDevices（获取设备）+ getUserMedia（获取流） + MediaRecorder（存储）</p>
<p>录屏：getDisplayMedia（获取流） + MediaRecorder（存储）</p>
</li>
<li><p>ffmpeg + node：FFmpeg是一套非常强大的音视频处理的开源工具，不多介绍，而Electron基于node和chromium，它允许使用node的API以及几乎所有的node模块，这意味这着我们可以调用cmd命令来操作ffmpeg实现录屏和摄像录制，当然ffmpeg功能绝不止这点</p>
</li>
</ul>
<h1 id="HTML5实现"><a href="#HTML5实现" class="headerlink" title="HTML5实现"></a>HTML5实现</h1><h2 id="mediaDevices"><a href="#mediaDevices" class="headerlink" title="mediaDevices"></a>mediaDevices</h2><ul>
<li><p>用于收集系统上可用的多媒体输入和输出设备的信息</p>
</li>
<li><p>该方法调用成功返回设备列表，并传入带有devceID的MediaStreamConstraints对象可以指定设备获取流媒体来源</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">navigator.mediaDevices.enumerateDevices().then(<span class="function"><span class="params">devicelist</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// audiooutput 扬声器</span></span><br><span class="line">  <span class="comment">// audioinput  麦克风</span></span><br><span class="line">  <span class="comment">// audiooutput 摄像</span></span><br><span class="line">  <span class="built_in">console</span>.log(devicelist)</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(err))</span><br></pre></td></tr></table></figure>

<h2 id="getUserMedia"><a href="#getUserMedia" class="headerlink" title="getUserMedia"></a>getUserMedia</h2></li>
<li><p>用户提供访问硬件设备媒体（摄像头、视频、音频、地理位置等）的接口，基于该接口，开发者可以在不依赖任何浏览器插件的条件下访问硬件媒体设备。</p>
</li>
<li><p>该方法返回视频流，将获取到的流赋给video标签可实现边录边看</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">navigator.mediaDevices.getUserMedia(MediaStreamConstraints).then(<span class="function"><span class="params">stream</span> =&gt;</span> &#123;</span><br><span class="line">    videoElement.srcObject = stream; <span class="comment">// </span></span><br><span class="line">  &#125;, <span class="function"><span class="params">error</span> =&gt;</span> <span class="built_in">console</span>.log(error));</span><br></pre></td></tr></table></figure>

<h2 id="getDisplayMedia"><a href="#getDisplayMedia" class="headerlink" title="getDisplayMedia"></a>getDisplayMedia</h2></li>
<li><p>将用户的显示或其部分用作媒体流的来源，它允许以视频流的形式获取用户的显示器或其一部分</p>
</li>
<li><p>录屏主要依靠该方法，和getUserMedia一样返回一个promise对象，调用成功返回流，将这个流赋给video 元素实现边录边看</p>
</li>
<li><p>** 需要注意的是** 如果你做的是网页端在谷歌上使用这个元素，需要在chrome://flags/开启Experimental Web Platform features功能<br><a href="https://tong-h.github.io/canvas-store/capture/index.html">demo戳这儿</a></p>
<p>&emsp;&emsp;&emsp;&emsp;而Electron基于node + chromium构建，在electron需要引入desktopCapturer模块，并在基于该模块使用这个方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">navigator.mediaDevices.getDisplayMedia(&#123; <span class="attr">video</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">stream</span> =&gt;</span> &#123;</span><br><span class="line">    videoElement.srcObject = stream;</span><br><span class="line">  &#125;, <span class="function"><span class="params">error</span> =&gt;</span> <span class="built_in">console</span>.log(error));</span><br></pre></td></tr></table></figure>

<h2 id="MediaRecorder"><a href="#MediaRecorder" class="headerlink" title="MediaRecorder"></a>MediaRecorder</h2></li>
<li><p>记录和捕获媒体，也就是视频和音频</p>
</li>
<li><p>getDisplayMedia 和 getUserMedia 获取到的流都需要使用MediaRecorder存储起来，并且可以保存成文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> herf</span><br><span class="line"><span class="built_in">this</span>.recorder = <span class="keyword">new</span> MediaRecorder(stream);</span><br><span class="line"><span class="built_in">this</span>.recorder.ondataavailable = <span class="function"><span class="params">e</span> =&gt;</span> &#123; </span><br><span class="line">  herf = e.data;</span><br><span class="line">  download.href = URL.createObjectURL(herf);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">this</span>.recorder.start();</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="第二种使用ffmpeg"><a href="#第二种使用ffmpeg" class="headerlink" title="第二种使用ffmpeg"></a>第二种使用ffmpeg</h1><p>官网安装包下载 <a href="https://ffmpeg.zeranoe.com/builds/">https://ffmpeg.zeranoe.com/builds/</a></p>
<p>一些基本参数</p>
<ul>
<li>-formats                输出所有可用格式</li>
<li>-f fmt                  指定格式(音频或视频格式)</li>
<li>-i filename              指定输入文件名，在linux下当然也能指定:0.0(屏幕录制)或摄像头</li>
<li>-y                      覆盖已有文件</li>
<li>-t duration              记录时长为t</li>
<li>-fs limit_size          设置文件大小上限</li>
<li>-itsoffset time_off      设置时间偏移(s)，该选项影响所有后面的输入文件。该偏移被加到输入文件的时戳，定义一个正偏移意味着相应的流被延迟了 offset秒。 [-]hh:mm:ss* [.xxx]的格式也支持<br>音 频</li>
<li>-ab bitrate           设置音频码率</li>
<li>-ar freq              设置音频采样率</li>
<li>-ac channels          设置通道 缺省为1<br>视 频</li>
<li>-b bitrate            设置比特率，缺省200kb/s</li>
<li>-r fps                设置帧频 缺省25</li>
<li>-s size               设置帧大小 格式为WXH 缺省160X128.下面的简写也可以直接使用：</li>
</ul>
<h2 id="录屏相关命令"><a href="#录屏相关命令" class="headerlink" title="录屏相关命令"></a>录屏相关命令</h2><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">列出可用的设备包括音频和摄像等等</span><br><span class="line">ffmpeg -list_devices true -f dshow -<span class="selector-tag">i</span> dummy</span><br><span class="line"></span><br><span class="line">录屏，你也可以加入关于视频的一些基本参数来获得你想要的文件</span><br><span class="line">ffmpeg -f gdigrab -<span class="selector-tag">i</span> desktop captrue<span class="selector-class">.mkv</span> -y</span><br></pre></td></tr></table></figure>

<h2 id="node调用"><a href="#node调用" class="headerlink" title="node调用"></a>node调用</h2><p>cd进入bin文件夹后执行录屏相关命令</p>
<p>关于停止录制，虽然ffmpeg按 Q 可以停止录制，但是我们通过代码调用是看不到cmd命令行的而且他在录制过程中是一直占用这个进程什么命令也无法输入<br>所以这个地方我只想到一个办法就是强制停止该进程</p>
<p>参考文章</p>
<p>MDN <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/MediaDevices/getUserMedia">https://developer.mozilla.org/zh-CN/docs/Web/API/MediaDevices/getUserMedia</a><br>&emsp;<a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder">https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder</a><br>&emsp;<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/MediaDevices/enumerateDevices">https://developer.mozilla.org/zh-CN/docs/Web/API/MediaDevices/enumerateDevices</a></p>
<p>W3C <a href="https://w3c.github.io/mediacapture-screen-share/">https://w3c.github.io/mediacapture-screen-share/</a></p>
]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
      <tags>
        <tag>ffmpeg</tag>
      </tags>
  </entry>
  <entry>
    <title>(译) 2021 年 Node.js 的发展趋势</title>
    <url>/2021/10/24/translation-Top-Node.js-Development-Trends-in-2021/</url>
    <content><![CDATA[<blockquote>
<ul>
<li>原文地址：<a href="https://javascript.plainenglish.io/top-node-js-development-trends-in-2021-807f27fdf1b8">Top Node.js Development Trends in 2021</a></li>
<li>原文作者：<a href="https://medium.com/@rlogicaltech">Rlogical Techsoft.Pvt.Ltd</a></li>
<li>译文出自：<a href="https://github.com/xitu/gold-miner">掘金翻译计划</a></li>
<li>本文永久链接：<a href="https://github.com/xitu/gold-miner/blob/master/article/2021/top-node-js-development-trends-in-2021.md">https://github.com/xitu/gold-miner/blob/master/article/2021/top-node-js-development-trends-in-2021.md</a></li>
<li>译者：<a href="https://github.com/Tong-H">tong-h</a></li>
<li>校对者：<a href="https://github.com/Chorer">Chorer</a> <a href="https://github.com/greycodee">greycodee</a></li>
</ul>
</blockquote>
<h1 id="2021-年-Node-js-的发展趋势"><a href="#2021-年-Node-js-的发展趋势" class="headerlink" title="2021 年 Node.js 的发展趋势"></a>2021 年 Node.js 的发展趋势</h1><p>世界各地的开发者对 2021 年 Node.js 的发展趋势做了很多预测。在下文中，我们将解说今年预期的 Node.js 趋势。</p>
<h2 id="Node-js-为什么如此有名呢？"><a href="#Node-js-为什么如此有名呢？" class="headerlink" title="Node.js 为什么如此有名呢？"></a>Node.js 为什么如此有名呢？</h2><p>近些年来，Node.js 凭借其高度灵活和极其轻量的特性，变得非常流行。Node.js 拥有大量的 JavaScript 库用于简化开发流程。Node.js 的开源属性也使得它在 <a href="https://www.rlogical.com/"><strong>web 和移动应用开发</strong></a>方面变得非常知名。</p>
<p><strong>根据最近的统计，可以看出：</strong></p>
<ul>
<li>目前有超过 50% 的开发者在自己的项目中使用 Node.js。</li>
<li>在美国，基于 Node.js 创建的网站超过 28000 个 。</li>
<li>AliExpress、eBay 等知名公司很大程度上依赖于 Node.js。</li>
<li>包括 PayPal、Netflix 和 Groupon 在内的大流量的网站都在使用 Node.js。</li>
</ul>
<ul>
<li>Node.js 自 2009 年在市场上推出就变得非常受欢迎。<strong>Node.js 在 Github 中拥有 75.9k stars、3k watchers，还有 19k forks</strong>，<strong>在 Stack share 中拥有 71.8k 的关注者以及 8.3k 的赞同</strong>。这些数字足以描述 Node.js 流行程度。知名的科技巨头，比如 Netflix 和 Microsoft 都在使用 Node.js。Node.js 成功在 <strong>StackOverflow 2021 年开发者调查中位居榜首</strong>，其中超过 50% 的调查参与者声称正在项目中使用 Node.js。</li>
</ul>
<blockquote>
<p><strong>补充阅读: <a href="https://www.rlogical.com/blog/nodejs-vs-denojs-which-is-better-for-you/">NodeJS vs. DenoJS：哪个更适合你？</a></strong></p>
</blockquote>
<h2 id="Node-js-在-2021-年的发展趋势"><a href="#Node-js-在-2021-年的发展趋势" class="headerlink" title="Node.js 在 2021 年的发展趋势"></a>Node.js 在 2021 年的发展趋势</h2><p><img src="https://cdn-images-1.medium.com/max/2400/1*7_yuqUYbAl-9bHsPgtcPgA.png"></p>
<h3 id="1-MEAN-amp-MERN-Stack"><a href="#1-MEAN-amp-MERN-Stack" class="headerlink" title="1. MEAN &amp; MERN Stack"></a>1. MEAN &amp; MERN Stack</h3><p>AngularJS 和 React 使得 MEAN 以及 MERN Stack 都相当强大。<strong>MEAN Stack 结合了 ExpressJS、MongoDB、AngularJS 以及 NodeJS</strong>，而 MERN Stack 则使用 React 而不是 Angular。</p>
<p>AngularJS 使用三种不同的组件：class、template 以及 metadata，来编写简洁清晰的代码。这正好是一个 Model-View-Controller（模型-视图-控制器） 的框架。如果一个 <a href="https://www.rlogical.com/hire-dedicated-developers/hire-node-js-developer/"><strong>NodeJS 开发公司</strong></a>的开发者正在处理一个简单的项目，那么双向数据绑定会比较适用。</p>
<p>这表示发生在模型层里的任何修改都将立刻影响视图层，反之亦然。而单向数据绑定对开发者来说会非常方便，尤其是用于复杂的项目。使用 Angular 和 Typescript 来创建应用是可行的。</p>
<p>MERN，一个相对较新的技术栈，拥有 React 可供使用。通过 React 而增加的用户接受度和流行度对<a href="https://www.rlogical.com/hire-dedicated-developers/hire-mern-stack-developer/"><strong>MERN stack 发展</strong></a>相当有帮助。</p>
<p>React 的虚拟 DOM 可以非常有效地快速执行修改，这使得 Angular 有点相形见绌。而且，React 可以使用高级 JavaScript 迅速地操作组件。尽管 React 非常强大，但作为一个库而言，它有一定局限性。在某些场景下，React 需要借助第三方服务。</p>
<h3 id="2-实时应用"><a href="#2-实时应用" class="headerlink" title="2. 实时应用"></a>2. 实时应用</h3><p>实时应用是大势所趋，并且将保持在排行榜前列。这些应用需要一个强大且健壮的后端。<strong>即时通信、视频通话和在线游戏，以及许多其他相似的应用</strong>是完美的案例。</p>
<p>Node.js <strong>使用事件 API 以及 Websocket 实现双向通信</strong>，这在实时应用中是必不可少的。总的来说，我们可以断言实时应用有一个光明的未来。</p>
<blockquote>
<p><strong>补充阅读: <a href="https://www.rlogical.com/blog/api-development-complete-guide-to-building-robust-apis/">API 开发：构建健壮的 API 的完整指南</a></strong></p>
</blockquote>
<h3 id="3-物联网"><a href="#3-物联网" class="headerlink" title="3. 物联网"></a>3. 物联网</h3><p>Node.js 正好是一个特性丰富的运行环境，允许开发者使用面向数据和及时能力，以及微服务。</p>
<p>如果你想应付已经接受了技术转型的世界，那么适应当代技术是必不可少的。</p>
<p>实时应用需要处理大量的用户请求，因此 Node.js 非常有帮助。除了提供高质量的应用，它同样创建了一个可靠的解决方案。</p>
<p>因此，当你在为自己的客户<a href="https://www.rlogical.com/iot-development/"><strong>构建 IoT（物联网）应用</strong></a>时，你可以相信 Node.js 能够帮助到你。</p>
<h3 id="4-无服务解决方案"><a href="#4-无服务解决方案" class="headerlink" title="4. 无服务解决方案"></a>4. 无服务解决方案</h3><p>每个人都喜欢既能省钱还能提高开发者的生产力和效率的方案。而将 Node.js 用于无服务架构正好是一个绝妙的解决方案。</p>
<p>维护成本几乎为零，而且并不需要公司担心其应用的性能。除此之外，还值得一夸的是它的全球社区。</p>
<p>几乎所有大型公司，比如 <strong>AOL、Netflix 以及 Telenor 都在使用无服务架构</strong>。</p>
<p><strong>优点如下：</strong></p>
<ul>
<li>提升代码质量</li>
<li>减少项目成本</li>
<li>节省大量的时间</li>
<li>提高效率</li>
</ul>
<p>在接下来的日子里，世界将见证最不可思议的 Node.js 发展趋势。</p>
<h3 id="5-云解决方案"><a href="#5-云解决方案" class="headerlink" title="5. 云解决方案"></a>5. 云解决方案</h3><p>以上概述的要点正好是<strong>开发云应用</strong>的解决方案。无服务结构既可以从一开始就简化云应用的构建，也可以扩展已经开发的应用。</p>
<p>根据《信息周刊》的研究，人工智能、云计算以及机器学习模型将会统治地球。</p>
<h3 id="6-GraphQL"><a href="#6-GraphQL" class="headerlink" title="6. GraphQL"></a>6. GraphQL</h3><p>总所周知，GraphQL 是 RESTful API 的一个成功的选项。GraphQL 使程序员可以精确地说明它需要的信息。它可以有效地从不同的渠道收集大量信息。</p>
<p>GraphQL 每年都在发展，是另一种 Node.js 趋势。它慢慢地引起了世界各地程序员的注意力。我们可以假定，它会以一种显著的速度成长。</p>
<p>GraphQL 可以简化 Windows、Android 和 iOS 等不同平台的工作流程，因此，它将会是开发者最喜欢且蓬勃发展的特性。</p>
<blockquote>
<p><strong>补充阅读: <a href="https://www.rlogical.com/blog/differences-between-graphql-and-rest/">GraphQL 和 REST 之间的区别</a></strong></p>
</blockquote>
<h3 id="7-微服务"><a href="#7-微服务" class="headerlink" title="7. 微服务"></a>7. 微服务</h3><p>微服务是一种架构技术，正好是无服务的替代方案。代码维护依赖于微服务，它会负责地处理代码质量。</p>
<p>而且，微服务使应用可以无依赖且自由运行，你可以使用微服务来创建质量一流的项目。</p>
<p>微服务架构一直都在扩展，而且可以被证明是一个有效的投资。</p>
<h2 id="NodeJS-——-一个充满吸引力的运行环境"><a href="#NodeJS-——-一个充满吸引力的运行环境" class="headerlink" title="NodeJS —— 一个充满吸引力的运行环境"></a>NodeJS —— 一个充满吸引力的运行环境</h2><p>NodeJS 提供了相当多胜于其他框架的特性，其中一些如下：</p>
<ul>
<li>事件驱动和异步</li>
<li>全栈应用开发框架</li>
<li>易上手且市场要求严格</li>
<li>构建基于谷歌 V8 引擎</li>
<li>单线程</li>
<li>庞大的社区支持</li>
</ul>
<p>Node.js 是一个充满前景的应用建造者，**<a href="https://www.rlogical.com/hire-dedicated-developers">web 和移动应用开发者</a>**可以使用它的库以及多样的工具和技术。</p>
<p>根据最近的统计，你会发现使用 Node.js 创建的网站大约有 194k+ 个，这也说明了其火热程度。</p>
<blockquote>
<p>如果发现译文存在错误或其他需要改进的地方，欢迎到 <a href="https://github.com/xitu/gold-miner">掘金翻译计划</a> 对译文进行修改并 PR，也可获得相应奖励积分。文章开头的 <strong>本文永久链接</strong> 即为本文在 GitHub 上的 MarkDown 链接。</p>
</blockquote>
<hr>
<blockquote>
<p><a href="https://github.com/xitu/gold-miner">掘金翻译计划</a> 是一个翻译优质互联网技术文章的社区，文章来源为 <a href="https://juejin.im/">掘金</a> 上的英文分享文章。内容覆盖 <a href="https://github.com/xitu/gold-miner#android">Android</a>、<a href="https://github.com/xitu/gold-miner#ios">iOS</a>、<a href="https://github.com/xitu/gold-miner#%E5%89%8D%E7%AB%AF">前端</a>、<a href="https://github.com/xitu/gold-miner#%E5%90%8E%E7%AB%AF">后端</a>、<a href="https://github.com/xitu/gold-miner#%E5%8C%BA%E5%9D%97%E9%93%BE">区块链</a>、<a href="https://github.com/xitu/gold-miner#%E4%BA%A7%E5%93%81">产品</a>、<a href="https://github.com/xitu/gold-miner#%E8%AE%BE%E8%AE%A1">设计</a>、<a href="https://github.com/xitu/gold-miner#%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD">人工智能</a>等领域，想要查看更多优质译文请持续关注 <a href="https://github.com/xitu/gold-miner">掘金翻译计划</a>、<a href="http://weibo.com/juejinfanyi">官方微博</a>、<a href="https://zhuanlan.zhihu.com/juejinfanyi">知乎专栏</a>。</p>
</blockquote>
]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
      <tags>
        <tag>translation</tag>
      </tags>
  </entry>
  <entry>
    <title>(译)使用 GPT 基于个人文档建立聊天机器人的逐步教程</title>
    <url>/2023/03/27/translation-a-step-by-step-guide-to-building-a-chatbot-based-on-your-own-documents-with-gpt/</url>
    <content><![CDATA[<blockquote>
<ul>
<li>原文地址：<a href="https://bootcamp.uxdesign.cc/a-step-by-step-guide-to-building-a-chatbot-based-on-your-own-documents-with-gpt-2d550534eea5">A step-by-step guide to building a chatbot based on your own documents with GPT</a></li>
<li>原文作者：<a href="https://medium.com/@guodong_zhao">Guodong (Troy) Zhao</a></li>
<li>译文出自：<a href="https://github.com/xitu/gold-miner">掘金翻译计划</a></li>
<li>本文永久链接：<a href="https://github.com/itcodes/gold-miner/blob/master/article/2023/A-step-by-step-guide-to-building-a-chatbot-based-on-your-own-documents-with-GPT.md">https://github.com/itcodes/gold-miner/blob/master/article/2023/A-step-by-step-guide-to-building-a-chatbot-based-on-your-own-documents-with-GPT.md</a></li>
<li>译者：<a href="https://github.com/Tong-H">tong-h</a></li>
<li>校对者：</li>
</ul>
</blockquote>
<p>与 ChatGPT 聊天是有趣且丰富的，过去一段时间我一直在与它闲聊并探索新的想法。但这些都是比较随机的用例，新奇感很快就减弱，尤其是当你意识到它可以产生幻觉的时候。</p>
<p>我们如何以更高效的方式使用它？随着 OpenAI 最近发布的 GPT 3.5 系列 API，我们能做的事远不止是闲聊。对于企业和个人使用来说更高效的用例是 QA （问答），<strong>你用自然语言向机器人询问关于你自己的文档/数据，通过从文档中检索信息并生成回应，它可以快速的回答你</strong> [1]。你可以用它来做客户支持，综合用户研究，你的个人知识管理等等</p>
<p><img src="https://miro.medium.com/v2/resize:fit:1400/1*gUE4sFAEIhoR07IMUhzLaA.jpeg"></p>
<p>向机器人询问与文档有关的问题。用稳定扩散法生成的图像。</p>
<p>在本文中，我将探讨如何基于自己的数据创建自己的问答机器人，包括为什么有些方法不生效，以及使用 llama-index 和 GPT API 高效的创建文档问答聊天机器人的逐步引导</p>
<p>(如果你只想知道如何建立问答聊天机器人，你可以直接跳到“逐步创建文档问答聊天机器人”部分)</p>
<h2 id="探索不同的方法"><a href="#探索不同的方法" class="headerlink" title="探索不同的方法"></a>探索不同的方法</h2><p>我的日常工作是产品管理，阅读用户反馈以及内部文档占据了我生活的很大一部分。当 ChatGPT 出现的时候，我马上就想到了使用它作为助手来帮助我合成用户反馈，或者找到和我现在正在做的功能相关的旧产品文档。</p>
<p>我首先想到的是使用我自己的数据对 GPT 模型微调（fine-tuning）来实现目标。但微调的花费不少，而且需要一个有案例的大型数据库。每次当文档发生改变时都去微调也同样不可能。更关键的是微调根本不能让模型知道文档中的所有信息，而是教给模型新技能。因此，对多文档问答来说，微调并不是一个可行的方式。</p>
<p>我想到的第二个方法是通过在提示中提供上下文来提示工程。比如，我可以在真实问题之前附加原始文档内容，而不是直接提问。但是 GPT 模型的注意广度是受限的，它只能接受提示中的几千字（大约 4000 个符号或者 3000 字）。我们有成千封用户反馈邮件和数百份产品文档，所以把所有内容放在提示中是不可能的。往 API 传递长字符串的成本也是比较高的， 因为定价是基于使用的符号数量。</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">我将根据下面的内容向你询问：—上下文的开始—你的文档内容—上下文的结束—我的问题是：“用户希望在 <span class="keyword">app</span> 中看到什么特性？”</span><br></pre></td></tr></table></figure>

<p>（如果你想要学习更多关于 GPT 的微调和提示工程，你可以阅读这篇文章：<a href="https://medium.com/design-bootcamp/3-ways-to-tailor-foundation-language-models-like-gpt-for-your-business-e68530a763bd">为个人业务量身定制的基础语言模型（如GPT）的3种方法</a>）</p>
<p>由于提示受限于输入符号数量，所以我有一个想法，首先使用算法搜索文档，并选择相关的摘要，然后只将这些相关的内容以及我的问题传递给 GPT。当我研究这个想法的时候，我偶然发现一个叫 gpt-index 的库（现在更名为 LlamaIndex），这个库完全符合我的想法，而且使用简单 [2]。</p>
<p><img src="https://miro.medium.com/v2/resize:fit:1400/1*Zi85PvOv8tpaB4SvpTRlHw.png"></p>
<p>从文件中提取相关部分，然后将其反馈给提示。图标来自<a href="https://www.flaticon.com/">https://www.flaticon.com/</a></p>
<p>在下一节中，我将给一个分步教程关于如何使用 LlamaIndex 和 GPT 来创建一个基于个人数据的问答聊天机器人。</p>
<h2 id="逐步创建文档问答聊天机器人"><a href="#逐步创建文档问答聊天机器人" class="headerlink" title="逐步创建文档问答聊天机器人"></a>逐步创建文档问答聊天机器人</h2><p>在本节中，我们将基于现有的文档用 LlamaIndex 和 GPT (text-davinci-003) 创建一个问答聊天机器人，这样你可以就你的文档提出问题，并从聊天机器人获得答案，全部都是使用自然语言。</p>
<h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><p>在开始之前，我们需要准备以下几件事：</p>
<ul>
<li>你的 OpenAI API Key，可以在 <a href="https://platform.openai.com/account/api-keys">https://platform.openai.com/account/api-keys</a> 中找到。</li>
<li>你的文档的数据库，LlamaIndex 支持多种不同的数据来源，比如 Notion，Google Docs，Asana 等等 [3]。在本教程中，我们只使用一个简单的 text 文件来做示范。</li>
<li> 一个本地 Python 环境或者在线 <a href="https://colab.research.google.com/">Google Colab notebook</a>。</li>
</ul>
<h2 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h2><p>这个工作流程简单易懂，只需要几个步骤：</p>
<ol>
<li>使用 LlamaIndex 创建文档数据的索引。</li>
<li>使用自然语言查询索引。</li>
<li>LlamaIndex 将检索相关部分并传递给 GPT 提示。</li>
<li>结合相关上下文询问 GPT，并构建反应。</li>
</ol>
<p>LlamaIndex 所做的是将原始的文档数据转化为矢量索引，这会使查询变得非常高效。LlamaIndex 将基于查询和数据的相似性来使用这个索引去找到最相关的部分。再将检索到的信息插入到提示中发送给 GPT，这样 GPT 就有了回答问题的上下文。</p>
<p><strong>设置</strong></p>
<p>我们需要先安装 LlamaIndex，只需要在终端或者 Google Colab notebook 中运行以下命令。这些命令会安装 LlamaIndex 和 OpenAI。</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">!pip <span class="keyword">install </span><span class="keyword">llama-index!pip </span><span class="keyword">install </span>openai</span><br></pre></td></tr></table></figure>

<p>下一步，我们将在 python 中导入这些库，然后在一个新的 .py 文件中设置你的 OpenAI API key。</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> llama_index <span class="keyword">import</span> GPTSimpleVectorIndex, Document, SimpleDirectoryReaderimport osos.environ[<span class="string">&#x27;OPENAI_API_KEY&#x27;</span>] = <span class="string">&#x27;sk-YOUR-API-KEY&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>构建索引并保存</strong></p>
<p>在安装以及导入了所需的库之后，我们需要去构建文档的索引。</p>
<p>我们可以使用 LllamaIndex 提供的 SimpleDirectoryReader 方法来加载文档，或者也可以从字符串中加载。</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">documents = SimpleDirectoryReader(<span class="string">&#x27;your_directory&#x27;</span>)<span class="selector-class">.load_data</span>()text_list = <span class="selector-attr">[text1, text2, ...]</span>documents = <span class="selector-attr">[Document(t) for t in text_list]</span></span><br></pre></td></tr></table></figure>

<p>LlamaIndex 也提供多种不同的数据连接器，包括 Notion，Asana，Google Drive，Obsidian 等等。你可以在 <a href="https://llamahub.ai/">https://llamahub.ai/</a> 中找到可用的数据连接器。</p>
<p>在文档加载后，我们可以用以下方法简单的构建索引</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">index</span> = GPTSimpleVectorIndex(documents)</span><br></pre></td></tr></table></figure>

<p>如果你想要保存索引并加载它以便后续使用，你可以使用以下方法</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">index.save<span class="constructor">_to_disk(&#x27;<span class="params">index</span>.<span class="params">json</span>&#x27;)</span>index = <span class="module-access"><span class="module"><span class="identifier">GPTSimpleVectorIndex</span>.</span></span>load<span class="constructor">_from_disk(&#x27;<span class="params">index</span>.<span class="params">json</span>&#x27;)</span></span><br></pre></td></tr></table></figure>

<p><strong>查询索引并获取响应</strong></p>
<p>查询索引是很简单的</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">response</span> = index.query(<span class="string">&quot;What features do users want to see in the app?&quot;</span>)pr<span class="built_in">int</span>(<span class="built_in">response</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/1*g0YR2LwF1oa1mfP4U0ZBcQ.png"></p>
<p>一个响应案例</p>
<p>然后就可以了！你会得到打印的答案。在后台，LlamaIndex 会接受你的提示并在索引中搜索相关的语块，然后将你的提示以及相关的语块传递给 GPT。</p>
<p><strong>一些关于高级使用的说明</strong></p>
<p>上面的步骤仅仅展示了 LlamaIndex 和 GPT 非常简单的回答问题的入门用法。但你可以做更多。事实上，你可以配置 LlamaIndex 去使用不同的大型语言模型（LLM），使用不同类型的索引去做不同的任务，用一个新的索引来更新现有的索引等等。如果你感兴趣，可以阅读他们的文档 <a href="https://gpt-index.readthedocs.io/en/latest/index.html">https://gpt-index.readthedocs.io/en/latest/index.html</a>。</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>在这篇文章中，我们看到了如何将 GPT 与 LlamaIndex 结合起来，建立一个文档问答聊天机器人。虽然 GPT（和其他 LLM）本身就很强大，但如果我们把它与其他工具、数据或进程结合起来，它的力量就可以大大放大。</p>
<p>你会用一个文档问答聊天机器人做什么？</p>
<blockquote>
<p>如果发现译文存在错误或其他需要改进的地方，欢迎到 <a href="https://github.com/xitu/gold-miner">掘金翻译计划</a> 对译文进行修改并 PR，也可获得相应奖励积分。文章开头的 <strong>本文永久链接</strong> 即为本文在 GitHub 上的 MarkDown 链接。</p>
</blockquote>
<hr>
<blockquote>
<p><a href="https://github.com/xitu/gold-miner">掘金翻译计划</a> 是一个翻译优质互联网技术文章的社区，文章来源为 <a href="https://juejin.im/">掘金</a> 上的英文分享文章。内容覆盖 <a href="https://github.com/xitu/gold-miner#android">Android</a>、<a href="https://github.com/xitu/gold-miner#ios">iOS</a>、<a href="https://github.com/xitu/gold-miner#%E5%89%8D%E7%AB%AF">前端</a>、<a href="https://github.com/xitu/gold-miner#%E5%90%8E%E7%AB%AF">后端</a>、<a href="https://github.com/xitu/gold-miner#%E5%8C%BA%E5%9D%97%E9%93%BE">区块链</a>、<a href="https://github.com/xitu/gold-miner#%E4%BA%A7%E5%93%81">产品</a>、<a href="https://github.com/xitu/gold-miner#%E8%AE%BE%E8%AE%A1">设计</a>、<a href="https://github.com/xitu/gold-miner#%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD">人工智能</a>等领域，想要查看更多优质译文请持续关注 <a href="https://github.com/xitu/gold-miner">掘金翻译计划</a>、<a href="http://weibo.com/juejinfanyi">官方微博</a>、<a href="https://zhuanlan.zhihu.com/juejinfanyi">知乎专栏</a>。</p>
</blockquote>
]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
      <tags>
        <tag>translation</tag>
      </tags>
  </entry>
  <entry>
    <title>(译)CSS 是魔法, 是时候试试 3D 了</title>
    <url>/2021/07/28/translation-css-is-magic-its-time-you-try-3d/</url>
    <content><![CDATA[<blockquote>
<ul>
<li>原文地址：<a href="https://levelup.gitconnected.com/css-is-magic-its-time-you-try-3d-91a2dd49c781">CSS is magic, its time you try 3D</a></li>
<li>原文作者：<a href="https://medium.com/@ankitachakraborty">Ankita Chakraborty</a></li>
<li>译文出自：<a href="https://github.com/xitu/gold-miner">掘金翻译计划</a></li>
<li>本文永久链接：<a href="https://github.com/xitu/gold-miner/blob/master/article/2021/css-is-magic-its-time-you-try-3d.md">https://github.com/xitu/gold-miner/blob/master/article/2021/css-is-magic-its-time-you-try-3d.md</a></li>
<li>译者：<a href="https://github.com/Tong-H">tong-h</a></li>
<li>校对者：<a href="https://github.com/Chorer">Chorer</a> <a href="https://github.com/PassionPenguin">PassionPenguin</a></li>
</ul>
</blockquote>
<h1 id="CSS-是魔法-是时候试试-3D-了"><a href="#CSS-是魔法-是时候试试-3D-了" class="headerlink" title="CSS 是魔法, 是时候试试 3D 了"></a>CSS 是魔法, 是时候试试 3D 了</h1><p><img src="https://cdn-images-1.medium.com/max/5440/1*WKVcqB1XHjA5Fbdm-AQU-g.png" alt="小狗插图：[subpng](https://www.subpng.com/)，眼睛插图：[pngegg](https://www.pngegg.com)"></p>
<p><strong>CSS transform</strong> 是 css 最全能，最神奇的属性之一。它不仅是在你的网站上实现平滑动画的最佳方式，更是你创造奇迹的一种方式。比如这个 🙀 —</p>
<p><img src="https://cdn-images-1.medium.com/max/2000/1*dFJEMRBc7vlHnLf_MYI0Iw.gif" alt="CSS 3D 立方体!"></p>
<blockquote>
<p>我先为这几个占了你的网络宽带的动图道歉，但我希望它是值得的！🤜🤛</p>
</blockquote>
<p>等下，这个立方体的两个面不见了！！！</p>
<p>我是故意这么做的，这样就会更形象，也更容易理解。我会在文章末尾添加一个链接用于获取上面示例的完整代码！</p>
<h3 id="先说最重要的，Translate-是如何工作的？"><a href="#先说最重要的，Translate-是如何工作的？" class="headerlink" title="先说最重要的，Translate 是如何工作的？"></a>先说最重要的，Translate 是如何工作的？</h3><p><code>translate</code> 方法主要是将一个 html 元素从它真实的位置上移动，而且不会干扰布局树上的其他兄弟或父级元素。简单来说，<code>translateX</code> 方法是将元素左右移动，而 <code>translateY</code> 是上下移动元素。</p>
<p><img src="https://cdn-images-1.medium.com/max/3688/1*cq8Q9DGLScj3v038DnxjhQ.png" alt="translate 是如何使元素在 X 轴和 Y 轴中平移的"></p>
<h3 id="但-Z-轴是什么？"><a href="#但-Z-轴是什么？" class="headerlink" title="但 Z 轴是什么？"></a>但 Z 轴是什么？</h3><p>为了更形象地了解 <code>translate</code> 是如何沿着 Z 轴工作的，想象一下你的 <code>div</code> 在你的屏幕中前后移动而不是上下或左右。</p>
<p><img src="https://cdn-images-1.medium.com/max/4328/1*qXx6HIGzXvPZY4oO_4gEFQ.png" alt="沿着 Z 轴平移"></p>
<p>这怎么可能？一个网站看上去就像是一本书中的一页纸，对吧？怎么可能会有东西从屏幕中跑出来向你靠近（或者远离你）？</p>
<p>你的 <code>div</code> 当然不会真的跑出来，但它给你一种感觉好像它会。让我们一起看看沿着不同的轴修改 <code>translate</code> 的值会怎样。</p>
<p><img src="https://cdn-images-1.medium.com/max/2000/1*lNQdNBsRYNzWduwKFCdR5w.gif"></p>
<p>我不知道你怎么想，但这个绿色的盒子看起来并不像是在靠近或者远离我。👺</p>
<p>如何解决这个问题呢？我们需要改变一下我们的<strong>视角</strong>。😉</p>
<h3 id="CSS-的-perspective-属性"><a href="#CSS-的-perspective-属性" class="headerlink" title="CSS 的 perspective 属性"></a>CSS 的 perspective 属性</h3><p>如果不设置正确的 <code>perspective</code> 值，你无法在视觉上检测到 Z 轴的改变。</p>
<blockquote>
<p><code>perspective</code> 属性定义元素与用户的距离。那么，相比于一个较高的值，一个较低的值产生的 3D 效果会更强烈。</p>
<p>来源 —— <a href="https://www.w3schools.com/cssref/css3_pr_perspective.asp">W3 Schools</a></p>
</blockquote>
<p>让我们给这三个方块的父元素加上下面的 CSS ——</p>
<p><img src="https://cdn-images-1.medium.com/max/2724/1*ijVRelbthN6Ivuf5xDs7Iw.png"></p>
<p><strong>瞧：</strong></p>
<p><img src="https://cdn-images-1.medium.com/max/2000/1*5Go0arpobwsP4NtVYPRH4A.gif"></p>
<h3 id="rotate-方法"><a href="#rotate-方法" class="headerlink" title="rotate 方法"></a>rotate 方法</h3><p>顾名思义，<code>rotate</code> 根据一个给定的角度，沿着某一个轴旋转元素。但我们需要一点视觉效果来展示 <code>rotate</code> 是如何沿着不同的轴工作的。</p>
<p><img src="https://cdn-images-1.medium.com/max/2000/1*L06oWqkChV9deUNUVKrITw.gif" alt="在没有 perspective 的情况下沿着不同的轴旋转"></p>
<p><img src="https://cdn-images-1.medium.com/max/2000/1*nu1bM-wUxugvSsDj2H1ZSg.gif" alt="有 perspective 的情况下沿着不同的轴旋转"></p>
<h3 id="立方体"><a href="#立方体" class="headerlink" title="立方体"></a>立方体</h3><p>我们终于可以从立方体的面开始了！我们将有四个面 —— bottom，front，back，left：</p>
<p><img src="https://cdn-images-1.medium.com/max/2388/1*q69vRRksjkM4M2xY0Meycg.png"></p>
<p>同样的，我为主要的包裹容器 <code>box-wrapper</code> 添加了一些 css。</p>
<p><img src="https://cdn-images-1.medium.com/max/2000/1*gSM7KPGdGmzmo5D-Jpr_UA.png"></p>
<p>注意我为容器添加了 <code>transform-style: preserve-3d</code>，这是渲染 3D 子元素的一个重要步骤。每一个面的宽高都是 <code>200px</code>，我们需要记住这个值，因为我们将依据每一个面的尺寸为每个面添加 <code>translate</code> 值。</p>
<p>立方体的每一个面都将是一个绝对的划分，我添加了文字用于代表每一个面。我为每一个面添加了 <code>opacity: 0.5</code>，这样就能清楚地看到它们之间的重叠了。</p>
<p><img src="https://cdn-images-1.medium.com/max/2236/1*iygD8k6WIHvobgQKUAc9Ww.png"></p>
<p>为了将 front 放到前面，我们为它添加 <code>translateZ(100px)</code>。</p>
<p><img src="https://cdn-images-1.medium.com/max/2768/1*-URkuoY7VunPTDHgQzSqsA.png"></p>
<p>对，看起来就像这样。🙁</p>
<p>那么我们怎么使它 3D <strong>化</strong>？我们的 <code>perspective</code> 知识在这里要派上用场了。</p>
<p>添加这个 css 到包裹容器的父级元素 <code>box-container</code>：</p>
<p><img src="https://cdn-images-1.medium.com/max/2000/1*pB8EdPyeKJywcoUVkdNszw.png"></p>
<p>同样的，为了将 back 调后，我们将为它添加与 front 相反的 css。</p>
<p><img src="https://cdn-images-1.medium.com/max/2000/1*r1-jRUGjUW-8a0-ckLay_Q.png"></p>
<p><strong>效果 ——</strong></p>
<p><img src="https://cdn-images-1.medium.com/max/2608/1*q6x7s9gLwwVf3WtIMaQYvg.png"></p>
<p>你能够想象 front 向你靠近，back （黄色那个）离你远去吗？如果这仍然不足以描绘，那让我们试着把立方体的包裹容器旋转一下：</p>
<p><img src="https://cdn-images-1.medium.com/max/2000/1*jaSlx71f9SunHXIOxGdthg.gif"></p>
<p>很奇妙，对吗？</p>
<p>下一步，我们需要安顿 bottom 💁‍♀️，为了将 bottom 放到适当的位置，我们把他沿着 X 轴旋转 ** 90 度**。</p>
<p><img src="https://cdn-images-1.medium.com/max/2000/1*icrwzzydWhtOKhj85QnO1A.gif"></p>
<p>我们还需要移动它的位置使它能正好在立方体的 front 和 back 之间。我们可以做的是移动 bottom 使其与 front 一致，然后旋转它。听起来有点困惑对吗？</p>
<p><strong>步骤 —— 1: 将 bottom 和 front 对齐</strong></p>
<p><strong>CSS:</strong></p>
<p><img src="https://cdn-images-1.medium.com/max/2000/1*CBL0oCueX-bgBbVRJXC0dA.png" alt="将 bottom 和 front 对齐"></p>
<p><strong>效果:</strong></p>
<p><img src="https://cdn-images-1.medium.com/max/2000/1*xLD_mS8WsK3nzScd6tbwKw.gif" alt="将 bottom 和 front 对齐"></p>
<p><strong>步骤 —— 2: 将 bottom 旋转 90 度</strong></p>
<p><strong>CSS:</strong></p>
<p><img src="https://cdn-images-1.medium.com/max/2152/1*LVmwdMV9BtJEZYP9u37pmw.png" alt="将 bottom 的 translate 和 rotate 相结合"></p>
<p><strong>Result:</strong></p>
<p><img src="https://cdn-images-1.medium.com/max/2000/1*qsGQ7VjZngLZm9SoU8LuxA.gif" alt="将 bottom 的 translate 和 rotate 相结合"></p>
<p>bottom 看起来现在安全的在自己的位置上了。但 left 好像被困在了中间。🙍‍♀️ 首先我们需要将它移动到旁边然后旋转它。让我们把他沿着 X 轴移动 <strong>-100px</strong>，然后在 Y 轴上旋转它。</p>
<p><strong>CSS:</strong></p>
<p><img src="https://cdn-images-1.medium.com/max/2180/1*5RJvq7AM6mGD5zVVGoXM7w.png"></p>
<p><strong>效果:</strong></p>
<p><img src="https://cdn-images-1.medium.com/max/2000/1*WnnTtpzcd691KA2qO0b16w.gif"></p>
<p><strong>看</strong>！我们的<strong>近似立方体</strong>已经快完成了。我建议你在每一个轴上都尝试调整一下 translate 和 rotate 的值，尝试添加顶面和右面去做一个完整的立方体。</p>
<p>现在，最后关键的一步，旋转我们的立方体 😍</p>
<p><strong>CSS:</strong></p>
<p><img src="https://cdn-images-1.medium.com/max/2000/1*VhF0Ltn-I8vLPhTc6xaj9A.png"></p>
<p>将上面的动画添加到我们的 <code>box-wrapper</code> 上 ——</p>
<p><img src="https://cdn-images-1.medium.com/max/2336/1*RbHF6_VStIc1nYnx5g_pog.png"></p>
<p>效果 🤜🤛:</p>
<p><img src="https://cdn-images-1.medium.com/max/2000/1*OZ9tJyqDlJZ5NZhuRT1-wA.gif"></p>
<p>相同的工作代码，参考[GitHub 仓库]](<a href="https://github.com/ankita1010/css-cube)%EF%BC%8C%E5%B0%9D%E8%AF%95%E4%BD%93%E9%AA%8C%E4%B8%80%E4%B8%8B">https://github.com/ankita1010/css-cube)，尝试体验一下</a> <strong>CSS 3D</strong> 这个魔法之池。💫</p>
<blockquote>
<p><strong>请注意</strong> —— 我调整了 perspective 的值，以及添加了一些动画来达到侧面的最终位置，以更清楚地展示变化。我稍微旋转了 <code>box-wrapper</code>，这样从正确的角度看更明显些。</p>
</blockquote>
<p>干杯！</p>
<blockquote>
<p>如果发现译文存在错误或其他需要改进的地方，欢迎到 <a href="https://github.com/xitu/gold-miner">掘金翻译计划</a> 对译文进行修改并 PR，也可获得相应奖励积分。文章开头的 <strong>本文永久链接</strong> 即为本文在 GitHub 上的 MarkDown 链接。</p>
</blockquote>
<hr>
<blockquote>
<p><a href="https://github.com/xitu/gold-miner">掘金翻译计划</a> 是一个翻译优质互联网技术文章的社区，文章来源为 <a href="https://juejin.im/">掘金</a> 上的英文分享文章。内容覆盖 <a href="https://github.com/xitu/gold-miner#android">Android</a>、<a href="https://github.com/xitu/gold-miner#ios">iOS</a>、<a href="https://github.com/xitu/gold-miner#%E5%89%8D%E7%AB%AF">前端</a>、<a href="https://github.com/xitu/gold-miner#%E5%90%8E%E7%AB%AF">后端</a>、<a href="https://github.com/xitu/gold-miner#%E5%8C%BA%E5%9D%97%E9%93%BE">区块链</a>、<a href="https://github.com/xitu/gold-miner#%E4%BA%A7%E5%93%81">产品</a>、<a href="https://github.com/xitu/gold-miner#%E8%AE%BE%E8%AE%A1">设计</a>、<a href="https://github.com/xitu/gold-miner#%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD">人工智能</a>等领域，想要查看更多优质译文请持续关注 <a href="https://github.com/xitu/gold-miner">掘金翻译计划</a>、<a href="http://weibo.com/juejinfanyi">官方微博</a>、<a href="https://zhuanlan.zhihu.com/juejinfanyi">知乎专栏</a>。</p>
</blockquote>
]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
      <tags>
        <tag>translation</tag>
      </tags>
  </entry>
  <entry>
    <title>(译)CSS 是魔法, 是时候试试 3D 了</title>
    <url>/2022/03/14/translation-effects-of-too-much-lazy-loading-on-web-performance/</url>
    <content><![CDATA[<blockquote>
<ul>
<li>原文地址：<a href="https://blog.bitsrc.io/effects-of-too-much-lazy-loading-on-performance-4dbe8df33c37">Effects of Too Much Lazy Loading on Web Performance</a></li>
<li>原文作者：<a href="https://medium.com/@yasassri">Yasas Sri Wickramasinghe</a></li>
<li>译文出自：<a href="https://github.com/xitu/gold-miner">掘金翻译计划</a></li>
<li>本文永久链接：<a href="https://github.com/xitu/gold-miner/blob/master/article/2022/effects-of-too-much-lazy-loading-on-web-performance.md">https://github.com/xitu/gold-miner/blob/master/article/2022/effects-of-too-much-lazy-loading-on-web-performance.md</a></li>
<li>译者：<a href="https://github.com/Tong-H">tong-h</a></li>
<li>校对者：<a href="https://github.com/Isildur46">Isildur46</a> <a href="https://github.com/xionglong58">xionglong58</a></li>
</ul>
</blockquote>
<h1 id="过度使用懒加载对-Web-性能的影响"><a href="#过度使用懒加载对-Web-性能的影响" class="headerlink" title="过度使用懒加载对 Web 性能的影响"></a>过度使用懒加载对 Web 性能的影响</h1><p><img src="https://cdn-images-1.medium.com/max/5856/0*u6JBhsu5xQWO8ZfH.jpg"></p>
<p>如今为了提升应用性能，懒加载被广泛使用于 Web 应用中。它帮助开发者减少网站加载时间，节省流量以及提升用户体验。</p>
<p>但懒加载的过度使用会给应用性能带来负面影响。所以在这篇文章中，我会详述懒加载对性能的影响，来帮助你理解应该何时使用它。</p>
<h2 id="什么是懒加载？"><a href="#什么是懒加载？" class="headerlink" title="什么是懒加载？"></a>什么是懒加载？</h2><p><img src="https://cdn-images-1.medium.com/max/4320/0*CUGBWo-mhr1DT-wY.png"></p>
<p>懒加载是一种常见的技术，通过按需加载资源来减少网页的数据使用。</p>
<p>如今懒加载已经是一种 Web 标准，大部分的主流浏览器都支持通过  <code>loading=&quot;lazy&quot;</code> 属性使用懒加载。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// with img tag</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">src</span>=<span class="string">&quot;bits.jpeg&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">loading</span>=<span class="string">&quot;lazy&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">alt</span>=<span class="string">&quot;an image of a laptop&quot;</span> </span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// with IFrame</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">src</span>=<span class="string">&quot;about-page.html&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">loading</span>=<span class="string">&quot;lazy&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>一旦启用懒加载，只有当用户滚动到需要该内容显示的地方才会去加载。</p>
<p><img src="https://miro.medium.com/proxy/1*hG44JzeROyaiqZteU6Kr8A.gif" alt="**懒加载是如何工作的**"></p>
<p>如你所见，懒加载肯定可以提升应用性能以及用户体验，这也是为什么它已成为开发者在开发应用时的首选优化措施。</p>
<p>但懒加载并不总是保证提升应用性能。那么让我们看看懒加载对性能的影响到底是什么。</p>
<h2 id="懒加载对性能的影响"><a href="#懒加载对性能的影响" class="headerlink" title="懒加载对性能的影响"></a>懒加载对性能的影响</h2><p>许多研究表明，开发者通过懒加载可以实现两种优势。</p>
<ul>
<li><strong>减少页面加载时间（PLT）：</strong>通过延迟资源加载减少首屏页面加载时间。</li>
<li><strong>优化资源消耗：</strong>通过资源懒加载优化系统资源使用，这在内存以及处理能力较低的移动设备上效果比较好。</li>
</ul>
<p>在另一方面，过度使用懒加载会对性能产生一些明显的影响。</p>
<h3 id="减慢快速滚动的速度"><a href="#减慢快速滚动的速度" class="headerlink" title="减慢快速滚动的速度"></a>减慢快速滚动的速度</h3><p>如果你有一个 Web 应用，比如在线商店，你需要让用户可以快速上下滚动以及导航。</p>
<p>对这样的应用使用懒加载会减慢滚动速度，因为我们需要等待数据加载完成。这会降低应用性能以及引发用户体验问题。</p>
<h3 id="因为内容变化而导致的延迟"><a href="#因为内容变化而导致的延迟" class="headerlink" title="因为内容变化而导致的延迟"></a>因为内容变化而导致的延迟</h3><p>如果你还没有为懒加载的图片定义的 <code>width</code> 和 <code>height</code> 属性，那么在图片渲染过程中会出现明显的延迟。因为资源在页面初始化时没有加载，浏览器不知道适用于页面布局的内容尺寸。</p>
<p>一旦内容加载完成，而用户滚动到特定视图中，浏览器需要处理内容以及再一次改变页面布局。这会使其他元素移位，也会带来糟糕的用户体验。</p>
<h3 id="内容缓冲"><a href="#内容缓冲" class="headerlink" title="内容缓冲"></a>内容缓冲</h3><p>如果你在应用中使用非必要的懒加载，这会导致内容缓冲。当用户快速向下滚动而资源却还在下载中时会发生这种情况。</p>
<p>尤其是带宽连接较慢时会发生这种情况，这会影响网页渲染速度。</p>
<h2 id="应该何时使用懒加载"><a href="#应该何时使用懒加载" class="headerlink" title="应该何时使用懒加载"></a>应该何时使用懒加载</h2><p>你现在肯定在想如何合理使用懒加载，使其发挥最大的效果从而创造更好的 Web 性能。</p>
<p>下面的一些建议有助于找到最佳着手点。</p>
<h3 id="1-在正确的地方懒加载正确的资源"><a href="#1-在正确的地方懒加载正确的资源" class="headerlink" title="1. 在正确的地方懒加载正确的资源"></a>1. 在正确的地方懒加载正确的资源</h3><p>如果你有一个需要很多资源的冗长的网页，那你可以考虑使用懒加载，但只能针对用户视图外或者被折叠的内容使用。</p>
<p><img src="https://cdn-images-1.medium.com/max/2410/0*xq-umzzOZLKPagKn.png"></p>
<p>确保你没有懒加载后台任务执行所需的资源，比如 JavaScript 组件，背景图片或者其他多媒体内容。而且，你一定不能延迟这些资源的加载。</p>
<p>你可以使用谷歌浏览器的 Lighthouse 工具来检查，识别那些可添加懒加载属性的资源。</p>
<h3 id="2-懒加载那些不妨碍网页使用的内容"><a href="#2-懒加载那些不妨碍网页使用的内容" class="headerlink" title="2. 懒加载那些不妨碍网页使用的内容"></a>2. 懒加载那些不妨碍网页使用的内容</h3><p>懒加载最好是用于不重要的非必需的 Web 资源。另外，如果资源没有像预期那样懒加载，那么不要忘记错误处理和提供良好的用户体验。</p>
<p>请注意，原生懒加载依然没有被所有平台和浏览器普遍支持。而且，如果你在使用一个库或者自定义的 JavaScript 脚本，那么这不会对所有用户都生效。尤其，那些禁止 JavaScript 的浏览器会面临懒加载技术上的问题。</p>
<h3 id="3-懒加载对搜索引擎优化（SEO）而言不重要的资源"><a href="#3-懒加载对搜索引擎优化（SEO）而言不重要的资源" class="headerlink" title="3. 懒加载对搜索引擎优化（SEO）而言不重要的资源"></a>3. 懒加载对搜索引擎优化（SEO）而言不重要的资源</h3><p>随着内容懒加载，网站将逐渐渲染，这也就是说，某些内容在首屏加载时并不可用。咋一听，好像是懒加载有助于提升 SEO 网页排名，因为它使页面加载速度大大加快。但如果你过度使用懒加载，会产生一些负面影响。</p>
<p>当 SEO 索引时，搜索引擎爬行网站抓取数据以便索引页面，但由于懒加载，网络爬虫无法获取所有页面数据。除非用户与页面进行互动，这样 SEO 就不会忽略这些信息。</p>
<p>但作为开发者，我们并不希望 SEO 遗漏我们重要的业务数据。所以我建议不要将懒加载用在针对 SEO 的内容上，比如关键词或者业务信息。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>懒加载可以提升网页使用率以及性能，对 Web 开发者而言是一个称手的工具。所谓“过度烹饪烧坏汤”，过度使用这项技术也会降低网站性能。</p>
<p>在这篇文章中，我们关注懒加载对性能的影响，通过几个建议帮助你理解应该何时使用它。如果你谨慎的使用这项技术，明白何时何地使用它，你的网站会得到明显的性能提升。</p>
<p>希望你有从中得到有用的知识点，感谢阅读！</p>
<blockquote>
<p>如果发现译文存在错误或其他需要改进的地方，欢迎到 <a href="https://github.com/xitu/gold-miner">掘金翻译计划</a> 对译文进行修改并 PR，也可获得相应奖励积分。文章开头的 <strong>本文永久链接</strong> 即为本文在 GitHub 上的 MarkDown 链接。</p>
</blockquote>
<hr>
<blockquote>
<p><a href="https://github.com/xitu/gold-miner">掘金翻译计划</a> 是一个翻译优质互联网技术文章的社区，文章来源为 <a href="https://juejin.im/">掘金</a> 上的英文分享文章。内容覆盖 <a href="https://github.com/xitu/gold-miner#android">Android</a>、<a href="https://github.com/xitu/gold-miner#ios">iOS</a>、<a href="https://github.com/xitu/gold-miner#%E5%89%8D%E7%AB%AF">前端</a>、<a href="https://github.com/xitu/gold-miner#%E5%90%8E%E7%AB%AF">后端</a>、<a href="https://github.com/xitu/gold-miner#%E5%8C%BA%E5%9D%97%E9%93%BE">区块链</a>、<a href="https://github.com/xitu/gold-miner#%E4%BA%A7%E5%93%81">产品</a>、<a href="https://github.com/xitu/gold-miner#%E8%AE%BE%E8%AE%A1">设计</a>、<a href="https://github.com/xitu/gold-miner#%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD">人工智能</a>等领域，想要查看更多优质译文请持续关注 <a href="https://github.com/xitu/gold-miner">掘金翻译计划</a>、<a href="http://weibo.com/juejinfanyi">官方微博</a>、<a href="https://zhuanlan.zhihu.com/juejinfanyi">知乎专栏</a>。</p>
</blockquote>
]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
      <tags>
        <tag>translation</tag>
      </tags>
  </entry>
  <entry>
    <title>(译)提高 Firefox 在 Linux 上的稳定性</title>
    <url>/2021/05/29/translation-improving-firefox-stability-on-linux/</url>
    <content><![CDATA[<blockquote>
<ul>
<li>原文地址：<a href="https://hacks.mozilla.org/2021/05/improving-firefox-stability-on-linux/">Improving Firefox stability on Linux – Mozilla Hacks - the Web developer blog</a></li>
<li>原文作者：<a href="https://hacks.mozilla.org/author/gsveltomozilla-com/">Gabriele Svelto</a></li>
<li>译文出自：<a href="https://github.com/xitu/gold-miner">掘金翻译计划</a></li>
<li>本文永久链接：<a href="https://github.com/xitu/gold-miner/blob/master/article/2021/improving-firefox-stability-on-linux.md">https://github.com/xitu/gold-miner/blob/master/article/2021/improving-firefox-stability-on-linux.md</a></li>
<li>译者：<a href="https://github.com/Tong-H">tong-h</a></li>
<li>校对者： <a href="https://github.com/Kimhooo">Kimhooo</a>  <a href="https://github.com/PingHGao">PingHGao</a></li>
</ul>
</blockquote>
<h1 id="提高-Firefox-在-Linux-上的稳定性"><a href="#提高-Firefox-在-Linux-上的稳定性" class="headerlink" title="提高 Firefox 在 Linux 上的稳定性"></a>提高 Firefox 在 Linux 上的稳定性</h1><p>大约一年前在 Mozilla, 我们开始努力提升 Firefox 在 Linux 上的稳定性。这个努力很快转变成 FOSS(Free and open source software, 自由及开放源代码软件) 项目之间的一个良好协同的案例。</p>
<p>每次 Firefox 崩溃的时候, 用户都可以发送一份错误报告给我们, 我们通过这份报告分析问题并且希望能够修复它。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fd67fb6596cc45388bf1cd26b7080d3b~tplv-k3u1fbpfcp-zoom-1.image" alt="A screenshot of a tab that justc crashed"></p>
<p>除了其他信息外，这份报告还包含一个小型转储文件：进程内存在崩溃时生成的一个小型快照。这包含进程寄存器的内容，以及来自每个线程堆栈中的数据。</p>
<p>通常是这样：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f85494459ff94058b1846629143c3ed8~tplv-k3u1fbpfcp-zoom-1.image"></p>
<p>如果你熟悉核心转储文件，那么小型转储文件在本质上是他们的一个缩小版。小型转储文件的格式最初是微软设计出来的，且在 Windows 中有一个原生的方式编写小型转储文件。在 Linux 中，我们使用 Breakpad 来做这个工作。Breakpad 起源于谷歌，用于他们自己的软件(Picasa, Google Earth 等等)，。但我们 fork 了这个项目，为了达到我们的目标做了大量修改且最近用 Rust 重写了它的部分代码。</p>
<p>一旦用户提交一份崩溃报告，我们就有一个服务端组件 Socorro，去处理这份报告以及从小型转储文件里提取堆栈跟踪信息。然后根据崩溃线程的堆栈跟踪的顶层方法名对报告进行集群。当一份新的崩溃报告被发现时，我们会把他归类为 bug 并开始致力于修复它。下面是一个关于崩溃如何被分组的例子：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b45c50c52bfa4e51b923c8543f7bdcc4~tplv-k3u1fbpfcp-zoom-1.image" alt="The snapshot of a stack trace as displayed on crash-stats.mozilla.com"></p>
<p>从一个小型转储文件里提取一份有意义的堆栈跟踪信息，还需要两件事：展开信息和符号。展开信息是一组指令，描述如何根据给定的一个指令指针在堆栈中找到各类框架。符号信息包含与给定的地址范围相对应的函数名称，以及其源文件和给定指令所对应的行号。</p>
<p>在常规的 Firefox 版本中，我们从构建文件中提取这些信息且以 Breakpad 标准格式存储到符号文件中。带有这些信息， Socorro 可以创建一个人类可读的堆栈跟踪。下面是这一整个流程图：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c9cf5012206843d7815aceddd969d68d~tplv-k3u1fbpfcp-zoom-1.image" alt="图形化表示崩溃报告的流程：从客户机上的捕获到服务器上的处理"></p>
<p>一个正确的堆栈跟踪的例子：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/33ed95114dac482787eb0b9e56cd7acc~tplv-k3u1fbpfcp-zoom-1.image" alt="A fully symbolicated stack trace"></p>
<p>如果 Socorro 不能使用正确的符号文件去提取一个崩溃的堆栈跟踪信息，那么结果就只有地址，这并不是很有帮助：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6e3d6edc54e54911b80eb549bc9d5512~tplv-k3u1fbpfcp-zoom-1.image" alt="A stack trace showing raw addresses instead of symbols"></p>
<p>当涉及到 Linux 时，情况就与其他平台不同：我们的大部分的用户安装的不是我们的构建文件，而是他们喜欢的发行版打包的 Firefox 版本。</p>
<p>这将导致一个严重的问题，当处理 Firefox 在 Linux 上的稳定性问题时：对于大量的崩溃报告，我们都无法产生高质量的堆栈跟踪，因为提交报告的 Firefox 构建并不是我们创建的，所以我们缺少必需的符号文件。更糟糕的是， Firefox 依赖于大量的第三方程序包(比如 GTK, Mesa, FFmpeg, SQLite 等等)。如果一个崩溃没有发生在 Firefox 而是任何一个第三方程序包中，我们也拿不到正确的堆栈跟踪，因为我们没有它们的符号文件。</p>
<p>为了处理这个问题，我们开始收集 Firefox 构建的调试信息，以及从多个发行版的程序包仓库收集其依赖的调试信息：Arch, Debian, Fedora, OpenSUSE and Ubuntu。由于每个发行版都有点不同，我们必须写一些特别针对发行版的脚本，这些脚本将通过其仓库中的程序包列表找到相关的调试信息。(<a href="https://github.com/gabrielesvelto/symbol-scrapers/">这里</a>提供脚本)。然后，这些数据将注入一个从调试信息中提取符号文件并上传到我们的符号服务器的工具。</p>
<p>用那些有效的调试信息，我们就能分析研究 99% 以上的来自 Linux 用户的崩溃报告，否则这一比例将小于 20%。下面是一个从发行版本的 Firefox 提取的高质量跟踪的例子。我们还没有创建过任何相关的库，但函数名称、被影响的代码的文件和行号都是存在的。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3f249d5a04344737a84a3e4c38a07565~tplv-k3u1fbpfcp-zoom-1.image" alt="A fully symbolicated stack trace including external code"></p>
<p>这里有一个重点不能被低估：Linux 用户大多对技术更有洞察力并且更有可能帮助我们解决问题，所以所有的这些报告都是可以提升稳定性的宝藏，甚至对其他操作系统(包括 Windows, Mac, Android 等等)都如此。实际上，我们经常在 Linux 中首先发现 <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1633459">Fission bugs</a>。</p>
<p>检测 Linux 崩溃，这个新能力的的第一影响是极大的加速了我们对 Linux 特定问题的反应时间，并且使我们能够在正式版中用户遇到问题之前，就能在 Firefox 的 Nightly 和 Beta 版本中识别到。</p>
<p>在前沿组件中我们也能快速识别问题，就像 <a href="https://github.com/servo/webrender">WebRender</a>, <a href="https://hacks.mozilla.org/2020/04/experimental-webgpu-in-firefox/">WebGPU</a>, <a href="https://fedoraproject.org/wiki/Changes/Firefox_Wayland_By_Default_On_Gnome">Wayland</a> 和 VA-API 视频加速；通常能在因改变而引发问题后的几天里提供解决方案。</p>
<p>我们并没有止步于此：我们现在可以识别发行版的特殊问题并且回归。这允许我们通知程序包维护者并且使问题能快速得到解决。举个例子，我们能在两周之内识别且立即解决 Debian 的特殊问题。这是由于 Debian 对 Firefox 的其中一个依赖做了修改，这会在启动时导致崩溃，如果你比较好奇其中的细节，可以在 bug <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1679430">1679430</a> 归档中查看。</p>
<p>另一个还不错的例子来自 Fedora：在 Firefox 构建中，他们一直使用他们自己的崩溃报告系统 (ABRT) 来捕获崩溃，但是考虑到我们这边的改善<a href="https://src.fedoraproject.org/rpms/firefox/c/de27f20acc7bdf391ccb1b571a9cb2061fc2dc3c?branch=master">他们开始发送 Firefox 崩溃给我们</a>。</p>
<p>我们也可以在我们的依赖中识别退化和问题。这使我们能够与上游沟通问题，并且有时候甚至能贡献修复方案，使我们两方的用户都能受益。</p>
<p>举个例子，在某个时刻，Debian 更新了字体配置包，通过反向移植一个关于内存泄漏的上游修复。然而，这个修复包含一个 bug， <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1633467">会导致 Firefox 崩溃</a>，可能也会使其他软件崩溃。在 Debian 源码应用了这个修改后，仅仅 6 天我们就发现了这个新的崩溃问题，并且仅仅几周内这个问题便在上游和 Debian 里修复了。我们也发送了报告和修复方案给其他项目：<a href="https://gitlab.freedesktop.org/mesa/mesa/-/issues/3066">Mesa</a>, GTK, <a href="https://gitlab.gnome.org/GNOME/glib/-/issues/954">glib</a>, <a href="https://github.com/LudovicRousseau/PCSC/issues/51">PCSC</a>, SQLite 等等。</p>
<p>Firefox 的 Nightly 版本也包含一个工具用于检测安全敏感问题的：<a href="https://groups.google.com/g/mozilla.dev.platform/c/AyECjDNsqUE/m/Jd7Jr4cXAgAJ">概率性堆检查器</a>。这个工具随机填补一些内存分配，用来检测缓冲区溢出和释放后使用的途径，当检测到其中一个时，它会给我们发送一个非常详细的崩溃报告。考虑到 Firefox 有庞大的用户群体使用 Linux，这使我们能在上游项目中发现和报告一些复杂的问题。</p>
<p>我们为了崩溃分析而使用这个工具，也暴露了一些关于这个工具的限制，所以我们决定使用 Rust 重写，大量的依赖了由 Sentry 开发的优秀的 crates。相比原来的工具，重写的新工具的速度要快得多，使用少量的内存并且产生的结果更为精确。这是互利的：我们为他们的 crates （以及依赖）贡献了改善建议，而他们延伸了自己的 API 来处理我们的新的使用案例以及修复我们发现的问题。</p>
<p>这项工作的另一个令人愉快的副作用是 Thunderbird 现在也从我们为 Firefox 做的提升中受益。</p>
<p>这会持续展示在 FOSS 项目之间的协作不止有利于他们的用户，而且最终会提升整个生态系统以及更广泛的依赖于此的团体。<br>特别感谢 Calixte Denizet, Nicholas Nethercote, Jan Auer 以及其他对此有贡献的人！</p>
<blockquote>
<p>如果发现译文存在错误或其他需要改进的地方，欢迎到 <a href="https://github.com/xitu/gold-miner">掘金翻译计划</a> 对译文进行修改并 PR，也可获得相应奖励积分。文章开头的 <strong>本文永久链接</strong> 即为本文在 GitHub 上的 MarkDown 链接。</p>
</blockquote>
<hr>
<blockquote>
<p><a href="https://github.com/xitu/gold-miner">掘金翻译计划</a> 是一个翻译优质互联网技术文章的社区，文章来源为 <a href="https://juejin.im/">掘金</a> 上的英文分享文章。内容覆盖 <a href="https://github.com/xitu/gold-miner#android">Android</a>、<a href="https://github.com/xitu/gold-miner#ios">iOS</a>、<a href="https://github.com/xitu/gold-miner#%E5%89%8D%E7%AB%AF">前端</a>、<a href="https://github.com/xitu/gold-miner#%E5%90%8E%E7%AB%AF">后端</a>、<a href="https://github.com/xitu/gold-miner#%E5%8C%BA%E5%9D%97%E9%93%BE">区块链</a>、<a href="https://github.com/xitu/gold-miner#%E4%BA%A7%E5%93%81">产品</a>、<a href="https://github.com/xitu/gold-miner#%E8%AE%BE%E8%AE%A1">设计</a>、<a href="https://github.com/xitu/gold-miner#%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD">人工智能</a>等领域，想要查看更多优质译文请持续关注 <a href="https://github.com/xitu/gold-miner">掘金翻译计划</a>、<a href="http://weibo.com/juejinfanyi">官方微博</a>、<a href="https://zhuanlan.zhihu.com/juejinfanyi">知乎专栏</a>。</p>
</blockquote>
]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
      <tags>
        <tag>translation</tag>
      </tags>
  </entry>
  <entry>
    <title>(译)可视化 JavaScript 引擎</title>
    <url>/2021/08/06/translation-javascript-visualized-the-javascript-engine/</url>
    <content><![CDATA[<blockquote>
<ul>
<li>原文地址：<a href="https://javascript.plainenglish.io/javascript-visualized-the-javascript-engine-1e3fc5d5310d">JavaScript Visualized: The JavaScript Engine</a></li>
<li>原文作者：<a href="https://medium.com/@harsh-patel">Harsh Patel</a></li>
<li>译文出自：<a href="https://github.com/xitu/gold-miner">掘金翻译计划</a></li>
<li>本文永久链接：<a href="https://github.com/xitu/gold-miner/blob/master/article/2021/javascript-visualized-the-javascript-engine.md">https://github.com/xitu/gold-miner/blob/master/article/2021/javascript-visualized-the-javascript-engine.md</a></li>
<li>译者：<a href="https://github.com/Tong-H">tong-h</a></li>
<li>校对者：<a href="https://github.com/KimYangOfCat">KimYangOfCat</a> <a href="https://github.com/Usualminds">Usualminds</a></li>
</ul>
</blockquote>
<h1 id="可视化-JavaScript-引擎"><a href="#可视化-JavaScript-引擎" class="headerlink" title="可视化 JavaScript 引擎"></a>可视化 JavaScript 引擎</h1><p><img src="https://cdn-images-1.medium.com/max/2000/0*XIjsf6eB35MwgNCg.png"></p>
<p>作为 JavaScript 开发人员，我们通常不需要亲自与编译器打交道。但知晓 JavaScript 引擎的基础知识，以及了解它是如何处理我们各自不同的 JS 代码并将其转化为机器能理解的东西，也是很好的！🥳</p>
<blockquote>
<p><strong>注意：</strong> 这篇文章主要基于 Node.js 和以 Chromium 为基础的浏览器使用的 V8 引擎。</p>
</blockquote>
<hr>
<p>HTML 解析器在你的代码中寻找 <code>script</code> 标签以及其对应的来源，并从其来源加载程序或代码。它可能来自 <strong>网络</strong>，<strong>临时存储</strong>，或者其它<strong>service worker</strong>。然后以<strong>字节流</strong>的格式响应，稍后该字节流将被字节流解码器接管！主要是<strong>字节流解码器</strong>会解码到来的流数据。</p>
<p><img src="https://cdn-images-1.medium.com/max/2000/1*cOoWhcaQqt7YIefpVMjTYw.gif"></p>
<hr>
<p>字节流解码器根据已解码的的字节流创建 token。比如，<code>0066</code> 解码为 <code>f</code>，<code>0075</code> 变<code> u</code>，<code>006e</code> 变 <code>n</code>，<code>0063</code> 变 <code>c</code>，<code>0074</code> 变 <code>t</code>，<code>0069</code> 变 <code>i</code>，<code>006f</code> 变 <code>o</code>，006e<code>变为</code>n` 和一个空格。看上去好像是你写了 function！这在 JavaScript 中是一个保留关键字，一个 token 被创建并发送给解析器（以及预解析器，这并没有涵盖在动图里但稍后会解释）。其余字节流的处理也一样。</p>
<p><img src="https://cdn-images-1.medium.com/max/2000/1*Eb2a3HrsWCQogSpEW9gHjA.gif"></p>
<hr>
<p>引擎使用两个解析器：预解析器（pre-parser）和解析器（parser）。为了减少网站加载花费的时间，引擎会尽量避免去解析不会被立即使用的代码。预解析器处理可能稍后会用到的代码，而解析器处理马上需要使用的代码。如果一个函数只会在用户点击按钮后被调用，那么没有必要一定要在网站加载时编译它。如果最终用户点击了按钮且需要这段代码，那么它会被发送给解析器。</p>
<p>解析器根据从字节流解码器处接收的 token 来创建节点，并用这些节点来创建一个抽象语法树（AST）。🌳</p>
<p><img src="https://cdn-images-1.medium.com/max/2000/1*r4CyGfK7TWvm1sFl1jaOWQ.gif"></p>
<hr>
<p>下一步，解释器出场！解释器遍历 AST 并根据 AST 所包含的信息来生成字节码。一旦字节码生成完毕，AST 就会被删除从而清空内存空间。最后，我们就拥有了机器可以使用的东西。🎉</p>
<p><img src="https://cdn-images-1.medium.com/max/2000/1*5WJid_AePzCASZ0NTLZv-w.gif"></p>
<hr>
<p>尽管字节码很快，但它还可以更快。字节码运行时会生成一些信息。它可以检测到某些行为是否经常发生以及被使用的数据类型。可能某个函数你调用了几十次，那么是时候做优化了，使其运行速度更快。🏃🏽‍♀️</p>
<p>字节码以及产生的类型反馈会一起发送给优化编译器。优化编译器接收字节码和类型反馈，并从中生成高度优化后的机器码。🚀</p>
<p><img src="https://cdn-images-1.medium.com/max/2000/1*xJ3kFQ776JaMquxron2-gQ.gif"></p>
<hr>
<p>JavaScript 是动态类型的语言，这代表数据类型可以不断改变。如果 JavaScript 引擎每次都需要检查某个值的数据类型，这会导致其运行速度非常缓慢。</p>
<p>为了减少代码解释的时间，优化后的机器码只处理引擎在运行字节码时之前见过的情况。如果我们重复使用某段代码，该代码一遍又一遍的返回相同的数据类型，那么为了加快运行速度，就可以简单的再次使用优化后的机器码。然而，JavaScript 是动态类型，相同的代码可能会突然返回一个不同的数据类型。如果发生了这种情况，机器码性能会退化，引擎会退回到解释已产生的字节码的步骤。</p>
<p>如果某块代码被调用 100 次，而且到目前为止返回相同的值。那么引擎会假设，当你第 101 次调用的时候依然返回该值。</p>
<p>比如说我们有一个如下所示的求和函数，目前为止该函数每一次调用都会带有数字类型的参数。</p>
<p><img src="https://cdn-images-1.medium.com/max/2000/1*2VZ1b9rX099PDz_wDtwJSw.png"></p>
<p>该函数会返回数字 3！当我们再次调用时，引擎会假定我们依然携带两个数字类型的参数。</p>
<p>如果这是真的，那么就不需要动态检查，引擎可以再次使用优化后的机器码。反之，如果该假设不正确，那么引擎会退回到使用原来的字节码而不是优化的机器码。</p>
<p>比如下一次调用它时我们传递的是字符串而不是数字。因为 JavaScript 是动态类型语言，我们可以这样做而且不会引发报错。</p>
<p><img src="https://cdn-images-1.medium.com/max/2000/1*7IlQ3bxyDA7cdl4Gn1lbCA.png"></p>
<p>这意味着数字 <code>2</code> 将会强制转为字符串，而该函数将会返回字符串 <code>&quot;12&quot;</code>。引擎将回退去解释字节码以及更新类型反馈。</p>
<hr>
<p>我希望这篇文章对你有帮助！😊 当然，还有很多有关引擎的知识点在这篇文章内我没有介绍（JS 堆，调用栈等等），这些我可能稍后会涵盖。如果你对 Javascript 内部运作感兴趣，我非常鼓励开始自己做一些研究，V8 是开源的，而且有一些很棒的文档是关于它如何在后台工作的。🤖</p>
<p>感谢阅读，祝你有美好的一天！❤</p>
<blockquote>
<p>如果发现译文存在错误或其他需要改进的地方，欢迎到 <a href="https://github.com/xitu/gold-miner">掘金翻译计划</a> 对译文进行修改并 PR，也可获得相应奖励积分。文章开头的 <strong>本文永久链接</strong> 即为本文在 GitHub 上的 MarkDown 链接。</p>
</blockquote>
<hr>
<blockquote>
<p><a href="https://github.com/xitu/gold-miner">掘金翻译计划</a> 是一个翻译优质互联网技术文章的社区，文章来源为 <a href="https://juejin.im/">掘金</a> 上的英文分享文章。内容覆盖 <a href="https://github.com/xitu/gold-miner#android">Android</a>、<a href="https://github.com/xitu/gold-miner#ios">iOS</a>、<a href="https://github.com/xitu/gold-miner#%E5%89%8D%E7%AB%AF">前端</a>、<a href="https://github.com/xitu/gold-miner#%E5%90%8E%E7%AB%AF">后端</a>、<a href="https://github.com/xitu/gold-miner#%E5%8C%BA%E5%9D%97%E9%93%BE">区块链</a>、<a href="https://github.com/xitu/gold-miner#%E4%BA%A7%E5%93%81">产品</a>、<a href="https://github.com/xitu/gold-miner#%E8%AE%BE%E8%AE%A1">设计</a>、<a href="https://github.com/xitu/gold-miner#%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD">人工智能</a>等领域，想要查看更多优质译文请持续关注 <a href="https://github.com/xitu/gold-miner">掘金翻译计划</a>、<a href="http://weibo.com/juejinfanyi">官方微博</a>、<a href="https://zhuanlan.zhihu.com/juejinfanyi">知乎专栏</a>。</p>
</blockquote>
]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
      <tags>
        <tag>translation</tag>
      </tags>
  </entry>
  <entry>
    <title>(译)使用 PeerJS 轻松实现 P2P 通信</title>
    <url>/2021/08/17/translation-simplified-peer-to-peer-communication-with-peerjs/</url>
    <content><![CDATA[<blockquote>
<ul>
<li>原文地址：<a href="https://blog.bitsrc.io/simplified-peer-to-peer-communication-with-peerjs-e37244267723">Simplified Peer to Peer Communication with PeerJS</a></li>
<li>原文作者：<a href="https://medium.com/@dulanka">Dulanka Karunasena</a></li>
<li>译文出自：<a href="https://github.com/xitu/gold-miner">掘金翻译计划</a></li>
<li>本文永久链接：<a href="https://github.com/xitu/gold-miner/blob/master/article/2021/simplified-peer-to-peer-communication-with-peerjs.md">https://github.com/xitu/gold-miner/blob/master/article/2021/simplified-peer-to-peer-communication-with-peerjs.md</a></li>
<li>译者：<a href="https://github.com/Tong-H">tong-h</a></li>
<li>校对者：<a href="https://github.com/jaredliw">jaredliw</a>，<a href="https://github.com/CarlosChenN">CarlosChenN</a></li>
</ul>
</blockquote>
<h1 id="使用-PeerJS-轻松实现-P2P-通信"><a href="#使用-PeerJS-轻松实现-P2P-通信" class="headerlink" title="使用 PeerJS 轻松实现 P2P 通信"></a>使用 PeerJS 轻松实现 P2P 通信</h1><p><img src="https://cdn-images-1.medium.com/max/5760/1*-Rh8z0kzvXKz_BbONP60Yw.jpeg"></p>
<p>实现 P2P 通信是一项具有挑战性的任务，但如果你知道如何使用正确的工具，那么这项任务就变得简单多了。</p>
<p>所以，我将在这篇文章探讨 <a href="https://peerjs.com/">PeerJS</a>，这是一个封装了 WebRTC 的 JavaScript 库，可以在 web 应用中更加轻松的实现 P2P 通信。</p>
<h2 id="PeerJS-是如何简化-WebRTC-的？"><a href="#PeerJS-是如何简化-WebRTC-的？" class="headerlink" title="PeerJS 是如何简化 WebRTC 的？"></a>PeerJS 是如何简化 WebRTC 的？</h2><p>当在 web 应用中涉及到实时 P2P 通信时，WebRTC 是许多开发者的使用标准。但它也自带了一些复杂性：</p>
<ul>
<li>如果你使用纯 WebRTC，首先你要定义一个 STUN（Session Traversal Utilities for NAT）服务为通讯中涉及到的每一个节点生成 ICE（Interactive Connectivity Establishment）协议候选者。</li>
<li>然后你需要将这些 ICE 协议候选者的详情存储在你的服务中。</li>
<li>最后，你需要使用 WebSockets 来处理实时更新。</li>
</ul>
<p>即使你之前没有接触过 WebRTC，我相信你也已经感受到了实现它的复杂性。但别担心，PeerJS 来解救你了。</p>
<blockquote>
<p>有了 PeerJS，我们不用担心 STUN，ICE 协议候选者，或者服务器的创建，而且我们甚至可以避免使用 WebSockets。</p>
</blockquote>
<p>PeerJS 提供一个完整的、可配置的点对点连接的 API， 以及一个称之为 PeerServer 的服务，使得我们能够轻松的在 PeerJS 的客户端之间建立连接。</p>
<p>那么就来看看我们如何使用 PeerJS 来创建一个简单的聊天应用。</p>
<h2 id="使用-PeerJS-和-React-搭建你的第一个聊天室"><a href="#使用-PeerJS-和-React-搭建你的第一个聊天室" class="headerlink" title="使用 PeerJS 和 React 搭建你的第一个聊天室"></a>使用 PeerJS 和 React 搭建你的第一个聊天室</h2><h3 id="步骤-1-——-安装-PeerJS"><a href="#步骤-1-——-安装-PeerJS" class="headerlink" title="步骤 1 —— 安装 PeerJS"></a>步骤 1 —— 安装 PeerJS</h3><p>首先，我们需要将 PeerJS 作为一个 node module 安装在你的项目中，并将 <a href="https://www.npmjs.com/package/peer">peer</a> 作为全局依赖。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 安装 PeerJS</span><br><span class="line">npm i peerjs</span><br><span class="line"></span><br><span class="line">// 安装 Peer</span><br><span class="line">npm i -g peer</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>注意</strong>：PeerJS 用于在本地启动 PeerServer，但你也可以使用 <a href="https://peerjs.com/peerserver.html">PeerServer Cloud</a> 实例。</p>
</blockquote>
<h3 id="步骤-2-——-实现聊天室"><a href="#步骤-2-——-实现聊天室" class="headerlink" title="步骤 2 —— 实现聊天室"></a>步骤 2 —— 实现聊天室</h3><p>现在，让我们移至 React 应用，先初始化聊天组件的 state。</p>
<p>我们将在 state 内处理我们自己的 ID，目标节点 ID，聊天信息，以及一个 Peer 对象的实例。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">state = &#123;</span><br><span class="line">  <span class="attr">myId</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">friendId</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">peer</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">message</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">messages</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们需要通过定义主机名，端口号以及路径来创建一个 Peer 实例用于管理我们的 P2P 连接。在整个通信过程中我们都将使用该实例。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> peer = <span class="keyword">new</span> Peer(<span class="string">&#x27;&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">host</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">  <span class="attr">port</span>: <span class="string">&#x27;3001&#x27;</span>,</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>提示：</strong>你可以使用你自己的 ID 作为第一个参数，或者不传参，让 PeerServer 生成一个随机 ID。如果你使用 <code>const peer = new Peer();</code>，你将连接到 PeerServer Cloud。</p>
</blockquote>
<p>Peer 实例有几个方法去处理 peer 之间的通信。<code>peer.on</code> 是用于监听节点的事件，当接收远程节点的通话时该方法很有用。</p>
<p><code>open</code> 事件将会在成功连接 PeerServer 后发出，我们将通过该事件去更新 myId 和 peer 实例的 state。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">peer.on(<span class="string">&#x27;open&#x27;</span>, <span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.setState(&#123;</span><br><span class="line">    <span class="attr">myId</span>: id,</span><br><span class="line">    <span class="attr">peer</span>: peer</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>然后，我们需要通过 <code>connection</code> 事件来监听远程节点连接，并通过其回调函数获取远程节点发送的消息。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">peer.on(<span class="string">&#x27;connection&#x27;</span>, <span class="function">(<span class="params">conn</span>) =&gt;</span> &#123;</span><br><span class="line">  conn.on(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">        <span class="attr">messages</span>: [...this.state.messages, data]</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">   &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>现在我们已经实现了消息接收的功能。那么在最后一步，让我们创建一个方法用于消息发送。</p>
<p><code>peer.connect</code> 方法使我们可以通过指定远程节点 id 来连接该节点。然后它将返回一个 <code>DataConnection</code> 对象用于向节点发送消息。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">send = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> conn = <span class="built_in">this</span>.state.peer.connect(<span class="built_in">this</span>.state.friendId);</span><br><span class="line"></span><br><span class="line">  conn.on(<span class="string">&#x27;open&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> msgObj = &#123;</span><br><span class="line">      <span class="attr">sender</span>: <span class="built_in">this</span>.state.myId,</span><br><span class="line">      <span class="attr">message</span>: <span class="built_in">this</span>.state.message</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">   conn.send(msgObj);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      <span class="attr">messages</span>: [...this.state.messages, msgObj],</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="步骤-3-——-实现视频聊天"><a href="#步骤-3-——-实现视频聊天" class="headerlink" title="步骤 3 —— 实现视频聊天"></a>步骤 3 —— 实现视频聊天</h3><p>现在，让我们修改聊天室用于发送视频消息。该功能的的实现与之前我们讨论过的步骤非常相似。我们可以通过 <code>peer.on</code> 方法监听 <code>call</code> 事件从而获知来自远程节点的来电。该监听事件提供一个携带 <code>MediaConnection</code> 对象的回调函数，而接受者的视频流和音频流将提供给 <code>MediaConnection</code> 对象的 <code>answer</code> 方法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">peer.on(<span class="string">&#x27;call&#x27;</span>, <span class="function">(<span class="params">call</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;</span><br><span class="line"></span><br><span class="line">getUserMedia(&#123; <span class="attr">video</span>: <span class="literal">true</span>, <span class="attr">audio</span>: <span class="literal">true</span> &#125;, <span class="function">(<span class="params">stream</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">this</span>.myVideo.srcObject = stream;</span><br><span class="line">  <span class="built_in">this</span>.myVideo.play();</span><br><span class="line">  </span><br><span class="line">  call.answer(stream);</span><br><span class="line"></span><br><span class="line">  call.on(<span class="string">&#x27;stream&#x27;</span>, <span class="function">(<span class="params">remoteStream</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.friendVideo.srcObject = remoteStream;</span><br><span class="line">    <span class="built_in">this</span>.friendVideo.play();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">&#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">&#x27;Error!&#x27;</span>) &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>现在，让我们从我们的端口向远程节点发送一个视频通话。这个方法与来电响应类似。我们需要调用最初的 <code>peer</code> 实例上的 <code>call</code> 方法并且将提供节点 ID 和视频流作为其参数。</p>
<p><code>call</code> 方法将由此返回一个 <code>MediaConnection</code> 对象，我们可以通过该对象使用节点的视频流。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">videoCall = <span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;</span><br><span class="line"></span><br><span class="line">getUserMedia(&#123; <span class="attr">video</span>: <span class="literal">true</span>, <span class="attr">audio</span>: <span class="literal">true</span> &#125;, <span class="function">(<span class="params">stream</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">this</span>.myVideo.srcObject = stream;</span><br><span class="line">  <span class="built_in">this</span>.myVideo.play();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> call = <span class="built_in">this</span>.state.peer.call(<span class="built_in">this</span>.state.friendId, stream);</span><br><span class="line"></span><br><span class="line">  call.on(<span class="string">&#x27;stream&#x27;</span>, <span class="function">(<span class="params">remoteStream</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.friendVideo.srcObject = remoteStream;</span><br><span class="line">    <span class="built_in">this</span>.friendVideo.play();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">&#x27;Error!&#x27;</span>) &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="步骤-4-——-最后的事项"><a href="#步骤-4-——-最后的事项" class="headerlink" title="步骤 4 —— 最后的事项"></a>步骤 4 —— 最后的事项</h3><p>终于到时候添加一些 JSX 来渲染我们的聊天室了。让我们添加两个输入框用于输入节点 ID 以及聊天信息。我们将使用 <code>ref</code> 属性来操作 <code>video</code> 元素。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> (</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;col&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>My ID: &#123;this.state.myId&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>Friend ID:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">     <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">     <span class="attr">value</span>=<span class="string">&#123;this.state.friendId&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">     <span class="attr">onChange</span>=<span class="string">&#123;e</span> =&gt;</span> &#123; this.setState(&#123; friendId: e.target.value &#125;);&#125;&#125; /&gt;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>Message:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">     <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">     <span class="attr">value</span>=<span class="string">&#123;this.state.message&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">     <span class="attr">onChange</span>=<span class="string">&#123;e</span> =&gt;</span> &#123; this.setState(&#123; message: e.target.value &#125;); &#125;&#125; /&gt;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.send&#125;</span>&gt;</span>Send<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.videoCall&#125;</span>&gt;</span>Video Call<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    &#123;</span></span><br><span class="line"><span class="xml">      this.state.messages.map((message, i) =&gt; &#123;</span></span><br><span class="line"><span class="xml">        return (</span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&#123;i&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;message.sender&#125;:<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;message.message&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        )</span></span><br><span class="line"><span class="xml">      &#125;);</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;col&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">video</span> <span class="attr">ref</span>=<span class="string">&#123;ref</span> =&gt;</span> this.myVideo = ref&#125; /&gt;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">video</span> <span class="attr">ref</span>=<span class="string">&#123;ref</span> =&gt;</span> this.friendVideo = ref&#125; /&gt;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br></pre></td></tr></table></figure>

<p>就这样！现在，一个快速视频聊天已经全部设置好了。最后的成果看起来像这样，你可以在我的 GitHub <a href="https://github.com/Dulanka-K/video-chat">仓库</a>找到完整的代码。</p>
<p><img src="https://cdn-images-1.medium.com/max/3840/1*G48OkV0QlFvETj2zqDuqIw.gif"></p>
<p><img src="https://cdn-images-1.medium.com/max/2000/1*0epo9iaN7-wx39_FkRTBCw.gif"></p>
<blockquote>
<p><strong>注意</strong>：在不是 HTTPS 连接的情况下，一些浏览器（尤其是手机浏览器）可能不允许使用相机和麦克风。你可以参考这篇<a href="https://blog.bitsrc.io/using-https-for-local-development-for-react-angular-and-node-fdfaf69693cd">文章</a>，通过几个步骤设置一个本地 HTTPS 连接。</p>
</blockquote>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>WebRTC 是支持 P2P 通信的浏览器标准。但是因为牵涉到 STUN 服务器，ICE 协议候选者，SDPs，以及 WebSockets，所以实现 WebRTC 会有一点复杂。</p>
<p>PeerJS 通过封装 WebRTC 简化了整个流程，为我们提供了更简单的事件和方法。</p>
<p>所以，我邀请你尝试使用 PeerJS，并在评论区中让我知道你的观点。</p>
<p>感谢阅读！！！</p>
<blockquote>
<p>如果发现译文存在错误或其他需要改进的地方，欢迎到 <a href="https://github.com/xitu/gold-miner">掘金翻译计划</a> 对译文进行修改并 PR，也可获得相应奖励积分。文章开头的 <strong>本文永久链接</strong> 即为本文在 GitHub 上的 MarkDown 链接。</p>
</blockquote>
<hr>
<blockquote>
<p><a href="https://github.com/xitu/gold-miner">掘金翻译计划</a> 是一个翻译优质互联网技术文章的社区，文章来源为 <a href="https://juejin.im/">掘金</a> 上的英文分享文章。内容覆盖 <a href="https://github.com/xitu/gold-miner#android">Android</a>、<a href="https://github.com/xitu/gold-miner#ios">iOS</a>、<a href="https://github.com/xitu/gold-miner#%E5%89%8D%E7%AB%AF">前端</a>、<a href="https://github.com/xitu/gold-miner#%E5%90%8E%E7%AB%AF">后端</a>、<a href="https://github.com/xitu/gold-miner#%E5%8C%BA%E5%9D%97%E9%93%BE">区块链</a>、<a href="https://github.com/xitu/gold-miner#%E4%BA%A7%E5%93%81">产品</a>、<a href="https://github.com/xitu/gold-miner#%E8%AE%BE%E8%AE%A1">设计</a>、<a href="https://github.com/xitu/gold-miner#%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD">人工智能</a>等领域，想要查看更多优质译文请持续关注 <a href="https://github.com/xitu/gold-miner">掘金翻译计划</a>、<a href="http://weibo.com/juejinfanyi">官方微博</a>、<a href="https://zhuanlan.zhihu.com/juejinfanyi">知乎专栏</a>。</p>
</blockquote>
]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
      <tags>
        <tag>translation</tag>
      </tags>
  </entry>
  <entry>
    <title>(译)使用 TypeScript 时你会想念的 Python 特性</title>
    <url>/2021/09/13/translation-python-features-that-you-will-miss-in-typescript/</url>
    <content><![CDATA[<blockquote>
<ul>
<li>原文地址：<a href="https://levelup.gitconnected.com/python-features-that-you-will-miss-in-typescript-78ecc440b8bc">Python features that you will miss in TypeScript</a></li>
<li>原文作者：<a href="https://medium.com/@lucas_sonnabend">Lucas Sonnabend</a></li>
<li>译文出自：<a href="https://github.com/xitu/gold-miner">掘金翻译计划</a></li>
<li>本文永久链接：<a href="https://github.com/xitu/gold-miner/blob/master/article/2021/python-features-that-you-will-miss-in-typescript.md">https://github.com/xitu/gold-miner/blob/master/article/2021/python-features-that-you-will-miss-in-typescript.md</a></li>
<li>译者：<a href="https://github.com/Tong-H">tong-h</a></li>
<li>校对者：<a href="https://github.com/nia3y">nia3y</a> <a href="https://github.com/greycodee">greycodee</a></li>
</ul>
</blockquote>
<h1 id="使用-TypeScript-时你会想念的-Python-特性"><a href="#使用-TypeScript-时你会想念的-Python-特性" class="headerlink" title="使用 TypeScript 时你会想念的 Python 特性"></a>使用 TypeScript 时你会想念的 Python 特性</h1><p><img src="https://cdn-images-1.medium.com/max/6758/0*G6G1IweBv411ufK9" alt="图片来自 [Alex Chumak](https://unsplash.com/@ralexnder?utm_source=medium&amp;utm_medium=referral) 发布于 [Unsplash](https://unsplash.com?utm_source=medium&amp;utm_medium=referral)"></p>
<p>最近我把主要使用的后端语言从 Python 和 Django 切换到了 Node.js 和 TypeScript。在经过一段初始学习期后，我可以说我很享受这次切换。了解不同的语言和框架如何处理相似的问题总是很有趣。当你理解它们方法之间的一致或差异时，你也会对编程本身有更好的理解。</p>
<p>TypeScript/JavaScript 和 Python 在很多地方都很相似。它们都</p>
<ul>
<li>… 包含现代语法</li>
<li>… 最好作为一个单线程应用</li>
<li>… 一开始是动态语言，而后添加静态类型检查</li>
<li>… 拥有一个庞大生态圈，包含大量模块/包</li>
<li>… 支持使用 promises 和 async/await 异步编程</li>
<li>… 很频繁地发布新版本（对于一种语言而言）</li>
</ul>
<p>当然它们在语言上也存在一些差异，有时候需要拉开距离才能完全体会到 Python 及其生态圈所提供的特性。虽然总体来说我很喜欢使用 TypeScript 编码，但有时候我会遇到一些问题，而这些问题我知道在  Python 中可以很优雅的解决。大部分时候 TypeScript/JavaScript 都能提供一个类似且优雅的解决方案，但有时候我发现自己运气不好，最终我知道有些情况用 Python 会简单很多。这里是一个特性列表，当你使用 Python 时你会认为是理所当然，但如果编码时没有它们你会想念的：上下文管理器（Context managers），对类型的一阶支持（first-order support for types），数据库框架（database frameworks），单元测试框架（pytest fixtures），以及字典生成器（dictionary generators）。</p>
<h2 id="上下文管理器"><a href="#上下文管理器" class="headerlink" title="上下文管理器"></a>上下文管理器</h2><p>Python 中的上下文管理器有很多用例，比如打开和关闭文件，用锁保护你的代码，或者通过 set-up 和 tear-down 来自定义资源管理。当我写我们的后端时我真的开始想念它们，而我们需要数据库事务（database transactions）。在 Python 中，这个可以完美解决。实际上，有很多库比如 <a href="https://docs.djangoproject.com/en/3.2/topics/db/transactions/">django</a>，都提供上下文管理器来解决这个。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在你的代码中</span></span><br><span class="line"><span class="keyword">with</span> db_client.transaction():</span><br><span class="line">    db_client.query(<span class="string">&quot;UPDATE ...&quot;</span>)</span><br><span class="line">    <span class="comment"># ....</span></span><br><span class="line">    db_client.query(<span class="string">&quot;UPDATE ...&quot;</span>)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 在你的数据库客户端代码中</span></span><br><span class="line"><span class="keyword">from</span> contextlib <span class="keyword">import</span> contextmanager</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DBClient</span>:</span></span><br><span class="line">    <span class="comment"># ....</span></span><br><span class="line"><span class="meta">    @contextmanager</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">transaction</span>(<span class="params">*args, **kwds</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        self.connection.query(<span class="string">&quot;BEGIN&quot;</span>)</span><br><span class="line">        <span class="keyword">yield</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        self.connection.query(<span class="string">&quot;ROLLBACK&quot;</span>)</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line">    self.connection.query(<span class="string">&quot;COMMIT&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>在 TypeScript 中，我们使用 <a href="https://node-postgres.com/features/transactions">node-postgres</a>，最接近于 Python 的上下文管理器的解决方案，涉及回调函数。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 在你的代码中</span></span><br><span class="line"><span class="keyword">await</span> transaction(dbClient, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    dbClient.query(<span class="string">&quot;UPDATE ...&quot;</span>);</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    dbClient.query(<span class="string">&quot;UPDATE ...&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在你的数据库客户端代码中</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> transaction = <span class="keyword">async</span> (</span><br><span class="line">    dbClient: DBClient,</span><br><span class="line">    <span class="attr">callback</span>: <span class="keyword">async</span> () =&gt; <span class="built_in">Promise</span>&lt;<span class="built_in">void</span>&gt;,</span><br><span class="line">): <span class="built_in">Promise</span>&lt;<span class="built_in">void</span>&gt; =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> dbClient.query(<span class="string">&quot;BEGIN&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">await</span> callback();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="keyword">await</span> dbClient.query(<span class="string">&quot;ROLLBACK&quot;</span>);</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">await</span> dbClient.query(<span class="string">&quot;COMMIT&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>虽然这并不是最糟糕的实现，但并不如 Python 干净简洁。如果你曾见识过在 async/await 出现之前 JavaScript 的<a href="https://www.geeksforgeeks.org/what-is-callback-hell-in-node-js/">回调地狱</a>, 那这可能会引发你的 PTSD（创伤后应激障碍）。库不提供这个接口，所以你需要自己实现，或者最终在事务中使用大量的 try/catch。这些导致 bug 的错误我至少犯过一次，但幸运的是我在它发生在生产环境前发现了。</p>
<h2 id="对类型的一阶支持"><a href="#对类型的一阶支持" class="headerlink" title="对类型的一阶支持"></a>对类型的一阶支持</h2><p>在 Python 中，我通常使用一个 <code>dataclass</code> 来定义消息的模型（schema）；在 TypeScript 中，我会声明一个 <code>type</code>。在 Python 运行时，我依然可以去检查 <code>dataclass</code> 类及其字段类型。而在 TypeScript 中无法这样做，因为所有的类型信息都会在编译为 JavaScript 时丢失。</p>
<p>现在这个特性真正有用的地方是哪里呢？我非常喜欢基于属性的测试及生成测试用例以求更好的覆盖范围，对此 Python 有一个非常棒的测试框架 <a href="https://hypothesis.works/">hypothesis</a>。它可以从带有类型注解的 <code>dataclass</code> 生成测试策略，而这些策略将会生成测试用例。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@dataclass(<span class="params">frozen=<span class="literal">True</span></span>)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddUserEvent</span>:</span></span><br><span class="line">    firstName: <span class="built_in">str</span></span><br><span class="line">    lastName: <span class="built_in">str</span></span><br><span class="line">    dateOfBirth: date</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 假设策略可以从 dataclass 的类型注解中推断出字段及其类型</span></span><br><span class="line">dataclass 的类型注释</span><br><span class="line"><span class="meta">@given(<span class="params">st.builds(<span class="params">AddUserEvent</span>)</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_deserialise_is_inverse_of_serialise</span>(<span class="params">addUserEvent</span>):</span></span><br><span class="line">    <span class="keyword">assert</span> addUserEvent == deserialise(serialise(addUserEvent))</span><br></pre></td></tr></table></figure>

<p>Typescript/Javascript 有自己的框架 <a href="https://github.com/dubzzz/fast-check">fast-check</a>，在很多部分与 hypothesis 非常相似。但它无法生成测试策略。你必须在类型以及测试策略中重复对象的模型（schema）。类型的每个改变都必须在测试策略中重复。这还没有结束，如果有一个你忘了更新，编译器就会提醒你。这依然恼人，而且代码复用率并不高。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> AddUserEvent = &#123;</span><br><span class="line">  <span class="attr">firstName</span>: <span class="built_in">string</span>;</span><br><span class="line">  lastName: <span class="built_in">string</span>;</span><br><span class="line">  dateOfBirth: <span class="built_in">Date</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arbitraryAddUser: fc.Arbitrary&lt;AddUserEvent&gt; = fc.record(&#123;</span><br><span class="line">  <span class="attr">firstName</span>: fc.string(),</span><br><span class="line">  <span class="attr">lastName</span>: fc.string(),</span><br><span class="line">  <span class="attr">dateOfBirth</span>: fc.date(),</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">test(<span class="string">&quot;deserialise is inverse of serialise&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  fc.assert(</span><br><span class="line">    fc.property(arbitraryAddUser, <span class="function">(<span class="params">addUser</span>) =&gt;</span> &#123;</span><br><span class="line">      expect(deserialise(serialise(addUser))).toEqual(addUser);</span><br><span class="line">    &#125;),</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="数据库框架"><a href="#数据库框架" class="headerlink" title="数据库框架"></a>数据库框架</h2><p>关于封装数据库的库，我必须得说多一点。我主要寻找有关 SQL 数据库的库，特别是 PostgreSQL。通常一个简单的 SQL 数据对于一个项目来说已经足够了。Python 有一些非常成熟的方案 <a href="https://www.sqlalchemy.org/">SQLAlchemy</a> 或者 Django 的 ORM。TypeScript/JavaScript 也并不差，最流行的是 TypeORM。这些库能够对数据库模型进行增量改进，称之为<a href="https://martinfowler.com/articles/evodb.html">渐进式数据库设计（evolutionary database design）</a>。（一个更实用的 <a href="https://benchling.engineering/move-fast-and-migrate-things-how-we-automated-migrations-in-postgres-d60aba0fc3d4">SQLAlchemy 例子</a>，以及 <a href="https://betterprogramming.pub/typeorm-migrations-explained-fdb4f27cb1b3">TypeORM 的例子</a>）。尽管两种语言都有成熟的方案，但我依然遇到过这样的情况，Python 解决方案在我的 Django 项目中展现的特性比我在 JavaScript 中见过的更丰富。</p>
<p>经过一两年积极的开发后，你会创建很多的迁移。我曾在一个 Django 项目中工作过，某些时候，我确信迁移过程中添加的大部分字段和表在以后迁移时要么被修改要么被删。而实际上 Django 提供了一个解决方案 <a href="https://docs.djangoproject.com/en/3.2/topics/migrations/#squashing-migrations">squash migrations（压缩迁移）</a>，用以保持较低的迁移数量。你只能压缩那些已应用于所有产品环境的迁移，所以压缩更多是为了保持整洁的代码基础而做的清理，也使得从零开始开发和测试数据库更容易。我还没有见过 TypeScript/JavaScript 有类似的包，甚至尝试去压缩迁移的包，如果没有防护措施，我不会去尝试。</p>
<h2 id="Pytest-fixtures"><a href="#Pytest-fixtures" class="headerlink" title="Pytest fixtures"></a>Pytest fixtures</h2><p>在我写测试时，我尽量减少每个测试所需的初始化 set-up（初始化）和 tear-down（拆毁）的数量，但有时却是必须的，而有时你想在测试之间分享 set-up。对此，我首选 <a href="https://docs.pytest.org/en/6.2.x/fixture.html">Pytest fixtures</a>，它使你 set-up 以及 tear-down 对象，既是用于单个测试，又可以跨模块共享，甚至运用于所有的测试中。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.fixture()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mock_client</span>():</span></span><br><span class="line">    <span class="comment"># set-up</span></span><br><span class="line">    client = mockClient()</span><br><span class="line">    <span class="keyword">yield</span> client</span><br><span class="line">    <span class="comment"># 潜在的 tear-down</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_with_client</span>(<span class="params">mock_client</span>):</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    mock_client.send(<span class="string">&quot;test payload&quot;</span>)</span><br><span class="line">    <span class="comment"># ...</span></span><br></pre></td></tr></table></figure>

<p>当然，JavaScript 也有办法运行 set-up 和 tear-down。在 jest 中，<a href="https://jestjs.io/docs/api#beforeallfn-timeout">beforeAll</a>/<a href="https://jestjs.io/docs/api#beforeeachfn-timeout">beforeEach</a> 和 set-up/tear-down 几乎是一样的，只有一个例外：无法从 fixture（测试前准备、测试后清理的固定代码，即上面提到的 set-up/tear-down）传递对象到测试用例！通常的做法是在测试用例以及 set-up/tear-down 函数之间分享变量。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">describe(<span class="string">&quot;Database access function&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> mockDBClient = <span class="literal">null</span>;</span><br><span class="line">  beforeEach(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="comment">// set-up</span></span><br><span class="line">    mockDBClient = <span class="keyword">await</span> setupTestingDB();</span><br><span class="line">  &#125;);</span><br><span class="line">  afterEach(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="comment">// tear-down</span></span><br><span class="line">    <span class="keyword">await</span> mockDBClient.teardown();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&quot;can create a new user&quot;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> newUser = <span class="keyword">await</span> createUser(mockDBClient, &#123; <span class="attr">name</span>: <span class="string">&quot;Paul&quot;</span> &#125;);</span><br><span class="line">    expect(newUser).toBeDefined();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>这是普遍的做法，但依然有点恼人。一旦你有几个测试共享相同的 set-up/tear-down 代码，那它们都会访问相同的全局对象和变量。这是我的警铃开始响起的地方。测试之间应该是彼此独立的，不应该有任何共享的状态。因为 set-up 运行于每个测试之前，所以它们实际上并不共享相同的对象。很遗憾的是不能恰当的表现在代码中。</p>
<p>TypeScript/JavaScript 还有其他流行的测试框架，比如 <a href="https://mochajs.org/">Mocha</a>，但据我所知，它们往往提供相同的 <a href="https://mochajs.org/#root-hook-plugins">beforeAll/beforeEach 钩子</a>。</p>
<h2 id="字典生成器"><a href="#字典生成器" class="headerlink" title="字典生成器"></a>字典生成器</h2><p>我经常发现自己在代码中有这个操作：我有一个对象集合，然后我想根据对象的一个字段（通常是它们的 ID）查找他们。对此，Python 有一个非常实用和优雅的语法 generators。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lookup = &#123;elem.<span class="built_in">id</span>: elem <span class="keyword">for</span> elem <span class="keyword">in</span> my_collection&#125;</span><br><span class="line">lookup2 = &#123;</span><br><span class="line">  key_func(elem.<span class="built_in">id</span>): value_func(elem)</span><br><span class="line">  <span class="keyword">for</span> elem <span class="keyword">in</span> my_collection</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 JavaScript，感谢 <a href="https://lodash.com/docs/#keyBy">lodash</a> 模块，你也可以使用很少的代码实现这样的功能。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">&quot;lodash&quot;</span></span><br><span class="line"><span class="keyword">const</span> lookup = _.keyBy(myCollection, <span class="string">&#x27;id&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> lookup2 = _.keyBy(myCollection, keyFunc).mapValues(valueFunc)</span><br></pre></td></tr></table></figure>

<p>就本身而言，两种方法都很干净且快速有效。但相比于 Python 的 generator，lodash 没有给你一个清晰的 <code>key: value</code> 视觉映射，会感觉有一点笨重。当查找变得更复杂时，通过函数修改键值，可读性会下降很多。</p>
<h2 id="这些差异重要吗？"><a href="#这些差异重要吗？" class="headerlink" title="这些差异重要吗？"></a>这些差异重要吗？</h2><p>我抱怨过在边缘情况下 Python 比 TypeScript 更优雅。但总体来说，我依然很享受使用 TypeScript 编码。在某些功能上，TypeScript 比 Python 更好，比如使用 TypeScript 编写精确的类型比我使用 Python 和 MyPy 更容易。</p>
<p><img src="https://cdn-images-1.medium.com/max/6400/0*wnH40qHfyRl6dnbo" alt="图片来自 [Piret Ilver](https://unsplash.com/@saltsup?utm_source=medium&amp;utm_medium=referral) 发布于 [Unsplash](https://unsplash.com?utm_source=medium&amp;utm_medium=referral)"></p>
<p>这些差异重要吗？对我来说无疑是重要的，否则我就不会写这篇文章了。写代码意味着简洁清晰的表达出你想要电脑去做什么。这个着重点应该尽可能的是“做的内容”，而不是“如何”用某种技术完成的。这会使代码更易读、编写及维护，最终减少 bug 数量。在我给出的例子中，Python 做得比 TypeScript 稍微好些。</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>如果我需要重新开始，这是否意味着我将选择 Python 作为后端而不是 TypeScript ？肯定不是。总的来说，这两种语言的相似之处多于差异。而相比起这些差异，其他因素更重要，比如你的团队更擅长哪一个。我的团队需要同时开发前端和后端，而这一事实使得 TypeScript 最适合我们。</p>
<p>如果你在寻找这两种语言之间更综合的比较，那么感谢你仍然阅读这篇文章。Hackernoon 有两篇不错的文章 <a href="https://medium.com/hackernoon/could-pythons-popularity-outperform-javascript-in-the-next-five-years-abed4e307224">这里</a> 和 <a href="https://medium.com/hackernoon/javascript-vs-python-in-2017-d31efbb641b4">这里</a>。</p>
<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><ul>
<li><a href="https://hypothesis.works/">Python hypothesis：基于属性的测试（property-based testing）</a></li>
<li><a href="https://github.com/dubzzz/fast-check">JavaScript fast-check：基于属性的测试（property-based testing</a></li>
<li><a href="https://lodash.com/">JavaScripts lodash：高效的列表及对象操作</a></li>
</ul>
<ul>
<li><a href="https://docs.pytest.org/en/6.2.x/fixture.html">pytest fixtures</a></li>
</ul>
<ul>
<li><a href="https://jestjs.io/">jest JavaScript 测试框架</a></li>
<li><a href="https://martinfowler.com/articles/evodb.html">渐进式数据库设计</a></li>
<li><a href="https://benchling.engineering/move-fast-and-migrate-things-how-we-automated-migrations-in-postgres-d60aba0fc3d4">使用 SQAlchemy 渐进式数据库设计的案例</a></li>
<li><a href="https://betterprogramming.pub/typeorm-migrations-explained-fdb4f27cb1b3">使用 TypeORM 渐进式数据库设计的案例</a></li>
<li><a href="https://docs.djangoproject.com/en/3.2/topics/migrations/#squashing-migrations">Django 的 squashing migrations </a></li>
<li><a href="https://medium.com/hackernoon/could-pythons-popularity-outperform-javascript-in-the-next-five-years-abed4e307224">Python vs JavaScript 文章 #1</a></li>
<li><a href="https://medium.com/hackernoon/javascript-vs-python-in-2017-d31efbb641b4">Python vs JavaScript 文章 #2</a></li>
</ul>
<blockquote>
<p>如果发现译文存在错误或其他需要改进的地方，欢迎到 <a href="https://github.com/xitu/gold-miner">掘金翻译计划</a> 对译文进行修改并 PR，也可获得相应奖励积分。文章开头的 <strong>本文永久链接</strong> 即为本文在 GitHub 上的 MarkDown 链接。</p>
</blockquote>
<hr>
<blockquote>
<p><a href="https://github.com/xitu/gold-miner">掘金翻译计划</a> 是一个翻译优质互联网技术文章的社区，文章来源为 <a href="https://juejin.im/">掘金</a> 上的英文分享文章。内容覆盖 <a href="https://github.com/xitu/gold-miner#android">Android</a>、<a href="https://github.com/xitu/gold-miner#ios">iOS</a>、<a href="https://github.com/xitu/gold-miner#%E5%89%8D%E7%AB%AF">前端</a>、<a href="https://github.com/xitu/gold-miner#%E5%90%8E%E7%AB%AF">后端</a>、<a href="https://github.com/xitu/gold-miner#%E5%8C%BA%E5%9D%97%E9%93%BE">区块链</a>、<a href="https://github.com/xitu/gold-miner#%E4%BA%A7%E5%93%81">产品</a>、<a href="https://github.com/xitu/gold-miner#%E8%AE%BE%E8%AE%A1">设计</a>、<a href="https://github.com/xitu/gold-miner#%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD">人工智能</a>等领域，想要查看更多优质译文请持续关注 <a href="https://github.com/xitu/gold-miner">掘金翻译计划</a>、<a href="http://weibo.com/juejinfanyi">官方微博</a>、<a href="https://zhuanlan.zhihu.com/juejinfanyi">知乎专栏</a>。</p>
</blockquote>
]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
      <tags>
        <tag>translation</tag>
      </tags>
  </entry>
  <entry>
    <title>(译)用于 JavaScript 应用的前 5 大嵌入式数据库</title>
    <url>/2021/07/13/translation-top-5-embedded-databases-for-javascript-applications/</url>
    <content><![CDATA[<blockquote>
<ul>
<li>原文地址：<a href="https://blog.bitsrc.io/top-5-embedded-databases-for-javascript-applications-1c68496aebac">Top 5 Embedded Databases for JavaScript Applications</a></li>
<li>原文作者：<a href="https://medium.com/@deleteman123">Fernando Doglio</a></li>
<li>译文出自：<a href="https://github.com/xitu/gold-miner">掘金翻译计划</a></li>
<li>本文永久链接：<a href="https://github.com/xitu/gold-miner/blob/master/article/2021/top-5-embedded-databases-for-javascript-applications.md">https://github.com/xitu/gold-miner/blob/master/article/2021/top-5-embedded-databases-for-javascript-applications.md</a></li>
<li>译者：<a href="https://github.com/Tong-H">tong-h</a></li>
<li>校对者：<a href="https://github.com/finalwhy">finalwhy</a> <a href="https://github.com/PassionPenguin">PassionPenguin</a></li>
</ul>
</blockquote>
<h1 id="用于-JavaScript-应用的前-5-大嵌入式数据库"><a href="#用于-JavaScript-应用的前-5-大嵌入式数据库" class="headerlink" title="用于 JavaScript 应用的前 5 大嵌入式数据库"></a>用于 JavaScript 应用的前 5 大嵌入式数据库</h1><p><img src="https://cdn-images-1.medium.com/max/3840/1*pbWGFLeMU5gfUc7jSLvoPA.jpeg" alt="图源 [Pexels](https://pixabay.com/users/pexels-2286921/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=1836594)，出自 [Pixabay](https://pixabay.com/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=1836594)"></p>
<p>我们习惯于将数据库视为一个大型的存储平台，我们把我们需要的所有数据都丢进去，然后再通过使用一些查询语言检索它们。扩展这些数据库，保持信息的一致性以及容错性本身就是一个挑战。那么，当我们数据需求量非常少的时候会发生什么？</p>
<p>当 RedShift、BigQuery 甚至 MySQL 用于我们微量的数据存储需求又显得太重时应该怎么办？其实还有一类合适的应用。事实上，选项有很多，因此本文我将介绍适用于小型数据存储需求的前 5 个嵌入式数据库。</p>
<h2 id="那么究竟什么是嵌入式数据库呢？"><a href="#那么究竟什么是嵌入式数据库呢？" class="headerlink" title="那么究竟什么是嵌入式数据库呢？"></a>那么究竟什么是嵌入式数据库呢？</h2><p>当读到『嵌入式』这个词时，90% 的人都会联想到我在谈论 IOT 或者移动设备，但并不是的。</p>
<p>至少这不是唯一的情况。诚然，这些系统的资源非常受限，使得大部分传统的数据库系统难以在其上配置和安装。</p>
<p>但还有另一些小型数据库的用例，即将它们作为软件产品的一部分嵌入其中。例如，想象一下通过 IDE 在大型代码存储库中进行搜索的场景。IDE 可以嵌入一个倒排索引数据库，该数据库允许你按关键字搜索，然后得到相关文件的快捷引用。或者在你最喜欢的邮件桌面客户端进行搜索时，该客户端很可能也有一个嵌入式数据库。所有的邮件都被存储且编入了索引，这样你可以简单快速地得到你想要的信息。</p>
<p>另一个使用嵌入式数据库的巨大好处是它并不需要网络通信来交互，相比于其它各类标准的数据库，这是一个巨大的性能提升。通常在一般的开发中，你可能会将你的数据库放在你自己的服务器（或者服务器集群）上，这样它的资源消耗就不会影响到你架构中的其他组件，而对嵌入式数据库，你可能希望它们能尽可能地靠近客户端。这可以减少它们之间的通信延迟以及避免了对通信渠道的依赖(即网络)。</p>
<p>现在嵌入式数据库有多种形式。从使用 JSON 文件作为主要存储的快速内存数据库，到可以使用类似 SQL 语言查询的高效的小型关系型数据库，</p>
<p>让我们先看看这五个选择。</p>
<h2 id="LowDB"><a href="#LowDB" class="headerlink" title="LowDB"></a>LowDB</h2><p>让我们从简单的开始，<a href="https://github.com/typicode/lowdb">LowDB</a> 是一个小型内存数据库，是非常基础的解决方案，但能解决非常简单的用例：在一个基于 JavaScript 的项目中对于存储以及使用类似 JSON 结构（即文档）的需要。</p>
<p>LowDB 主要好处之一是它旨在 JavaScript 中使用，这意味着它可以用在后端、桌面端或者其它可以跑浏览器代码的地方。</p>
<p>你可以用在 Node.js 中使用 LowDB，也可以集成到 Electron 项目中去开发桌面客户端，当然它也能直接在已集成 JS 运行环境的浏览器中运行.</p>
<p>LowDB 提供的 API 也非常简单和轻量，并且没有提供任何开箱即用的搜索功能。它仅限于将 JSON 文件的数据加载到一个数组变量中，然后让你自己（用户）去找你想要的数据。</p>
<p>看看下面这个实例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; LowSync, JSONFileSync &#125; <span class="keyword">from</span> <span class="string">&#x27;lowdb&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> title = <span class="string">&quot;This is a test&quot;</span></span><br><span class="line"><span class="keyword">const</span> adapter = <span class="keyword">new</span> JSONFileSync(<span class="string">&#x27;file.json&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> db = <span class="keyword">new</span> LowSync(adapter)</span><br><span class="line"></span><br><span class="line">db.read()  <span class="comment">//将 JSON 文件内容读取到内存中</span></span><br><span class="line">db.data ||= &#123; <span class="attr">posts</span>: [] &#125; <span class="comment">//默认值</span></span><br><span class="line"></span><br><span class="line">db.data.posts.push(&#123; title &#125;) <span class="comment">// 数据添加</span></span><br><span class="line"></span><br><span class="line">db.write() <span class="comment">// 将数据保存到 JSON 文件中</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 任何类似查找的操作都靠用户自己发挥</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> record = db.data.posts.find( <span class="function"><span class="params">p</span> =&gt;</span> p.title == <span class="string">&quot;Hello world&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!record) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;No data found!&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;== Record found ==&quot;</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(record)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如你如见，有趣的并不是默认行为而是我在使用一个叫做 <code>JSONFileSync</code> 的接口。我可以轻松创建一个实例然后去使用，这才是这个数据库真正的强点，</p>
<p>LowDB 具有高度的扩展性并且兼容 TypeScript，后者为了数据存储提供了一种类似模式的行为（即不允许你添加不符合预设模式的数据）。</p>
<p>如果你混合这两种选项，LowDB 提供了一些有趣的基于 Promise 的 API 用于操作本地的类 JSON 数据。</p>
<h2 id="LevelDB"><a href="#LevelDB" class="headerlink" title="LevelDB"></a>LevelDB</h2><p><a href="https://github.com/google/leveldb">LevelDB</a> 是由 Google 创建的一个键值对的开源数据库。它是一种超快但非常有限的键值存储方案，其中的数据按键排序存储，开箱即用。</p>
<p>它只有三种基础的操作： Put，Get 以及 Delete —— 非常轻量的 API，这与 LowDB 很相似。</p>
<p>与 LowDB 更像的是，LevelDB 被封装成没有客户端-服务端，这表示任何语言都无法与它通信。要使用它必须使用 C/C++ 的库，如果你想要类似服务端那样的操作行为，需要你自己去封装它。</p>
<p>就如本文中介绍的大多数情况一样，LevelDB 功能非常基础，因为它只覆盖一个非常简单但实用的需求：靠近代码的数据存储，以及快速访问。</p>
<p>数据库的存储架构是围绕于 Log-structured Merge Tree（LSM），这表示最优的使用方法是用于大型连续性而非小型随机的书写操作。</p>
<p>LevelDB 主要的一个限制是，一旦启动，它就会获得一个系统级的锁，这意味着同一时间只能有一个进程可以与其交互。当然，你可以在一个进程内部使用多线程来并行化某些操作。但也仅限于此。</p>
<p>有趣的是，LevelDB 被 <a href="https://blog.openreplay.com/getting-started-with-indexeddb-for-big-data-storage">Chrome 的 IndexedDB</a> 作为后端数据库使用，显然 Minecraft Bedrock 版使用它作为某些块和实体数据存储（尽管它们使用的是 Google 实现的<a href="https://minecraft.fandom.com/wiki/Bedrock_Edition_level_format">轻微修改后的版本</a>）。</p>
<h2 id="Raima-Database-Manager"><a href="#Raima-Database-Manager" class="headerlink" title="Raima Database Manager"></a>Raima Database Manager</h2><p>我有提到过物联网（IoT）不是吗？<a href="https://raima.com/">Raima</a> 是最快的数据库管理器之一，并且对于在系统资源受限的 IoT 设备上运行做了特别优化。</p>
<p>我说的资源受限的环境指的是什么？Raima 运行只需要 RAM 350kb，这样我可以最简化资源使用。</p>
<p>这个方案有别于前面几个方案的最主要特点是，它完全支持 SQL。它提供关系型数据模型并且允许使用 SQL 语言查询。</p>
<p>与 LevelDB 不同，它允许通过客户端-服务端的架构多进程访问数据库（即相比其他的数据库，它允许你的数据库离源代码稍微更远一点）。如果你决定做一个贴近源代码的嵌入式应用，你也可以使用多线程并发访问多个数据库。</p>
<p>Raima 的灵活性使你可以从传统的客户端-服务端模式转到最有效的（当然也是受限的）单个客户端使用单个内存数据库的用例。但这不正是嵌入式数据库的一个非常有效的用例吗？。</p>
<p><img src="https://cdn-images-1.medium.com/max/3166/1*Wri490chKY--YYgiIkLUsA.png" alt="图片出自 [Raima 网站](https://raima.com/architecture/)"></p>
<p>它的灵活性使它成为一个非常通用的解决方案。当然，每一种部署模式都有自己的好处和限制，但也会有最适合的特殊用例。所以请确保你选择了最适合自己的，然后将其发挥出最大的价值。</p>
<h2 id="Apache-Derby"><a href="#Apache-Derby" class="headerlink" title="Apache Derby"></a>Apache Derby</h2><p>如果你在寻找另一个小型的，类似 SQL 的数据库，<a href="http://db.apache.org/derby/">Apache Derby</a> 很可能就是你想要的。</p>
<p>Derby 完全是用 JAVA 写的，它声称只占用 3.5MB 内存，这可能有点不太贴合实际。毕竟，不在主系统安装 JVM，你无法运行或使用它。</p>
<p>但是，如果你的使用案例里有 JVM，那很棒，你可以继续考虑使用 Derby，不然你可能需要更原生的解决方案比如 LevelDb 或者 Raima。</p>
<p>但像我说的，如果你已经在做一个 JAVA 项目，且需要集成一个小型可靠且基于 SQL 的数据库，那 Derby 绝对是一个潜在的候选选项。</p>
<p>它集成了 JDBC 驱动器，所以不需要额外的依赖。它既能以嵌入式的模式在你的 JAVA 应用中工作，也可以作为一个独立的服务器与多个应用同时互动（与 Raima 做的类似，但是没有那么多的变量），</p>
<p>老实说，这个项目最大的缺点是它的文档。这可能是 JAVA 社区的一个标准，但对用户并不友好，而且大部分官方链接都指向一个私有的合并页面。其他的解决方案，大部分的都有流畅的文档体验，这有助于用户适应产品。</p>
<h2 id="solidDB"><a href="#solidDB" class="headerlink" title="solidDB"></a>solidDB</h2><p>最后一个，但绝对相当重要的一个，solidDB 覆盖一个非常有趣的案例，在提供一个内存关系型数据库的同时也可以提升模型的持续性。口气不小，它声称自己可以保持两种数据存储选项的实时同步。</p>
<p>本质上和前面几个一样，solidDB 能通过 ODBC 或 JDBC 使用，使 JAVA 或者 C 的应用可以通过 SQL 与之交互。</p>
<p>和前面几个一样，可以通过几种方式部署：</p>
<ul>
<li><strong>高度可用模式</strong>。这涉及到拥有重复数据的多个服务器。当然，这个模式并不太符合我们考虑的用例。</li>
<li><strong>共享内存访问</strong>。这个非常有趣，因为它并不只将数据存储在内存中(比如前面几个)还允许多个应用使用这个内存（<strong>共享内存</strong>部分）。当然，只有在相同节点内的应用才可以直接使用共享内存，但是，来自外部节点的基于 JDBC/ODBC 的也可以访问相同的数据。将共享内存转变为有外部访问权限的内存数据库。</li>
</ul>
<p>多个大型公司，比如 Cisco，Alcatel，Nokia，或者 Siemens 都声称在关键任务操作时使用这个数据库，因为其快如闪电般的数据访问速度。</p>
<p>考虑到它的所有部署方案，广泛的文档以及高要求的客户列表，我认为它是本文中最可靠的，稳定以及快速的嵌入式数据库之一。</p>
<hr>
<p>嵌入式数据库旨在处理非常特殊的使用场景，要么是通过提供最低延时的可靠快速的数据存储，要么是快速安全的数据访问。这里列出的解决方案通过不同的方法来实现这些目标，哪一个适合你这取决于你和你的环境。</p>
<p>你曾经有尝试过这些解决方案中的任何一个吗？你的项目中曾有过嵌入式数据库的需要吗？你选的是哪一个呢？</p>
<blockquote>
<p>如果发现译文存在错误或其它需要改进的地方，欢迎到 <a href="https://github.com/xitu/gold-miner">掘金翻译计划</a> 对译文进行修改并 PR，也可获得相应奖励积分。文章开头的 <strong>本文永久链接</strong> 即为本文在 GitHub 上的 MarkDown 链接。</p>
</blockquote>
<hr>
<blockquote>
<p><a href="https://github.com/xitu/gold-miner">掘金翻译计划</a> 是一个翻译优质互联网技术文章的社区，文章来源为 <a href="https://juejin.im/">掘金</a> 上的英文分享文章。内容覆盖 <a href="https://github.com/xitu/gold-miner#android">Android</a>、<a href="https://github.com/xitu/gold-miner#ios">iOS</a>、<a href="https://github.com/xitu/gold-miner#%E5%89%8D%E7%AB%AF">前端</a>、<a href="https://github.com/xitu/gold-miner#%E5%90%8E%E7%AB%AF">后端</a>、<a href="https://github.com/xitu/gold-miner#%E5%8C%BA%E5%9D%97%E9%93%BE">区块链</a>、<a href="https://github.com/xitu/gold-miner#%E4%BA%A7%E5%93%81">产品</a>、<a href="https://github.com/xitu/gold-miner#%E8%AE%BE%E8%AE%A1">设计</a>、<a href="https://github.com/xitu/gold-miner#%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD">人工智能</a>等领域，想要查看更多优质译文请持续关注 <a href="https://github.com/xitu/gold-miner">掘金翻译计划</a>、<a href="http://weibo.com/juejinfanyi">官方微博</a>、<a href="https://zhuanlan.zhihu.com/juejinfanyi">知乎专栏</a>。</p>
</blockquote>
]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
      <tags>
        <tag>translation</tag>
      </tags>
  </entry>
  <entry>
    <title>(译)双向绑定会使你的 React 代码更棒</title>
    <url>/2022/01/27/translation-two-way-binding-will-make-your-react-code-better.md/</url>
    <content><![CDATA[<blockquote>
<ul>
<li>原文地址：<a href="https://medium.com/front-end-weekly/two-way-binding-will-make-your-react-code-better-f58865923538">Two-way binding will make your React code better</a></li>
<li>原文作者：<a href="https://medium.com/@lahmataja-pa4vara">Mikhail Boutylin</a></li>
<li>译文出自：<a href="https://github.com/xitu/gold-miner">掘金翻译计划</a></li>
<li>本文永久链接：<a href="https://github.com/xitu/gold-miner/blob/master/article/2022/two-way-binding-will-make-your-react-code-better.md">https://github.com/xitu/gold-miner/blob/master/article/2022/.md</a></li>
<li>译者：<a href="https://github.com/Tong-H">tong-h</a></li>
<li>校对者：<a href="https://github.com/nia3y">nia3y</a></li>
</ul>
</blockquote>
<h1 id="双向绑定会使你的-React-代码更棒"><a href="#双向绑定会使你的-React-代码更棒" class="headerlink" title="双向绑定会使你的 React 代码更棒"></a>双向绑定会使你的 React 代码更棒</h1><p><img src="https://miro.medium.com/max/1400/1*qAhyHG_kc614Tm-dkgVbZg.jpeg"></p>
<p>双向绑定可以让两个实体间保持同步，比如：应用程序的数据层和视图层。React 提供了开箱即用的单向绑定的 api，开箱即用。当我们想要修改 state 时，我们需要显式的调用更新回调：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> UserName = <span class="function">(<span class="params">&#123; name, onChange &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;onChange&#125;</span> <span class="attr">value</span>=<span class="string">&#123;name&#125;</span> /&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> App = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">	<span class="keyword">const</span> [user, setUser] = useState(&#123; <span class="attr">name</span>: <span class="string">&quot;&quot;</span> &#125;)</span><br><span class="line">	<span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">UserName</span> <span class="attr">name</span>=<span class="string">&#123;user.name&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span> setUser(&#123; name: e.target.value &#125;)&#125; /&gt;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这为子元素的更新提供了渠道。当根节点的 state 更新后，变更会传播给子元素。这使得应用数据流变得明确清晰且可预测，但增加了代码量。<br>为了使双向绑定与 React 的更新哲学相匹配，我创建了 <code>mlyn</code> 库 。主要的范式在于每一部分 state 都是可读写的。当你写入 state 时，这个修改将会冒泡上升至根 state，并导致其更新：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 末尾符号 $ 代表该值是可监控的</span></span><br><span class="line"><span class="keyword">const</span> UserName = <span class="function">(<span class="params">&#123; name$ &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Mlyn.Input</span> <span class="attr">bindValue</span>=<span class="string">&#123;name$&#125;</span> /&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> App = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">	<span class="keyword">const</span> user$ = useSubject(&#123; <span class="attr">name</span>: <span class="string">&quot;&quot;</span> &#125;)</span><br><span class="line">	<span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">UserName</span> <span class="attr">name</span>$=<span class="string">&#123;user$.name&#125;</span> /&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>就这样，引擎会用与上述普通 React 示例一样的方法去更新 state。</p>
<p><img src="https://miro.medium.com/max/1400/1*SMBgiqvVPFNu42bMUDUJ6w.png"></p>
<p>双向绑定并不局限于与 UI 交互，你可以轻松地将你的值与 localStorage 绑定。你有一个 hook，可以接收 mlyn state 的 一部分，以及目标 localStorage 的 key：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> useSyncronize = <span class="function">(<span class="params">subject$, key</span>) =&gt;</span> &#123;</span><br><span class="line">	useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">		<span class="comment">// 如果 state 存在，即为其写入</span></span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">localStorage</span>[key]) &#123;</span><br><span class="line">			subject$(<span class="built_in">JSON</span>.parse(localstorage[key]))</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;, [])</span><br><span class="line">	useMlynEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">		<span class="comment">// state 更新，即更新 localStorage</span></span><br><span class="line">		<span class="built_in">localStorage</span>[key] = JSoN.stringify(subject$())</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在你可以轻松地绑定用户名称到 localStorage：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">useSyncronize(user$.name, <span class="string">&quot;userName&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>注意，你不需要创建或传递任何回调函数用于更新值，它就会生效。<br>另一个使用案例是当你想要使 state 的修改可撤销或可重写时，你只需要将该 state 再一次传递给正确的历史管理 hook。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> history = useHistory(state$.name);</span><br></pre></td></tr></table></figure>

<p><code>history</code> 对象包含一个 api <code>jumpTo</code> 可以跳转至 state 的任何阶段，但这是一个带有一点自定义的双向绑定。只要 state 被更新，新的快照就会被推入到 history 中：</p>
<p><img src="https://miro.medium.com/max/1400/1*GhiJOFZ096s0132YjIIm_A.jpeg"></p>
<p>当你选中一个历史状态，该状态将会重写回 state：</p>
<p><img src="https://miro.medium.com/max/1400/1*6TQ_Iwan_oX8Zdqcm9QOuA.jpeg"></p>
<p>再次注意，我们没有因为 state 的更新而去写一个自定义样板，只是把历史快照串联起来而已。看看这个 TodoMVC 应用的历史记录管理 <a href="https://codesandbox.io/s/react-mlyn-todo-mvc-with-history-lr34k?file=/src/App.js:1514-1555">code sandbox</a>：</p>
<p><img src="https://miro.medium.com/freeze/max/60/1*kkac5rgo0BbEfB-8VfFDrg.gif?q=20"></p>
<p><img src="https://miro.medium.com/max/1400/1*kkac5rgo0BbEfB-8VfFDrg.gif"></p>
<p>关于更多双向绑定以及 <code>mlyn</code> 的例子，请访问 <a href="https://github.com/vaukalak/react-mlyn">react-mlyn</a>。</p>
<blockquote>
<p>如果发现译文存在错误或其他需要改进的地方，欢迎到 <a href="https://github.com/xitu/gold-miner">掘金翻译计划</a> 对译文进行修改并 PR，也可获得相应奖励积分。文章开头的 <strong>本文永久链接</strong> 即为本文在 GitHub 上的 MarkDown 链接。</p>
</blockquote>
<hr>
<blockquote>
<p><a href="https://github.com/xitu/gold-miner">掘金翻译计划</a> 是一个翻译优质互联网技术文章的社区，文章来源为 <a href="https://juejin.im/">掘金</a> 上的英文分享文章。内容覆盖 <a href="https://github.com/xitu/gold-miner#android">Android</a>、<a href="https://github.com/xitu/gold-miner#ios">iOS</a>、<a href="https://github.com/xitu/gold-miner#%E5%89%8D%E7%AB%AF">前端</a>、<a href="https://github.com/xitu/gold-miner#%E5%90%8E%E7%AB%AF">后端</a>、<a href="https://github.com/xitu/gold-miner#%E5%8C%BA%E5%9D%97%E9%93%BE">区块链</a>、<a href="https://github.com/xitu/gold-miner#%E4%BA%A7%E5%93%81">产品</a>、<a href="https://github.com/xitu/gold-miner#%E8%AE%BE%E8%AE%A1">设计</a>、<a href="https://github.com/xitu/gold-miner#%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD">人工智能</a>等领域，想要查看更多优质译文请持续关注 <a href="https://github.com/xitu/gold-miner">掘金翻译计划</a>、<a href="http://weibo.com/juejinfanyi">官方微博</a>、<a href="https://zhuanlan.zhihu.com/juejinfanyi">知乎专栏</a>。</p>
</blockquote>
]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
      <tags>
        <tag>translation</tag>
      </tags>
  </entry>
  <entry>
    <title>(译)使用 Stream 构建高性能的 Node.js 应用</title>
    <url>/2022/03/25/translation-use-streams-to-build-high-performing-nodejs-applications%20copy/</url>
    <content><![CDATA[<blockquote>
<ul>
<li>原文地址：<a href="https://blog.appsignal.com/2022/02/02/use-streams-to-build-high-performing-nodejs-applications.html">Use Streams to Build High-Performing Node.js Applications</a></li>
<li>原文作者：<a href="https://blog.appsignal.com/authors/deepal-jayasekara">Deepal Jayasekara</a></li>
<li>译文出自：<a href="https://github.com/xitu/gold-miner">掘金翻译计划</a></li>
<li>本文永久链接：<a href="https://github.com/xitu/gold-miner/blob/master/article/2022/use-streams-to-build-high-performing-nodejs-applications.md">https://github.com/xitu/gold-miner/blob/master/article/2022/use-streams-to-build-high-performing-nodejs-applications.md</a></li>
<li>译者：<a href="https://github.com/Tong-H">tong-h</a></li>
<li>校对者：<a href="https://github.com/CarlosChenN">CarlosChen</a> <a href="https://github.com/zaviertang">zaviertang</a></li>
</ul>
</blockquote>
<h1 id="使用-Stream-构建高性能的-Node-js-应用"><a href="#使用-Stream-构建高性能的-Node-js-应用" class="headerlink" title="使用 Stream 构建高性能的 Node.js 应用"></a>使用 Stream 构建高性能的 Node.js 应用</h1><p>当你在键盘上输入字符，从磁盘读取文件或在网上下载文件时，一股信息流（bits）在流经不同的设备和应用。</p>
<p>如果你学会处理这些字节流，你将能构建高性能且有价值的应用。例如，试想一下当你在 YouTube 观看视频时，你不需要一直等待直到完整的视频下载完。一旦有一个小缓冲，视频就会开始播放，而剩下的会在你观看时继续下载。</p>
<p>Node.js 包含一个内置模块 <code>stream</code> 可以让我们处理流数据。在这篇文章中，我们将通过几个简单的示例来讲解 <code>stream</code> 的用法，我们也会描述在面对复杂案例构建高性能应用时，应该如何构建管道去合并不同的流。</p>
<p>在我们深入理解应用构建前，理解 Node.js <code>stream</code> 模块提供的特性很重要。</p>
<p>让我们开始吧！</p>
<h2 id="Node-js-流的类型"><a href="#Node-js-流的类型" class="headerlink" title="Node.js 流的类型"></a>Node.js 流的类型</h2><p>Node.js <code>stream</code> 提供了四种类型的流</p>
<ul>
<li>可读流（Readable Streams）</li>
<li>可写流（Writable Streams）</li>
<li>双工流（Duplex Streams）</li>
<li>转换流（Transform Streams）</li>
</ul>
<p><a href="https://nodejs.org/api/stream.html#stream_types_of_streams">更多详情请查看 Node.js 官方文档</a></p>
<p>让我们在高层面来看看每一种流类型吧。</p>
<h3 id="可读流"><a href="#可读流" class="headerlink" title="可读流"></a>可读流</h3><p>可读流可以从一个特定的数据源中读取数据，最常见的是从一个文件系统中读取。Node.js 应用中其他常见的可读流用法有：</p>
<ul>
<li><code>process.stdin</code> -通过 <code>stdin</code>  在终端应用中读取用户输入。</li>
<li><code>http.IncomingMessage</code> - 在 HTTP 服务中读取传入的请求内容或者在 HTTP 客户端中读取服务器的 HTTP 响应。</li>
</ul>
<h3 id="可写流"><a href="#可写流" class="headerlink" title="可写流"></a>可写流</h3><p>你可以使用可写流将来自应用的数据写入到特定的地方，比如一个文件。</p>
<p><code>process.stdout</code>  可以用来将数据写成标准输出且被 <code>console.log</code> 内部使用。</p>
<p>接下来是双工流和转换流，可以被定义为基于可读流和可写流的混合流类型。</p>
<h2 id="双工流"><a href="#双工流" class="headerlink" title="双工流"></a>双工流</h2><p>双工流是可读流和可写流的结合，它既可以将数据写入到特定的地方也可以从数据源读取数据。最常见的双工流案例是 <code>net.Socket</code>，它被用来从 socket 读写数据。</p>
<p>有一点很重要，双工流中的可读端和可写端的操作是相互独立的，数据不会从一端流向另一端。</p>
<h3 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h3><p>转换流与双工流略有相似，但在转换流中，可读端和可写端是相关联的。</p>
<p><code>crypto.Cipher</code> 类是一个很好的例子，它实现了加密流。通过 <code>crypto.Cipher</code> 流，应用可以往流的可写端写入纯文本数据并从流的可读端读取加密后的密文。之所以将这种类型的流称之为转换流就是因为其转换性质。</p>
<p><strong>附注</strong>：另一个转换流是 <code>stream.PassThrough</code>。<code>stream.PassThrough</code> 从可写端传递数据到可读端，没有任何转换。这听起来可能有点多余，但 Passthrough 流对构建自定义流以及流管道非常有帮助。（比如创建一个流的数据的多个副本）</p>
<h2 id="从可读的-Node-js-流读取数据"><a href="#从可读的-Node-js-流读取数据" class="headerlink" title="从可读的 Node.js 流读取数据"></a>从可读的 Node.js 流读取数据</h2><p>一旦可读流连接到生产数据的源头，比如一个文件，就可以用几种方法通过该流读取数据。</p>
<p>首先，先创建一个名为 <code>myfile</code>  的简单的 text 文件，85 字节大小，包含以下字符串：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur nec mauris turpis.</span><br></pre></td></tr></table></figure>

<p>现在，我们看下从可读流读取数据的两种不同方式。</p>
<h3 id="1-监听-data-事件"><a href="#1-监听-data-事件" class="headerlink" title="1. 监听 data 事件"></a>1. 监听 <code>data</code> 事件</h3><p>从可读流读取数据的最常见方式是监听流发出的 <code>data</code> 事件。以下代码演示了这种方式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> readable = fs.createReadStream(<span class="string">&#x27;./myfile&#x27;</span>, &#123; <span class="attr">highWaterMark</span>: <span class="number">20</span> &#125;);</span><br><span class="line"></span><br><span class="line">readable.on(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">chunk</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Read <span class="subst">$&#123;chunk.length&#125;</span> bytes\n&quot;<span class="subst">$&#123;chunk.toString()&#125;</span>&quot;\n`</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><code>highWaterMark</code> 属性作为一个选项传递给 <code>fs.createReadStream</code>，用于决定该流中有多少数据缓冲。然后数据被冲到读取机制（在这个案例中，是我们的 <code>data</code> 处理程序）。默认情况下，可读 <code>fs</code> 流的 <code>highWaterMark</code> 值是 64kb。我们刻意重写该值为 20 字节用于触发多个 <code>data</code> 事件。</p>
<p>如果你运行上述程序，它会在五个迭代内从 <code>myfile</code> 中读取 85 个字节。你会在 console 看到以下输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Read 20 bytes</span><br><span class="line">&quot;Lorem ipsum dolor si&quot;</span><br><span class="line"></span><br><span class="line">Read 20 bytes</span><br><span class="line">&quot;t amet, consectetur &quot;</span><br><span class="line"></span><br><span class="line">Read 20 bytes</span><br><span class="line">&quot;adipiscing elit. Cur&quot;</span><br><span class="line"></span><br><span class="line">Read 20 bytes</span><br><span class="line">&quot;abitur nec mauris tu&quot;</span><br><span class="line"></span><br><span class="line">Read 5 bytes</span><br><span class="line">&quot;rpis.&quot;</span><br></pre></td></tr></table></figure>

<h3 id="2-使用异步迭代器"><a href="#2-使用异步迭代器" class="headerlink" title="2. 使用异步迭代器"></a>2. 使用异步迭代器</h3><p>从可读流中读取数据的另一种方法是使用异步迭代器：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> readable = fs.createReadStream(<span class="string">&#x27;./myfile&#x27;</span>, &#123; <span class="attr">highWaterMark</span>: <span class="number">20</span> &#125;);</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">for</span> <span class="keyword">await</span> (<span class="keyword">const</span> chunk <span class="keyword">of</span> readable) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`Read <span class="subst">$&#123;chunk.length&#125;</span> bytes\n&quot;<span class="subst">$&#123;chunk.toString()&#125;</span>&quot;\n`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>

<p>如果你运行这个程序，你会得到和前面例子一样的输出。</p>
<h2 id="可读-Node-js-流的状态"><a href="#可读-Node-js-流的状态" class="headerlink" title="可读 Node.js 流的状态"></a>可读 Node.js 流的状态</h2><p>当一个监听器监听到可读流的 <code>data</code> 事件时，流的状态会切换成”流动”状态（除非该流被显式的暂停了）。你可以通过流对象的 <code>readableFlowing</code>  属性检查流的”流动”状态</p>
<p>我们可以稍微修改下前面的例子，通过 <code>data</code> 处理器来示范：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> readable = fs.createReadStream(<span class="string">&#x27;./myfile&#x27;</span>, &#123; <span class="attr">highWaterMark</span>: <span class="number">20</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bytesRead = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`before attaching &#x27;data&#x27; handler. is flowing: <span class="subst">$&#123;readable.readableFlowing&#125;</span>`</span>);</span><br><span class="line">readable.on(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">chunk</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Read <span class="subst">$&#123;chunk.length&#125;</span> bytes`</span>);</span><br><span class="line">    bytesRead += chunk.length</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在从可读流中读取 60 个字节后停止阅读</span></span><br><span class="line">    <span class="keyword">if</span> (bytesRead === <span class="number">60</span>) &#123;</span><br><span class="line">        readable.pause()</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`after pause() call. is flowing: <span class="subst">$&#123;readable.readableFlowing&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在等待 1 秒后继续读取</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            readable.resume()</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`after resume() call. is flowing: <span class="subst">$&#123;readable.readableFlowing&#125;</span>`</span>);</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`after attaching &#x27;data&#x27; handler. is flowing: <span class="subst">$&#123;readable.readableFlowing&#125;</span>`</span>);</span><br></pre></td></tr></table></figure>

<p>在这个例子中，我们从一个可读流中读取  <code>myfile</code>，但在读取 60 个字节后，我们临时暂停了数据流 1 秒。我们也在不同的时间打印了 <code>readableFlowing</code> 属性的值去理解他是如何变化的。</p>
<p>如果你运行上述程序，你会得到以下输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">before attaching &#x27;data&#x27; handler. is flowing: null</span><br><span class="line">after attaching &#x27;data&#x27; handler. is flowing: true</span><br><span class="line">Read 20 bytes</span><br><span class="line">Read 20 bytes</span><br><span class="line">Read 20 bytes</span><br><span class="line">after pause() call. is flowing: false</span><br><span class="line">after resume() call. is flowing: true</span><br><span class="line">Read 20 bytes</span><br><span class="line">Read 5 bytes</span><br></pre></td></tr></table></figure>

<p>我们可以用以下来解释输出：</p>
<ol>
<li>当我们的程序开始时，<code>readableFlowing</code> 的值是 <code>null</code>，因为我们没有提供任何消耗流的机制。</li>
<li>在连接到 <code>data</code> 处理器后，可读流变为“流动”模式，<code>readableFlowing</code> 变为 <code>true</code>。</li>
<li>一旦读取 60 个字节，通过调用 <code>pause()</code>来暂停流，<code>readableFlowing</code> 也转变为 <code>false</code>。</li>
<li>在等待 1 秒后，通过调用 <code>resume()</code>，流再次切换为“流动”模式，<code>readableFlowing</code> 改为 `true’。然后剩下的文件内容在流中流动。</li>
</ol>
<h2 id="通过-Node-js-流处理大量数据"><a href="#通过-Node-js-流处理大量数据" class="headerlink" title="通过 Node.js 流处理大量数据"></a>通过 Node.js 流处理大量数据</h2><p>因为有流，应用不需要在内存中保留大型的二进制对象：小型的数据块可以接收到就进行处理。</p>
<p>在这部分，让我们组合不同的流来构建一个可以处理大量数据的真实应用。我们会使用一个小型的工具程序来生成一个给定文件的 SHA-256。</p>
<p>但首先，我们需要创建一个大型的 4GB 的假文件来测试。你可以通过一个简单的 shell 命令来完成：</p>
<ul>
<li>On macOS: <code>mkfile -n 4g 4gb_file</code></li>
<li>On Linux: <code>xfs_mkfile 4096m 4gb_file</code></li>
</ul>
<p>在我们创建了假文件 <code>4gb_file</code> 后，让我们在不使用 <code>stream</code> 模块的情况下来生成来文件的 SHA-256 hash。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">&quot;crypto&quot;</span>);</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">&quot;./4gb_file&quot;</span>, <span class="function">(<span class="params">readErr, data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (readErr) <span class="keyword">return</span> <span class="built_in">console</span>.log(readErr)</span><br><span class="line">  <span class="keyword">const</span> hash = crypto.createHash(<span class="string">&quot;sha256&quot;</span>).update(data).digest(<span class="string">&quot;base64&quot;</span>);</span><br><span class="line">  fs.writeFile(<span class="string">&quot;./checksum.txt&quot;</span>, hash, <span class="function">(<span class="params">writeErr</span>) =&gt;</span> &#123;</span><br><span class="line">    writeErr &amp;&amp; <span class="built_in">console</span>.error(err)</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>如果你运行以上代码，你可能会得到以下错误：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RangeError [ERR_FS_FILE_TOO_LARGE]: File size (4294967296) is greater than 2 GB</span><br><span class="line">    at FSReqCallback.readFileAfterStat [as oncomplete] (fs.js:294:11) &#123;</span><br><span class="line">  code: &#x27;ERR_FS_FILE_TOO_LARGE&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上报错之所以发生是因为 JavaScript 运行时无法处理随机的大型缓冲。运行时可以处理的最大尺寸的缓冲取决于你的操作系统结构。你可以通过使用内建的 <code>buffer</code> 模块里的 <a href="https://nodejs.org/api/buffer.html#bufferconstantsmax_length"><code>buffer.constants.MAX_LENGTH</code></a> 变量来查看你操作系统缓存的最大尺寸。</p>
<p>即使上述报错没有发生，在内存中保留大型文件也是有问题的。我们所拥有的可用的物理内存会限制我们应用能使用的内存量。高内存使用率也会造成应用在 CPU 使用方面性能低下，因为垃圾回收会变得昂贵。</p>
<h2 id="使用-pipeline-减少-APP-的内存占用"><a href="#使用-pipeline-减少-APP-的内存占用" class="headerlink" title="使用  pipeline() 减少 APP 的内存占用"></a>使用  <code>pipeline()</code> 减少 APP 的内存占用</h2><p>现在，让我们看看如何修改应用去使用流且避免遇到这个报错：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">&quot;crypto&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; pipeline &#125; = <span class="built_in">require</span>(<span class="string">&quot;stream&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hashStream = crypto.createHash(<span class="string">&quot;sha256&quot;</span>);</span><br><span class="line">hashStream.setEncoding(<span class="string">&#x27;base64&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> inputStream = fs.createReadStream(<span class="string">&quot;./4gb_file&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> outputStream = fs.createWriteStream(<span class="string">&quot;./checksum.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">pipeline(</span><br><span class="line">    inputStream,</span><br><span class="line">    hashStream,</span><br><span class="line">    outputStream,</span><br><span class="line">    <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        err &amp;&amp; <span class="built_in">console</span>.error(err)</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>在这个例子中，我们使用 <code>crypto.createHash</code> 函数提供的流式方法。它返回一个“转换”流对象 <code>hashStream</code>，为随机的大型文件生成 hash。</p>
<p>为了将文件内容传输到这个转换流中，我们使用 <code>fs.createReadStream</code> 为 <code>4gb_file</code> 创建了一个可读流 <code>inputStream</code>。我们将 <code>hashStream</code>  转换流的输出传递到可写流 <code>outputStream</code> 中，而 <code>checksum.txt</code> 通过 <code>fs.createWriteStream</code> 创建的。</p>
<p>如果你运行以上程序，你将看见在 <code>checksum.txt</code> 文件中看见 4GB 文件的 SHA-256 hash。</p>
<h3 id="对流使用-pipeline-和-pipe-的对比"><a href="#对流使用-pipeline-和-pipe-的对比" class="headerlink" title="对流使用 pipeline() 和 pipe() 的对比"></a>对流使用 <code>pipeline()</code> 和 <code>pipe()</code> 的对比</h3><p>在前面的案例中，我们使用 <code>pipeline</code> 函数来连接多个流。另一种常见的方法是使用 <code>.pipe()</code> 函数，如下所示：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">inputStream</span><br><span class="line">  .pipe(hashStream)</span><br><span class="line">  .pipe(outputStream)</span><br></pre></td></tr></table></figure>

<p>但这里有几个原因，所以并不推荐在生产应用中使用 <code>.pipe()</code>。如果其中一个流被关闭或者出现报错，<code>pipe()</code> 不会自动销毁连接的流，这会导致应用内存泄露。同样的，<code>pipe()</code> 不会自动跨流转发错误到一个地方处理。</p>
<p>因为这些问题，所以就有了 <code>pipeline()</code>，所以推荐你使用 <code>pipeline()</code> 而不是 <code>pipe()</code> 来连接不同的流。 我们可以重写上述的 <code>pipe()</code> 例子来使用  <code>pipeline()</code> 函数，如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">pipeline(</span><br><span class="line">    inputStream,</span><br><span class="line">    hashStream,</span><br><span class="line">    outputStream,</span><br><span class="line">    <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        err &amp;&amp; <span class="built_in">console</span>.error(err)</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><code>pipeline()</code> 接受一个回调函数作为最后一个参数。任何来自被连接的流的报错都将触发该回调函数，所以可以很轻松的在一个地方处理报错。</p>
<h2 id="总结：使用-Node-js-流降低内存并提高性能"><a href="#总结：使用-Node-js-流降低内存并提高性能" class="headerlink" title="总结：使用 Node.js 流降低内存并提高性能"></a>总结：使用 Node.js 流降低内存并提高性能</h2><p>在 Node.js 中使用流有助于我们构建可以处理大型数据的高性能应用。</p>
<p>在这篇文章中，我们覆盖了：</p>
<ul>
<li>四种类型的 Node.js 流（可读流、可写流、双工流以及转换流）。</li>
<li>如何通过监听 <code>data</code> 事件或者使用异步迭代器来从可读流中读取数据。</li>
<li>通过使用 <code>pipeline</code> 连接多个流来减少内存占用。</li>
</ul>
<p><strong>一个简短的警告</strong>：你很可能不会遇到太多必须使用流的场景，而基于流的方案会提高你的应用的复杂性。务必确保使用流的好处胜于它所带来的复杂性。</p>
<p>我推荐你去 <a href="https://nodejs.org/api/stream.html#stream">阅读 Node.js <code>stream</code> 的官方文档</a> 学习和探索更多关于流更高级的用例。</p>
<p>快乐的编码吧！</p>
<blockquote>
<p>如果发现译文存在错误或其他需要改进的地方，欢迎到 <a href="https://github.com/xitu/gold-miner">掘金翻译计划</a> 对译文进行修改并 PR，也可获得相应奖励积分。文章开头的 <strong>本文永久链接</strong> 即为本文在 GitHub 上的 MarkDown 链接。</p>
</blockquote>
<hr>
<blockquote>
<p><a href="https://github.com/xitu/gold-miner">掘金翻译计划</a> 是一个翻译优质互联网技术文章的社区，文章来源为 <a href="https://juejin.im/">掘金</a> 上的英文分享文章。内容覆盖 <a href="https://github.com/xitu/gold-miner#android">Android</a>、<a href="https://github.com/xitu/gold-miner#ios">iOS</a>、<a href="https://github.com/xitu/gold-miner#%E5%89%8D%E7%AB%AF">前端</a>、<a href="https://github.com/xitu/gold-miner#%E5%90%8E%E7%AB%AF">后端</a>、<a href="https://github.com/xitu/gold-miner#%E5%8C%BA%E5%9D%97%E9%93%BE">区块链</a>、<a href="https://github.com/xitu/gold-miner#%E4%BA%A7%E5%93%81">产品</a>、<a href="https://github.com/xitu/gold-miner#%E8%AE%BE%E8%AE%A1">设计</a>、<a href="https://github.com/xitu/gold-miner#%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD">人工智能</a>等领域，想要查看更多优质译文请持续关注 <a href="https://github.com/xitu/gold-miner">掘金翻译计划</a>、<a href="http://weibo.com/juejinfanyi">官方微博</a>、<a href="https://zhuanlan.zhihu.com/juejinfanyi">知乎专栏</a>。</p>
</blockquote>
]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
      <tags>
        <tag>translation</tag>
      </tags>
  </entry>
  <entry>
    <title>typescript 学习之基础篇</title>
    <url>/2019/03/25/ts-1/</url>
    <content><![CDATA[<p>vue-cli已经内置了 TypeScript 工具支持，在 Vue  (3.x) 中也计划了相当多的 TypeScript 支持改进，很多大佬以及用过的人也都在推荐入坑，而且目前也比较成熟，资源也很丰富，值得入坑</p>
<h1 id="typescript"><a href="#typescript" class="headerlink" title="? typescript"></a>? typescript</h1><p>官方介绍 TypeScript 是 JavaScript 的类型的超集，它可以编译成纯 JavaScript。编译出来的 JavaScript 可以运行在任何浏览器上<br>我的理解是 TypeScript扩展了JavaScript的语法，为 js 增加了类型机制，引入类，接口，枚举，泛型，方法重载等一系列的概念和方法，丰富了js的使用，而且和 VScode 搭配写起来是真的舒服</p>
<p>全局安装：npm install -g typescript<br>编译命令：tsc hello.ts</p>
<p>TypeScript 编写的文件以 .ts 为后缀，用 TypeScript 编写 React 时，以 .tsx 为后缀<br>在报错的时候终止 js 文件的生成，在 tsconfig.json 中配置 noEmitOnError </p>
<p>忽略下一行代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @ts-ignore</span></span><br><span class="line"><span class="keyword">const</span> scrollbar = <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./ScrollBar/index.ts&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="原始数据类型声明"><a href="#原始数据类型声明" class="headerlink" title="原始数据类型声明"></a>原始数据类型声明</h1><p>原始数据类型包括：布尔值、数值、字符串、null、undefined 以及 ES6 中的新类型 Symbol。<br>在ts中变量声明，变量或者参数都必须要声明其类型</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="built_in">boolean</span></span><br><span class="line"><span class="keyword">let</span> isDone: <span class="built_in">boolean</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">let</span> createdByBoolean: <span class="built_in">boolean</span> = <span class="built_in">Boolean</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">number</span></span><br><span class="line"><span class="keyword">let</span> num: <span class="built_in">number</span> = <span class="number">6</span>; <span class="comment">// 6</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span></span><br><span class="line"><span class="keyword">let</span> <span class="built_in">string</span> = <span class="string">&#x27;string&#x27;</span></span><br><span class="line"><span class="comment">// ` 用来定义 ES6 中的模板字符串，$&#123;expr&#125; 用来在模板字符串中嵌入表达式</span></span><br><span class="line"><span class="keyword">let</span> sentence: <span class="built_in">string</span> = <span class="string">`Hello, my name is <span class="subst">$&#123;myName&#125;</span>.I&#x27;ll be <span class="subst">$&#123;myAge + <span class="number">1</span>&#125;</span> years old next month.`</span>; </span><br><span class="line"></span><br><span class="line">Null 和 Undefined 和 <span class="built_in">void</span></span><br><span class="line"><span class="keyword">let</span> u: <span class="literal">undefined</span> = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">let</span> n: <span class="literal">null</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">// 与 void 的区别是，undefined 和 null 是所有类型的子类型。也就是说 undefined 类型的变量，可以赋值给 number 类型的变量：</span></span><br><span class="line"><span class="keyword">let</span> unusable: <span class="built_in">void</span> = <span class="literal">undefined</span>; <span class="comment">// void只能赋值为 undefined 和 null</span></span><br></pre></td></tr></table></figure>

<h1 id="内置对象：指根据标准在全局作用域（Global）上存在的对象，这些对象可作为类型赋值给变量"><a href="#内置对象：指根据标准在全局作用域（Global）上存在的对象，这些对象可作为类型赋值给变量" class="headerlink" title="内置对象：指根据标准在全局作用域（Global）上存在的对象，这些对象可作为类型赋值给变量"></a>内置对象：指根据标准在全局作用域（Global）上存在的对象，这些对象可作为类型赋值给变量</h1><p>这些内置对象的定义文件可以在<a href="https://github.com/Microsoft/TypeScript/tree/master/src/lib">TypeScript 核心库的定义文件</a>查找</p>
<p>ECMAScript 标准的内置对象比如Boolean、Date、RegExp等，更多内置对象<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects">MDN</a></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> b: <span class="built_in">Boolean</span> = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">let</span> d: <span class="built_in">Date</span> = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">let</span> r: <span class="built_in">RegExp</span> = <span class="regexp">/[a-z]/</span>;</span><br></pre></td></tr></table></figure>
<p>DOM 和 BOM 的内置对象比如Document、HTMLElement、Event、NodeList等</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> body: HTMLElement = <span class="built_in">document</span>.body;</span><br><span class="line"><span class="keyword">let</span> allDiv: NodeList = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e: MouseEvent</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="赋值多个类型"><a href="#赋值多个类型" class="headerlink" title="赋值多个类型"></a>赋值多个类型</h1><h2 id="任意类型-any-：表示允许赋值为任意类型，且能在赋值过程中改变类型"><a href="#任意类型-any-：表示允许赋值为任意类型，且能在赋值过程中改变类型" class="headerlink" title="任意类型 any ：表示允许赋值为任意类型，且能在赋值过程中改变类型"></a>任意类型 <code>any </code>：表示允许赋值为任意类型，且能在赋值过程中改变类型</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> myFavoriteNumber: <span class="built_in">any</span> = <span class="string">&#x27;seven&#x27;</span>;</span><br><span class="line">myFavoriteNumber = <span class="number">7</span>;</span><br></pre></td></tr></table></figure>
<p>变量声明，赋值但未指定其类型，TypeScript 会依照类型推论（Type Inference）的规则推断出一个类型</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">&#x27;7&#x27;</span> <span class="comment">// TypeScript会推断为string类型</span></span><br><span class="line">a = <span class="number">7</span>  <span class="comment">// 这个赋值会导致报错</span></span><br></pre></td></tr></table></figure>
<p>变量声明，未赋值未指定其类型，会被推断成 <code>any </code>类型而完全不被类型检查</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a    <span class="comment">// any 类型</span></span><br><span class="line">a = <span class="string">&#x27;7&#x27;</span></span><br><span class="line">a = <span class="number">7</span> </span><br></pre></td></tr></table></figure>

<h2 id="联合类型：可以指定多种类型，可赋值为其中一种，使用-分隔每个类型"><a href="#联合类型：可以指定多种类型，可赋值为其中一种，使用-分隔每个类型" class="headerlink" title="联合类型：可以指定多种类型，可赋值为其中一种，使用 |` 分隔每个类型"></a>联合类型：可以指定多种类型，可赋值为其中一种，使用 |` 分隔每个类型</h2><p>示例</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a: <span class="built_in">string</span> | <span class="built_in">number</span>; <span class="comment">// 指定类型为 string 和 number</span></span><br><span class="line">a = <span class="string">&#x27;7&#x27;</span>; <span class="comment">// 类型推断为 number</span></span><br><span class="line">a = <span class="number">7</span>; <span class="comment">// 类型推断为 string</span></span><br><span class="line">a = <span class="literal">true</span>; <span class="comment">// 类型推断为 boolean 报错</span></span><br></pre></td></tr></table></figure>

<h1 id="使用接口定义对象类型"><a href="#使用接口定义对象类型" class="headerlink" title="使用接口定义对象类型"></a>使用接口定义对象类型</h1><ul>
<li><p>接口使用<code> interface</code> 关键字定义</p>
</li>
<li><p>接口首字母大写</p>
</li>
<li><p>对象类型的属性分为确定属性、只读属性、可选属性、任意属性</p>
</li>
<li><p>确定属性：也就是固定的属性，接口有 变量声明时就必须有,</p>
</li>
<li><p>只读属性：<code>readonly</code> 关键字定义，第一次赋值后无法更改，是在接口创建后只能** 第一次给对象赋值的时候为只读属性赋值 **， 而不是第一次给只读属性赋值</p>
</li>
<li><p>可选属性：属性名 + ?，表示该属性可以不存在</p>
</li>
<li><p>任意属性：<code>[propName: string]: any; </code> 冒号前半部分表示任意属性取 <code>string类型</code>的值，后半部分是类型的子集</p>
</li>
<li><p>一旦定义了任意属性，那么另外三种属性的类型都必须是它的类型的子集，可将任意属性的类型的子集定义为 <code>联合类型</code> 或者 <code>any 类型</code></p>
</li>
</ul>
<p>一个栗子：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    <span class="keyword">readonly</span> id: <span class="built_in">number</span>;                <span class="comment">// 只读属性</span></span><br><span class="line">    a: <span class="built_in">string</span>;                                  <span class="comment">// 确定属性</span></span><br><span class="line">    b?: <span class="built_in">number</span>;                             <span class="comment">// 可选属性</span></span><br><span class="line">    [propName: <span class="built_in">string</span>]: <span class="built_in">string</span>;     <span class="comment">// 任意属性</span></span><br><span class="line">&#125;       <span class="comment">// 会报错，任意属性类型的子集为 string，而 b 和 id 的类型为number，不属于任意属性类型的子集</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj: Person = &#123; <span class="comment">// 报错 没有给只读属性 id 赋值</span></span><br><span class="line">    <span class="attr">a</span>: <span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">    <span class="attr">b</span>: <span class="number">456</span>,</span><br><span class="line">    <span class="attr">c</span>: <span class="string">&#x27;789&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line">obj.id = <span class="number">89757</span>; <span class="comment">// 报错 因为这不是对象第一次赋值</span></span><br></pre></td></tr></table></figure>
<p>修改为</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    <span class="keyword">readonly</span> id: <span class="built_in">number</span>;</span><br><span class="line">    a: <span class="built_in">string</span>;</span><br><span class="line">    b?: <span class="built_in">number</span>;</span><br><span class="line">    [propName: <span class="built_in">string</span>]: <span class="built_in">string</span> | <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj: Person = &#123; </span><br><span class="line">    <span class="attr">id</span>: <span class="number">8</span>,</span><br><span class="line">    <span class="attr">a</span>: <span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">    <span class="attr">b</span>: <span class="number">456</span>,</span><br><span class="line">    <span class="attr">c</span>: <span class="string">&#x27;789&#x27;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="数组类型：类型-方括号，-数组的每一项元素都必须符合类型"><a href="#数组类型：类型-方括号，-数组的每一项元素都必须符合类型" class="headerlink" title="数组类型：类型 + 方括号， ** 数组的每一项元素都必须符合类型 **"></a>数组类型：类型 + 方括号， ** 数组的每一项元素都必须符合类型 **</h1><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>]; <span class="comment">// 数组元素类型只能是 number</span></span><br><span class="line"><span class="keyword">let</span> c: (<span class="built_in">number</span> | <span class="built_in">string</span>)[] = [<span class="number">1</span>, <span class="string">&#x27;1&#x27;</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>]; <span class="comment">// 联合类型和数组的结合</span></span><br><span class="line"><span class="keyword">let</span> b: <span class="built_in">any</span>[] = [<span class="number">1</span>, <span class="string">&#x27;2&#x27;</span>, <span class="number">3</span>, &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;]; <span class="comment">// any 类型</span></span><br></pre></td></tr></table></figure>
<p>接口定义</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> NumberArray &#123;</span><br><span class="line">  [index: <span class="built_in">number</span>]: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> fibonacci: NumberArray = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>];</span><br></pre></td></tr></table></figure>

<h1 id="函数的类型定义"><a href="#函数的类型定义" class="headerlink" title="函数的类型定义"></a>函数的类型定义</h1><ul>
<li>函数的输入和输出为必须，且都必须定义类型</li>
<li>可选参数：参数名 + ? ，可选参数必须在必填参数后面</li>
<li>默认参数：设置了默认值的参数会被 TypeScript 识别为可选参数，但不受 “可选参数必须在必填参数后面” 这个限制</li>
<li>剩余参数：指除了 必选参数 和 可选参数 以外的参数，使用 … 获取剩余参数为数组格式需定义类型，剩余参数必须排在参数末尾</li>
</ul>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 小括号里面是输入的参数包括对参数类型的定义，花括号前面的number是输出的类型</span></span><br><span class="line"><span class="comment">// y 设置了默认参数，为可选参数</span></span><br><span class="line"><span class="comment">// z为可选参数</span></span><br><span class="line"><span class="comment">// rest 为剩余参数，any 类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span> = <span class="number">6</span>, z?: <span class="built_in">number</span>, ...rest: <span class="built_in">any</span>[]</span>): <span class="title">number</span> </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line">sum(<span class="number">1</span>)</span><br><span class="line">sum(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>) <span class="comment">// 4,5 为剩余参数</span></span><br></pre></td></tr></table></figure>

<p>函数表达式:  <code>=&gt;</code>不是箭头函数，他表示函数的定义，左边是输入类型，需要用括号括起来，右边是输出类型</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> mySum: <span class="function">(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span> = <span class="function"><span class="keyword">function</span> (<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="类型断言：-lt-类型-gt-值，当需要在还不确定类型的时候就访问其中一个类型的属性或方法时我们可以手动指定这个值的类型"><a href="#类型断言：-lt-类型-gt-值，当需要在还不确定类型的时候就访问其中一个类型的属性或方法时我们可以手动指定这个值的类型" class="headerlink" title="类型断言：&lt;类型&gt;值，当需要在还不确定类型的时候就访问其中一个类型的属性或方法时我们可以手动指定这个值的类型"></a>类型断言：&lt;类型&gt;值，当需要在还不确定类型的时候就访问其中一个类型的属性或方法时我们可以手动指定这个值的类型</h1><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLength</span>(<span class="params">something: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123; <span class="comment">// 当然这地方你也可以将他定义为any类型</span></span><br><span class="line">    <span class="keyword">return</span> something.length;  <span class="comment">// 报错 类型“number”上不存在属性“length”</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string">使用类型断言</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span><span class="string">`ts</span></span><br><span class="line"><span class="string">function getLength(something: string): number &#123;</span></span><br><span class="line"><span class="string">    return (&lt;string&gt;something).length;  // 将参数定义为string后再去访问他的length</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

<h1 id="类型别名：使用type关键字给一个类型起个新名字，常用于联合类型"><a href="#类型别名：使用type关键字给一个类型起个新名字，常用于联合类型" class="headerlink" title="类型别名：使用type关键字给一个类型起个新名字，常用于联合类型"></a>类型别名：使用<code>type</code>关键字给一个类型起个新名字，常用于联合类型</h1><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Name = <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">type</span> NameResolver = <span class="function">() =&gt;</span> <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">type</span> NameOrResolver = Name | NameResolver;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params">n: NameOrResolver</span>): <span class="title">Name</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> n === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> n();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="字符串字面量类型：使用type关键字约束取值只能是某几个字符串中的一个"><a href="#字符串字面量类型：使用type关键字约束取值只能是某几个字符串中的一个" class="headerlink" title="字符串字面量类型：使用type关键字约束取值只能是某几个字符串中的一个"></a>字符串字面量类型：使用<code>type</code>关键字约束取值只能是某几个字符串中的一个</h1><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> EventNames = <span class="string">&#x27;click&#x27;</span> | <span class="string">&#x27;scroll&#x27;</span> | <span class="string">&#x27;mousemove&#x27;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleEvent</span>(<span class="params">ele: Element, event: EventNames</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br><span class="line">handleEvent(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;hello&#x27;</span>), <span class="string">&#x27;scroll&#x27;</span>);  </span><br><span class="line">handleEvent(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;world&#x27;</span>), <span class="string">&#x27;dbclick&#x27;</span>); <span class="comment">// 报错，dbclick不在EventNames中</span></span><br></pre></td></tr></table></figure>

<h1 id="声明文件"><a href="#声明文件" class="headerlink" title="声明文件"></a>声明文件</h1><ul>
<li>声明文件以<code>.d.ts</code>为后缀</li>
<li><code>@type</code>引入第三方声明文件：npm install @types/jquery –save-dev，可以统一管理第三方库的声明文件只需在插件名称前加上<code>@type</code></li>
<li>declare var/let/const 声明全局变量，一般全局变量都是禁止修改的常量，所以大部分情况都应该使用 const 而不是 var / let</li>
<li>declare function 声明全局方法</li>
<li>declare class 声明全局类</li>
<li>declare enum 声明全局枚举类型</li>
<li>declare namespace 声明全局对象（含有子属性）</li>
<li>interface 和 type 声明全局类型</li>
</ul>
<h1 id="元祖：数组合并了相同类型的对象，而元组（Tuple）合并了不同类型的对象"><a href="#元祖：数组合并了相同类型的对象，而元组（Tuple）合并了不同类型的对象" class="headerlink" title="元祖：数组合并了相同类型的对象，而元组（Tuple）合并了不同类型的对象"></a>元祖：数组合并了相同类型的对象，而元组（Tuple）合并了不同类型的对象</h1><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> tup: [<span class="built_in">string</span>, <span class="built_in">number</span>] = [<span class="string">&#x27;first&#x27;</span>, <span class="number">15</span>];  <span class="comment">// 定义，定义时也可不赋值</span></span><br><span class="line">tup = [<span class="string">&#x27;second&#x27;</span>, <span class="number">30</span>]                    <span class="comment">// 直接赋值</span></span><br><span class="line">tup[<span class="number">0</span>] = <span class="string">&#x27;second&#x27;</span>                       <span class="comment">// 通过索引赋值</span></span><br><span class="line">tup = [<span class="string">&#x27;second&#x27;</span>]                         <span class="comment">// 报错，需要提供所有元组类型中指定的项</span></span><br><span class="line">tup.push(<span class="number">20</span>);                             <span class="comment">// 添加越界元素</span></span><br><span class="line">tup.push(<span class="literal">true</span>);                          <span class="comment">// 报错，越界元素类型会被限制为元组中每个类型的联合类型</span></span><br></pre></td></tr></table></figure>

<h1 id="枚举：enum关键字用于限定取值在一定范围内"><a href="#枚举：enum关键字用于限定取值在一定范围内" class="headerlink" title="枚举：enum关键字用于限定取值在一定范围内"></a>枚举：<code>enum</code>关键字用于限定取值在一定范围内</h1><p>普通枚举</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 枚举成员会被赋值为从 0 开始递增的数字</span></span><br><span class="line"><span class="built_in">enum</span> Days &#123;Sun, Mon, Tue, Wed, Thu, Fri, Sat&#125;; </span><br><span class="line"><span class="built_in">console</span>.log(Days[<span class="string">&quot;Sun&quot;</span>] === <span class="number">0</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Days.Sun === <span class="number">0</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Days[<span class="number">0</span>] === <span class="string">&quot;Sun&quot;</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当我们手动赋值时，未被赋值的枚举项会接着上一个枚举项 +1 递增，手动赋值的枚举项也可以为小数或负数</span></span><br><span class="line"><span class="built_in">enum</span> Days &#123;Sun = <span class="number">7</span>, Mon = <span class="number">8</span>, Tue, Wed, Thu = <span class="number">5.5</span>, Fri, Sat&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(Days.Mon === <span class="number">8</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Days.Wed === <span class="number">10</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Days.Fri === <span class="number">6.5</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 手动赋值的枚举项可以不是数字，需要使用类型断言来让 tsc 无视类型检查，非数字枚举项后面不能跟未手动赋值的枚举项，因为无法获得初始值</span></span><br><span class="line"><span class="built_in">enum</span> Days &#123;Sun = <span class="number">7</span>, Mon, Tue, Wed, Thu, Fri, Sat = &lt;<span class="built_in">any</span>&gt;<span class="string">&quot;S&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当枚举项是计算所得项时，后面不能跟是未手动赋值的项</span></span><br><span class="line"><span class="built_in">enum</span> Color &#123;Red, Green, Blue = <span class="string">&quot;blue&quot;</span>.length&#125;;</span><br></pre></td></tr></table></figure>
<p>常数枚举：<code>const enum </code>关键字定义，常数枚举会在编译阶段被删除，并且不能包含计算成员</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="built_in">enum</span> Directions &#123;Up, Down, Left, Right&#125;</span><br></pre></td></tr></table></figure>
<p>外部枚举：是指使用<code> declare enum</code> 定义的枚举类型，只会用于编译时的检查，编译结果中会被删除</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="built_in">enum</span> Directions &#123;Up, Down, Left, Right&#125;</span><br></pre></td></tr></table></figure>

<h1 id="类：基于es6-class-和-es7-新提案的基础上添加了三种访问修饰符"><a href="#类：基于es6-class-和-es7-新提案的基础上添加了三种访问修饰符" class="headerlink" title="类：基于es6 class 和 es7 新提案的基础上添加了三种访问修饰符"></a>类：基于es6 class 和 es7 新提案的基础上添加了三种访问修饰符</h1><p>*public：修饰的属性或方法是公有的，任何地方都能被访问<br>*private：修饰的属性或方法是私有的，不能在声明它的类的外部访问<br>*protected：和 private 类似，区别是它在子类中允许被访问 </p>
<h1 id="泛型：定义函数、接口或类的时候，使用的时候再指定类型的一种特性"><a href="#泛型：定义函数、接口或类的时候，使用的时候再指定类型的一种特性" class="headerlink" title="泛型：定义函数、接口或类的时候，使用的时候再指定类型的一种特性"></a>泛型：定义函数、接口或类的时候，使用的时候再指定类型的一种特性</h1><p>vs code 提示：Experimental support for decorators is a feature that is subject to change in a future release. Set the ‘experimentalDecorators’ option to remove this </p>
<p>在 tsconfig.json 文件中修改规则 experimentalDecorators</p>
<h1 id="学习资源"><a href="#学习资源" class="headerlink" title="学习资源"></a>学习资源</h1><p>官网 <a href="http://www.typescriptlang.org/">http://www.typescriptlang.org/</a><br>对新手比官网更友好些 <a href="https://ts.xcatliu.com/introduction/what-is-typescript.html">https://ts.xcatliu.com/introduction/what-is-typescript.html</a><br>vue + ts项目实战 <a href="https://juejin.im/post/5b54886ce51d45198f5c75d7#heading-14">https://juejin.im/post/5b54886ce51d45198f5c75d7#heading-14</a></p>
]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
      <tags>
        <tag>typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>vue cli 3.0初体验</title>
    <url>/2018/09/20/vue3.0/</url>
    <content><![CDATA[<p><a href="https://medium.com/the-vue-point/plans-for-the-next-iteration-of-vue-js-777ffea6fabf">尤雨溪：Vue 3.0 计划</a> 原文需翻墙<br><a href="https://juejin.im/post/5bb719b9f265da0ab915dbdd">尤雨溪：Vue 3.0 计划</a> 掘金译文</p>
<h1 id="关于安装"><a href="#关于安装" class="headerlink" title="关于安装"></a>关于安装</h1><p>Vue CLI 的包名称由 vue-cli 改成了 @vue/cli</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">npm</span> install -g @vue/cli</span><br><span class="line"></span><br><span class="line">安装完成后查看版本</span><br><span class="line">vue --V</span><br></pre></td></tr></table></figure>
<h1 id="项目创建"><a href="#项目创建" class="headerlink" title="项目创建"></a>项目创建</h1><p>关于项目创建，除了命令创建3.x还增加了<strong>图形化界面创建以及管理vue项目</strong><br>在创建新项目时还可以<strong>混合选用多种集成</strong></p>
<ul>
<li><p>TypeScript</p>
</li>
<li><p>PWA</p>
</li>
<li><p>Vue Router &amp; Vuex</p>
</li>
<li><p>ESLint / TSLint / Prettier</p>
</li>
<li><p>用 Jest 或 Mocha 进行单元测试</p>
</li>
<li><p>用 Cypress 或者 Nightwatch 进行 E2E 测试</p>
<h2 id="使用命令创建"><a href="#使用命令创建" class="headerlink" title="使用命令创建"></a>使用命令创建</h2><p>命令：vue create vueapp</p>
</li>
</ul>
<p>1、使用上下箭头选择默认设置还是手动选择功能</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">Vue CLI v3<span class="number">.0</span><span class="number">.3</span></span><br><span class="line">? Please pick a preset:</span><br><span class="line">  <span class="literal">default</span> (babel, eslint)</span><br><span class="line">&gt; Manually <span class="keyword">select</span> features</span><br></pre></td></tr></table></figure>
<p>2、按空格键选择你需要的功能，选完后按回车</p>
<figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line">babel：javascript转译器，将最新版的js语法（es6、es7）转换为现阶段浏览器可以兼容的js代码</span><br><span class="line">typescript：使用 TypeScript 书写源码</span><br><span class="line">PWA：渐进式WEB应用</span><br><span class="line">Router：使用vue-router</span><br><span class="line">Vuex：使用vuex</span><br><span class="line">CSS Pre-processors：css预处理器</span><br><span class="line">Linter / Formatter：代码规范标准</span><br><span class="line"><span class="keyword">Unit</span> Testing：单元测试</span><br><span class="line">E2E Testing：e2e测试</span><br><span class="line">Vue CLI v3.<span class="number">0.3</span></span><br><span class="line">? Please pick a preset: Manually <span class="keyword">select</span> features</span><br><span class="line">? Check the features needed <span class="keyword">for</span> your project:</span><br><span class="line"> <span class="comment">(*) Babel</span></span><br><span class="line"><span class="comment"> ( ) TypeScript</span></span><br><span class="line"><span class="comment"> ( ) Progressive Web App (PWA) Support</span></span><br><span class="line"><span class="comment"> (*)</span> Router</span><br><span class="line"> <span class="comment">(*) Vuex</span></span><br><span class="line"><span class="comment">&gt;(*)</span> CSS Pre-processors</span><br><span class="line"> <span class="comment">(*) Linter / Formatter</span></span><br><span class="line"><span class="comment"> ( ) Unit Testing</span></span><br><span class="line"><span class="comment"> ( ) E2E Testing</span></span><br></pre></td></tr></table></figure>
<p>3、router是否使用history模式，history需要服务器支持详，情请看这儿<a href="https://router.vuejs.org/zh/guide/essentials/history-mode.html">https://router.vuejs.org/zh/guide/essentials/history-mode.html</a><br>这里我就选no</p>
<p>4、css预处理器的选择，我习惯用sass</p>
<p>5、代码格式化检测选择，我用的是ide是vscode个人感觉搭配插件用着很舒服，所以我选Prettier</p>
<p>6、是否保存刚才的配置，下一次就不用重新配置了，我就直接回车</p>
<p>7、关于Babel, PostCSS, ESLint, etc.这些配置文件你是想放在package.json里面还是单独放在外面<br>编辑器一般默认会在项目根目录下寻找配置文件，这里我就直接回车选择In dedicated config files</p>
<p>8、是否保存为未来项目的预配置吗，我也是直接回车</p>
<p>最后配置如下</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">Vue CLI v3<span class="number">.0</span><span class="number">.3</span></span><br><span class="line">? Please pick a preset: Manually <span class="keyword">select</span> features</span><br><span class="line">? <span class="keyword">Check</span> the features needed <span class="keyword">for</span> your project: Babel, Router, Vuex, CSS Pre-processors, Linter</span><br><span class="line">? Use history mode <span class="keyword">for</span> router? (Requires proper <span class="keyword">server</span> setup <span class="keyword">for</span> <span class="keyword">index</span> fallback <span class="keyword">in</span> production) <span class="keyword">No</span></span><br><span class="line">? Pick a CSS pre-processor (PostCSS, Autoprefixer <span class="keyword">and</span> CSS Modules are supported <span class="keyword">by</span> <span class="keyword">default</span>): Sass/SCSS</span><br><span class="line">? Pick a linter / formatter config: Prettier</span><br><span class="line">? Pick additional lint features: Lint <span class="keyword">on</span> save</span><br><span class="line">? <span class="keyword">Where</span> <span class="keyword">do</span> you prefer <span class="keyword">placing</span> config <span class="keyword">for</span> Babel, PostCSS, ESLint, etc.? <span class="keyword">In</span> dedicated config files</span><br><span class="line">? Save this <span class="keyword">as</span> a preset <span class="keyword">for</span> future projects? Yes</span><br></pre></td></tr></table></figure>
<h2 id="图形化界面"><a href="#图形化界面" class="headerlink" title="图形化界面"></a>图形化界面</h2><p>图形化操作非常方便，我就不一步步演示了，主要懒得贴图 (°ー°〃)</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">执行npm命令</span><br><span class="line">vue ui</span><br><span class="line">访问 http:<span class="regexp">//</span>localhost:<span class="number">8000</span> 你就可以创建，管理，导入项目</span><br></pre></td></tr></table></figure>
<h1 id="实用新功能"><a href="#实用新功能" class="headerlink" title="实用新功能"></a>实用新功能</h1><ul>
<li>node_modules</li>
<li>public</li>
<li>src</li>
<li>.browserslistrc</li>
<li>.eslintrc.js</li>
<li>.gitignore</li>
<li>babel.config.js</li>
<li>package.json</li>
<li>postcss.config.js</li>
<li>README.md</li>
</ul>
<p>以上是项目根目录，3.x对比2.x文件结构明显精简了不少，多了一个public文件夹用于存放静态文件少了config、build等一系列的配置文件，这些配置文件都被放在了node_modules@vue文件下</p>
<h2 id="browserslist"><a href="#browserslist" class="headerlink" title="browserslist"></a>browserslist</h2><p>根目录中多了一个.browserslist文件，可以指定项目的目标浏览器的范围<br>用于转译的 JavaScript 特性和添加CSS 浏览器前缀，可以减少兼容代码提高代码质量<br>如果想少一个文件，你也可以在package.json中添加browserslist字段，参数是一个数组</p>
<figure class="highlight node-repl"><table><tr><td class="code"><pre><span class="line">这是默认设置，兼容所有最新版本，不支持ie8以下</span><br><span class="line"><span class="meta">&gt;</span> <span class="javascript"><span class="number">1</span>%</span></span><br><span class="line">last 2 versions</span><br><span class="line">not ie &lt;= 8</span><br></pre></td></tr></table></figure>
<p>使用 npx browserslist 可以查看项目的浏览器兼容情况<br>将需要支持的目标浏览器参数放在文件中就好</p>
<table>
<thead>
<tr>
<th align="center">参数</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">&gt; 1%</td>
<td align="center">全球超过1%人使用的浏览器</td>
</tr>
<tr>
<td align="center">&gt; 5% in US</td>
<td align="center">使用美国使用情况统计，接受两个字母的<a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements">国家/地区代码</a></td>
</tr>
<tr>
<td align="center">&gt; 5% in my stats</td>
<td align="center">使用<a href="https://github.com/browserslist/browserslist#custom-usage-data">自定义使用数据</a></td>
</tr>
<tr>
<td align="center">last 2 versions</td>
<td align="center">所有浏览器兼容到最后两个版本根据CanIUse.com追踪的版本</td>
</tr>
<tr>
<td align="center">Firefox ESR</td>
<td align="center">火狐最新版本</td>
</tr>
<tr>
<td align="center">Firefox &gt; 20</td>
<td align="center">指定版本范围</td>
</tr>
<tr>
<td align="center">not ie &lt;=8</td>
<td align="center">方向排除部分版本</td>
</tr>
<tr>
<td align="center">Firefox 12.1</td>
<td align="center">指定浏览器版本</td>
</tr>
<tr>
<td align="center">since 2013</td>
<td align="center">2013年之后发布的所有版本</td>
</tr>
</tbody></table>
<p>更多请查看官方文档</p>
<h2 id="vue-cli服务"><a href="#vue-cli服务" class="headerlink" title="vue-cli服务"></a>vue-cli服务</h2><p>在一个 Vue CLI 项目中，@vue/cli-service 安装了一个名为 vue-cli-service 的命令。<br>你可以在 npm scripts 中以 vue-cli-service、或者从终端中以 ./node_modules/.bin/vue-cli-service 访问这个命令<br> Vue CLI 项目有三个模式： development 模式用于启动，production 模式用于打包和e2e测试，test 模式用于unit测试</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">启动</span><br><span class="line">serve:vue-<span class="keyword">cli</span>-service serve</span><br><span class="line"></span><br><span class="line">  --<span class="keyword">open</span>    在服务器启动时打开浏览器</span><br><span class="line"></span><br><span class="line">  --<span class="keyword">copy</span>    在服务器启动时将 URL 复制到剪切版</span><br><span class="line"></span><br><span class="line">  --mode    指定环境模式 (默认值：development)</span><br><span class="line"></span><br><span class="line">  --host    指定 host (默认值：0.0.0.0)</span><br><span class="line"></span><br><span class="line">  --port    指定 port (默认值：8080)</span><br><span class="line"></span><br><span class="line">  --https   使用 https (默认值：false)</span><br><span class="line"></span><br><span class="line">打包</span><br><span class="line">build:vue-<span class="keyword">cli</span>-service build</span><br><span class="line"></span><br><span class="line">  --modern 使用现代模式构建应用，为现代浏览器交付原生支持的 ES2015 代码，并生成一个兼容老浏览器的包用来自动回退。</span><br><span class="line"></span><br><span class="line">  --target 允许你将项目中的任何组件以一个库或 Web Components 组件的方式进行构建。更多细节请查阅构建目标。</span><br><span class="line"></span><br><span class="line">  --<span class="keyword">report</span> 和 --<span class="keyword">report</span>-json 会根据构建统计生成报告，它会帮助你分析包中包含的模块们的大小</span><br><span class="line"></span><br><span class="line">测试</span><br><span class="line">   <span class="keyword">test</span>: vue-<span class="keyword">cli</span>-service <span class="keyword">test</span>:e2e  端到端测试</span><br><span class="line">         vue-<span class="keyword">cli</span>-service <span class="keyword">test</span>:unit  单元测试</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="现代模式"><a href="#现代模式" class="headerlink" title="现代模式"></a>现代模式</h2><p>为了兼容那些不支持js新特性的浏览器我们需要Babel转译，但转译后的代码笨重冗长，这次3.x提供了一个现代模式</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">npx vue-cli-service build <span class="comment">--modern</span></span><br></pre></td></tr></table></figure>
<p>这个命令会产生两个应用的版本：一个现代版的包，面向支持 ES modules 的现代浏览器，另一个旧版的包，面向不支持的旧浏览器<br>而且不需要我们手动去部署和设置什么，简直很贴心</p>
<ul>
<li>现代版的包会通过 <code>&lt;script type=&quot;module&quot;&gt;</code> 在被支持的浏览器中加载；它们还会使用 <code>&lt;link rel=&quot;modulepreload&quot;&gt;</code> 进行预加载</li>
<li>旧版的包会通过 <code>&lt;script nomodule&gt;</code> 加载，并会被支持 ES modules 的浏览器忽略</li>
<li>一个针对 Safari 10 中 <code>&lt;script nomodule&gt;</code> 的修复会被自动注入<h2 id="插件的添加"><a href="#插件的添加" class="headerlink" title="插件的添加"></a>插件的添加</h2>在一个已经被创建好的项目中安装一个插件,使用vue add命令<h2 id="CLI-插件安装"><a href="#CLI-插件安装" class="headerlink" title="CLI 插件安装"></a>CLI 插件安装</h2>每个 CLI 插件都会包含一个 (用来创建文件的) 生成器和一个 (用来调整 webpack 核心配置和注入命令的) 运行时插件<br>对于这种cli插件需要加入@vue的前缀，这个命令将 @vue/eslint 解析为完整的包名 @vue/cli-plugin-eslint，然后从 npm 安装它，调用它的生成器<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">插件添加</span><br><span class="line">vue <span class="keyword">add</span> <span class="variable">@vue</span><span class="operator">/</span>eslint</span><br><span class="line"></span><br><span class="line">向被安装的插件传递生成器选项 (这样做会跳过命令提示)</span><br><span class="line">vue <span class="keyword">add</span> <span class="variable">@vue</span><span class="operator">/</span>eslint <span class="comment">--config airbnb --lintOn save</span></span><br></pre></td></tr></table></figure>
<h2 id="第三方插件安装"><a href="#第三方插件安装" class="headerlink" title="第三方插件安装"></a>第三方插件安装</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">安装并调用 vue<span class="operator">-</span>cli<span class="operator">-</span>plugin<span class="operator">-</span>apollo，不带 <span class="variable">@vue</span> 前缀，该命令会换作解析一个 unscoped 的包</span><br><span class="line">执行此命令后src里会创建一个plugins文件夹，里面会自动生成关于插件的配置文件</span><br><span class="line">vue <span class="keyword">add</span> axios</span><br><span class="line"></span><br><span class="line">基于一个指定的 <span class="keyword">scope</span> 使用第三方插件，如果一个插件名为 <span class="variable">@foo</span><span class="operator">/</span>vue<span class="operator">-</span>cli<span class="operator">-</span>plugin<span class="operator">-</span>bar，你可以这样添加它：</span><br><span class="line">vue <span class="keyword">add</span> <span class="variable">@foo</span><span class="operator">/</span>bar</span><br></pre></td></tr></table></figure>
<h1 id="配置修改"><a href="#配置修改" class="headerlink" title="配置修改"></a>配置修改</h1>例：向所有 Sass 样式传入共享的全局变量<br>在根目录新建一个vue.config.js，加入以下配置<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">css</span>: &#123;</span><br><span class="line">    <span class="attr">loaderOptions</span>: &#123;</span><br><span class="line">      <span class="comment">// 给 sass-loader 传递选项</span></span><br><span class="line">      <span class="attr">sass</span>: &#123;</span><br><span class="line">        <span class="comment">// @/ 是 src/ 的别名</span></span><br><span class="line">        <span class="comment">// 所以这里假设你有 `src/variables.scss` 这个文件</span></span><br><span class="line">        <span class="attr">data</span>: <span class="string">`@import &quot;@/variables.scss&quot;;`</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="打包后路径问题"><a href="#打包后路径问题" class="headerlink" title="打包后路径问题"></a>打包后路径问题</h1>在vue.config.js文件种加入’baseUrl: ‘./‘’<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">    <span class="regexp">//</span>...</span><br><span class="line">    baseUrl: <span class="string">&#x27;./&#x27;</span></span><br><span class="line">    <span class="regexp">//</span>...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
虽然官方说这个文件会被 @vue/cli-service 自动加载，但如果你启动项目用的是npm run serve，那么你最好使用npx vue-cli-service serve重启一下</li>
</ul>
<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p>官方文档 <a href="https://cli.vuejs.org/zh/guide/">https://cli.vuejs.org/zh/guide/</a><br>browserslist的github <a href="https://github.com/browserslist/browserslist">https://github.com/browserslist/browserslist</a><br><a href="https://mp.weixin.qq.com/s/hfr2Q3FXZFIdqM_r8HrLwQ">https://mp.weixin.qq.com/s/hfr2Q3FXZFIdqM_r8HrLwQ</a></p>
<p>欢迎留言交流  (´▽`ʃ♡ƪ)</p>
]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue+ECharts4.x地图下钻/散点分布以及热力图</title>
    <url>/2018/08/15/vue_ECharts4-x/</url>
    <content><![CDATA[<p>最近用到了echarts，实现三个功能国家到省级的地图下钻和散点分布以及热力图显示</p>
<p>网上资料蛮少的，记录一个给后面的小伙伴一些参考</p>
<h1 id="demo效果如下"><a href="#demo效果如下" class="headerlink" title="demo效果如下"></a>demo效果如下</h1><p>中国地图下显示为热力图，显示精确分布点只是demo所以数据是自己写的假数据只有几条<br>点击进入省份地图，在地图之外还有那个小箭头是数据的原因不是bug改下数据就好 <br><img src="/2018/08/15/vue_ECharts4-x/map.gif" alt="demo效果"></p>
<p>先上官网<a href="http://echarts.baidu.com/option.html#title%EF%BC%8C%E8%A1%A8%E7%99%BDecharts%EF%BC%8C%E6%96%87%E6%A1%A3%E7%9C%9F%E7%9A%84%E5%BE%88%E8%AF%A6%E7%BB%86%EF%BC%8C%E8%89%AF%E5%BF%83%E5%AE%98%E7%BD%91">http://echarts.baidu.com/option.html#title，表白echarts，文档真的很详细，良心官网</a></p>
<p>demo代码如下<br>下钻到市级县级道理也是如此</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">mapfun</span>(<span class="params">name</span>)</span>&#123; </span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">this</span>.chartNum)</span><br><span class="line">      <span class="comment">// 注意文件路径 </span></span><br><span class="line">      <span class="built_in">this</span>.$http.get(<span class="string">&#x27;static/province/&#x27;</span>+name+<span class="string">&#x27;.json&#x27;</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123; </span><br><span class="line">        echarts.registerMap(name, res.body)</span><br><span class="line">        <span class="keyword">let</span> data = [];</span><br><span class="line">        res.body.features.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            data.push(&#123;</span><br><span class="line">                <span class="attr">name</span>:item.properties.name</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="built_in">this</span>.chartNum !== <span class="number">1</span> ? <span class="built_in">this</span>.myChart.dispose() : <span class="string">&#x27;&#x27;</span>  <span class="comment">// 创建新实例之前一定要销毁上一个实例，否则重复多次点击无数的实例导致内存爆满</span></span><br><span class="line">        <span class="built_in">this</span>.chartNum++</span><br><span class="line">        <span class="built_in">this</span>.myChart = echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;myChart&#x27;</span>))</span><br><span class="line">        <span class="built_in">this</span>.myChart.showLoading()</span><br><span class="line">        <span class="built_in">this</span>.myChart.setOption(&#123;</span><br><span class="line">          <span class="attr">title</span>: &#123; <span class="comment">// 标题</span></span><br><span class="line">            <span class="attr">text</span>: <span class="string">&quot;分布图&quot;</span>,</span><br><span class="line">            <span class="attr">left</span>: <span class="string">&quot;center&quot;</span>,</span><br><span class="line">            <span class="attr">padding</span>: <span class="number">30</span>,</span><br><span class="line">            <span class="attr">textStyle</span>: &#123;</span><br><span class="line">              <span class="attr">color</span>: <span class="string">&quot;#fff&quot;</span>,</span><br><span class="line">              <span class="attr">fontSize</span>: <span class="string">&quot;30&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">visualMap</span>: &#123; <span class="comment">// 热力图颜色显示</span></span><br><span class="line">            <span class="attr">default</span>:<span class="string">&#x27;piecewise &#x27;</span>,</span><br><span class="line">            <span class="attr">default</span>: <span class="number">5</span>,</span><br><span class="line">            <span class="attr">calculable</span>:<span class="literal">true</span>,</span><br><span class="line">            <span class="attr">textStyle</span>:&#123;</span><br><span class="line">              <span class="attr">color</span>: <span class="string">&#x27;#fef420&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">inRange</span>: &#123;</span><br><span class="line">                <span class="attr">color</span>: [<span class="string">&#x27;#fef420&#x27;</span>, <span class="string">&#x27;#df383e&#x27;</span>,<span class="string">&#x27;#379fdf&#x27;</span>],</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">geo</span>: [&#123; <span class="comment">// 地图</span></span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;map&#x27;</span>,  </span><br><span class="line">            <span class="attr">map</span>: name,  <span class="comment">// 地区名字，重要参数</span></span><br><span class="line">            <span class="attr">itemStyle</span>: &#123;</span><br><span class="line">                <span class="attr">areaColor</span>: <span class="string">&quot;#d7bed9&quot;</span>,</span><br><span class="line">                <span class="attr">borderColor</span>: <span class="string">&quot;#111&quot;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">emphasis</span>: &#123;</span><br><span class="line">              <span class="attr">label</span>:&#123;</span><br><span class="line">                <span class="attr">show</span>: <span class="literal">false</span></span><br><span class="line">              &#125;,</span><br><span class="line">              <span class="attr">itemStyle</span>: &#123;</span><br><span class="line">                <span class="attr">areaColor</span>: <span class="string">&quot;#f5d4f8&quot;</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">data</span>: data,  <span class="comment">// 数据，重要参数</span></span><br><span class="line">            <span class="attr">label</span>: &#123;    <span class="comment">// 标签的显示</span></span><br><span class="line">              <span class="attr">normal</span>: &#123; <span class="attr">show</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">              <span class="attr">emphasis</span>: &#123; <span class="attr">show</span>: <span class="literal">true</span> &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;],</span><br><span class="line">          <span class="attr">series</span>: [&#123; <span class="comment">// 散点分布</span></span><br><span class="line">              <span class="attr">roam</span>: <span class="literal">true</span>,</span><br><span class="line">              <span class="attr">type</span>: name === <span class="string">&#x27;china&#x27;</span> ? <span class="string">&quot;heatmap&quot;</span> : <span class="string">&quot;scatter&quot;</span>, <span class="comment">// 中国地图下显示热力图，省级地图下显示精确分布点</span></span><br><span class="line">              <span class="attr">coordinateSystem</span>: <span class="string">&quot;geo&quot;</span>,</span><br><span class="line">              <span class="attr">data</span>: [[<span class="string">&#x27;116.347927&#x27;</span>, <span class="string">&#x27;39.948795&#x27;</span>, <span class="number">100</span>],</span><br><span class="line">                    [<span class="string">&#x27;100.06376&#x27;</span>, <span class="string">&#x27;30.554698&#x27;</span>, <span class="number">75</span>],</span><br><span class="line">                    [<span class="string">&#x27;104.05325&#x27;</span>, <span class="string">&#x27;29.646273&#x27;</span>, <span class="number">50</span>],[<span class="string">&#x27;104.05325&#x27;</span>, <span class="string">&#x27;25.646273&#x27;</span>, <span class="number">25</span>],[<span class="string">&#x27;94.05325&#x27;</span>, <span class="string">&#x27;30.646273&#x27;</span>, <span class="number">1</span>]],</span><br><span class="line">              <span class="attr">blurSize</span>: <span class="number">20</span>,</span><br><span class="line">              <span class="attr">symbolSize</span>: <span class="number">20</span>,</span><br><span class="line">              <span class="attr">symbol</span>: <span class="string">&#x27;arrow&#x27;</span>,  </span><br><span class="line">              <span class="attr">minOpacity</span>: <span class="number">0.1</span>,</span><br><span class="line">              <span class="attr">maxOpacity</span>: <span class="number">1</span>,</span><br><span class="line">          &#125;]</span><br><span class="line">          </span><br><span class="line">        &#125;) </span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123; </span><br><span class="line">           <span class="built_in">this</span>.myChart.hideLoading()</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">        <span class="built_in">this</span>.myChart.on(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="params">params</span> =&gt;</span> &#123; <span class="comment">// 点击函数</span></span><br><span class="line">          name === <span class="string">&#x27;china&#x27;</span> ? <span class="built_in">this</span>.mapfun(params.name) : <span class="built_in">this</span>.mapfun(<span class="string">&#x27;china&#x27;</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>欢迎留言交流  (´▽`ʃ♡ƪ)</p>
]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
      <tags>
        <tag>ECharts</tag>
      </tags>
  </entry>
  <entry>
    <title>Web Worker &amp;&amp; postMessage &amp;&amp; onMessage 使用教程</title>
    <url>/2019/04/21/webworker/</url>
    <content><![CDATA[<p>最近使用 iframe 的时候想要获取 iframe 文档信息的时候遇到了跨域问题，最后使用 postmessage 做父子页面通信解决需求也顺便学习了下 webworker 的使用<br>webWoker 使用依赖 postMessage() 和 onMessage(), 所以先说这两个吧</p>
<h1 id="postMessage-amp-amp-onMessage"><a href="#postMessage-amp-amp-onMessage" class="headerlink" title="postMessage &amp;&amp; onMessage"></a>postMessage &amp;&amp; onMessage</h1><ul>
<li>提供网页文档之间互相发送和接收信息的功能，可用于解决跨域访问的问题</li>
<li>会在所有页面脚本执行完毕之后(包括方法之后或者之前设置的 timeout 事件)再执行</li>
<li>挂载于 window 对象上</li>
</ul>
<h2 id="postMessage-语法：-otherWindow-postMessage-message-targetOrigin-transfer"><a href="#postMessage-语法：-otherWindow-postMessage-message-targetOrigin-transfer" class="headerlink" title="postMessage 语法： otherWindow.postMessage(message, targetOrigin, [transfer])"></a>postMessage 语法： otherWindow.postMessage(message, targetOrigin, [transfer])</h2><p>&emsp;&emsp;message: 发送的数据，不限类型，因为他自己会序列化<br>&emsp;&emsp;targetOrigin：通过窗口的 origin 属性指定哪些窗口能接收到消息事件，其值可以是字符串”*“（表示无限制）或者一个 URI<br>&emsp;&emsp;transfer：可选参数；一个 Transferable 对象([什么是 Transferable[(<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Transferable))%EF%BC%8C%E5%92%8Cmessage">https://developer.mozilla.org/zh-CN/docs/Web/API/Transferable))，和message</a> 同时传递的,对象的所有权将被转移给消息的接收方，而发送一方将不再保有所有权</p>
<h2 id="onMessage-语法"><a href="#onMessage-语法" class="headerlink" title="onMessage 语法"></a>onMessage 语法</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;message&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123; ... &#125;)</span><br><span class="line"><span class="built_in">window</span>.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure>

<h2 id="获取到的-event-对象包含"><a href="#获取到的-event-对象包含" class="headerlink" title="获取到的 event 对象包含"></a>获取到的 event 对象包含</h2><p>&emsp;&emsp;data：接收的数据对象，对应 postMessage 的 message 参数<br>&emsp;&emsp;origin：消息发送方窗口的 origin，字符串由 协议、“://“、域名、“ : 端口号”拼接而成<br>&emsp;&emsp;source：对发送消息的窗口对象的引用</p>
<h2 id="举个小栗子"><a href="#举个小栗子" class="headerlink" title="举个小栗子"></a>举个小栗子</h2><ul>
<li>父页面向子页面传值</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// 在 iframe 加载完毕后，获取 iframe 的 window 对象，调用 postMessage 方法</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>a page<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;b.html&quot;</span> <span class="attr">id</span>=<span class="string">&quot;frame&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> frame = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;frame&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    frame.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      frame.contentWindow.postMessage(&#123; <span class="attr">name</span>: <span class="string">&#x27;a page&#x27;</span> &#125;, <span class="string">&#x27;*&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;;</span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 子页面监听 message 事件设置回调打印 event</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>b page<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.addEventListener(</span></span><br><span class="line"><span class="javascript">      <span class="string">&#x27;message&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="function">(<span class="params">event</span>) =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;this b page&#x27;</span>, event),</span></span><br><span class="line"><span class="javascript">      <span class="literal">false</span></span></span><br><span class="line"><span class="javascript">    );</span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>子页面向父页面传值</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// 父页面监听 message 事件设置回调打印 event</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>a page<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;b.html&quot;</span> <span class="attr">id</span>=<span class="string">&quot;frame&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.addEventListener(</span></span><br><span class="line"><span class="javascript">      <span class="string">&#x27;message&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="function">(<span class="params">event</span>) =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;this a page&#x27;</span>, event),</span></span><br><span class="line"><span class="javascript">      <span class="literal">false</span></span></span><br><span class="line"><span class="javascript">    );</span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 使用 parent 获取 window 对象，调用 postMessage 方法</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>b page<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(parent);</span></span><br><span class="line"><span class="javascript">    parent.postMessage(&#123; <span class="attr">name</span>: <span class="string">&#x27;b page&#x27;</span> &#125;, <span class="string">&#x27;*&#x27;</span>);</span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="Workers"><a href="#Workers" class="headerlink" title="Workers"></a>Workers</h1><ul>
<li>我自己感觉很多比较麻烦耗内存的 js 逻辑操作都可以放在 worker 里，比如轮询服务器状态或者一些很耗时量很大的数据操作用</li>
<li>让脚本在浏览器后台线程中运行</li>
<li>在 worker 内，不能直接操作 DOM 节点，也不能使用 window 对象的默认方法和属性，<a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Functions_and_classes_available_to_workers">window 对象下可用的方法</a></li>
<li>worker 中也能再创建 worker</li>
<li>由于安全限制 Worker 不能读取本地文件，所以脚本必须来自网络，读取本地文件会报错 “Uncaught SecurityError: Failed to create a worker: script at ‘(path)/worker.js’ cannot be accessed from origin ‘null’.”</li>
<li>关于<a href="https://caniuse.com/#search=webworker">兼容性</a></li>
</ul>
<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>在使用 worker 的 js 文件里</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用 Worker() 指定脚本 url 创建一个新的 worker</span></span><br><span class="line"><span class="comment">// 参数就是 Worker 线程所要执行的任务</span></span><br><span class="line"><span class="comment">// Worker 使用 postMessage 和 onMessage 进行通信</span></span><br><span class="line"><span class="keyword">var</span> myWorker = <span class="keyword">new</span> Worker(<span class="string">&#x27;worker.js&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 postMessage() 和 onMessage() 发送和接收数据</span></span><br><span class="line">myWorker.postMessage(<span class="string">&#x27;request&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>在 worker.js 文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 消息响应</span></span><br><span class="line">onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e.data);</span><br><span class="line">  <span class="built_in">console</span>.log(self);</span><br><span class="line">  <span class="comment">// 消息回传</span></span><br><span class="line">  postMessage(workerResult);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="关闭-错误-加载脚本"><a href="#关闭-错误-加载脚本" class="headerlink" title="关闭/错误/加载脚本"></a>关闭/错误/加载脚本</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在 main.js 文件中，强制终止</span></span><br><span class="line">worker.terminate();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 worker 线程中，自己关闭</span></span><br><span class="line">self.close();</span><br><span class="line"></span><br><span class="line"><span class="comment">// error 错误代理</span></span><br><span class="line">worker.onerror(<span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送的数据无法序列化成字符串时，会触发这个事件</span></span><br><span class="line">Worker.onmessageerror(<span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// worker 使用 importScripts() 加载脚本，可以加载多个</span></span><br><span class="line">importScripts(<span class="string">&#x27;script1.js&#x27;</span>, <span class="string">&#x27;script2.js&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="小栗子"><a href="#小栗子" class="headerlink" title="小栗子"></a>小栗子</h2><p>如果你现在没有条件加载网络上的文件，可以使用 URL.createObjectURL 方法建立缓存 URL<br>可以试着运行一下面两个页面感受一下</p>
<p>可以运行一下这个页面，一个普通的 for 循环，因为数字太大运行时会有明显的卡顿</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Test Web worker<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/JavaScript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">for</span>(<span class="keyword">var</span> num=<span class="number">99</span>;num&lt;<span class="number">1000000000</span>;num++)&#123;</span></span><br><span class="line"><span class="javascript">              <span class="built_in">document</span>.getElementById(<span class="string">&quot;numshow&quot;</span>).innerHTML += event.data+<span class="string">&quot;&lt;br/&gt;&quot;</span>;</span></span><br><span class="line"><span class="javascript">          &#125;</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span> <span class="attr">id</span>=<span class="string">&quot;numshow&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个可以使用 URL.createObjectURL 方法建立缓存 URL</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Test Web worker<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/JavaScript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="number">5</span>);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> worker = <span class="keyword">new</span> Worker(URL.createObjectURL(<span class="keyword">new</span> Blob([<span class="string">&quot;(&quot;</span> + webWorker.toString() + <span class="string">&quot;)()&quot;</span>], &#123;<span class="attr">type</span>: <span class="string">&#x27;text/javascript&#x27;</span>&#125;)));</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">          worker.onmessage= <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">              <span class="comment">// 数据打印</span></span></span><br><span class="line"><span class="javascript">              <span class="built_in">console</span>.log(event.data);</span></span><br><span class="line"><span class="javascript">              <span class="built_in">document</span>.getElementById(<span class="string">&quot;numshow&quot;</span>).innerHTML += event.data+<span class="string">&quot;&lt;br/&gt;&quot;</span>;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">              <span class="comment">// 向 worker 线程发送数据</span></span></span><br><span class="line"><span class="javascript">              event.data === <span class="number">1</span> ? worker.postMessage(<span class="string">&#x27;num&#x27;</span>):<span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="javascript">          &#125;;</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">webWorker</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">          <span class="comment">// worker 对象 self</span></span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(self)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">          <span class="comment">// 接收来自主线程的数据</span></span></span><br><span class="line"><span class="javascript">          self.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">              <span class="built_in">console</span>.log(event.data);</span></span><br><span class="line"><span class="javascript">          &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">          <span class="keyword">for</span> (<span class="keyword">var</span> num = <span class="number">1</span>; num &lt; <span class="number">1000000000</span>; num++) &#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">              <span class="comment">// 当 num === 200的时候关闭 worker 线程</span></span></span><br><span class="line"><span class="javascript">              num === <span class="number">200</span> ? (postMessage(<span class="string">&quot;worker关闭&quot;</span>), close()) : postMessage(num**<span class="number">2</span>)</span></span><br><span class="line"><span class="javascript">          &#125;</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span> <span class="attr">id</span>=<span class="string">&quot;numshow&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p>postMessage：MDN <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/postMessage">https://developer.mozilla.org/zh-CN/docs/Web/API/Window/postMessage</a><br>webworker：MDN <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Workers_API/Using_web_workers">https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Workers_API/Using_web_workers</a><br>阮一峰：<a href="http://www.ruanyifeng.com/blog/2018/07/web-worker.html">http://www.ruanyifeng.com/blog/2018/07/web-worker.html</a></p>
]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
      <tags>
        <tag>worker</tag>
      </tags>
  </entry>
  <entry>
    <title>UI和平面设计的区别</title>
    <url>/2018/06/24/%E5%B9%B3%E9%9D%A2&amp;&amp;ui/</url>
    <content><![CDATA[<p>前段时间自告奋勇的给新项目做UI设计，项目包括一个网站一个app还有一个后台，后台没有设计套用以前的模板主要是将就前端也就是我还有我的小伙伴们,总的花费时间共一周左右</p>
<p>作为曾经的一只平面设计狗，这是我UI处女作  哈哈哈哈！！！</p>
<p>在没做前端之前一直觉得平面和UI都是根据客户的需求设计画图嘛也都是平面图也没什么太大的区别，而且UI还不用像平面设计海报那样做一些复杂抓人眼球的效果，毕竟现在的页面为了追求速度用户体验什么的都是扁平化趋于简洁</p>
<p>这次呢是深切感受到了UI和平面的区别</p>
<p>在学习css开始我就知道UI画的图都是需要前端实现的，设计的时候，除了好的创意，还应该考虑到技术上的可行性，就像这次设计页面的时候是自动把自己代入了前端这个角色所以在设计时更多的考虑到css样式布局js的特效数据渲染什么的还有组件模块的复用问题等等，设计方面远不如平面设计那么自由洒脱</p>
<p>大部分平面设计的作品都是以印刷的平面形式表现，这需要设计师去了解各种材料之间的区别以及不同材料所做出来的成品效果的差别，但在设计方面却是比较自由的，在符合主题的情况下怎么好看怎么漂亮怎么抓人眼球怎么来，很多时候平面设计师一个人对接一个客户就能完成一个作品，而ui除了产品客户以外还得对接前端后端需要遵守一系列的项目流程，而最后的成功也是团队协作达成的效果，这也是很大的一个不同点</p>
<p>UI设计的时候除了考虑前端的实现还有最重要的是用户体验和交互，毕竟网页是会”动”起来的，不管是网站还是其他什么软件都是需要用户去操作，这需要去琢磨研究用户的行为，所以好的ui设计不只是画面的美观还要让用户操作起来感觉舒适简单自由</p>
<p>所以总的来讲呢，平面注重视觉创意，UI却是更注重用户交互，两者在视觉传达方面是共通的，但是在难点侧重点方面却是不一样的</p>
<p>欢迎留言交流  (´▽`ʃ♡ƪ)</p>
]]></content>
      <categories>
        <category>Others</category>
      </categories>
      <tags>
        <tag>OTHERS</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云服务器</title>
    <url>/2018/05/13/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<p>新手入门弄了一个阿里云服务器自己学习使用</p>
<p>在官网上点击远程链接出现了终端管理的画面，安装官网的步骤一步一步的在本机尝试远程连接（系统win7），输入ip地址，用户名，点击确定，弹框输密码</p>
<p>然后就告诉我：你的凭据不工作，之前用于链接到***的凭据无法工作，请输入新凭据</p>
<p>之后各种百度，尝试各种方法</p>
<p>可能导致此故障的原因</p>
<p>1、客户端本地网络异常 [出现概率：3%]</p>
<p>这个就…</p>
<p>2、重置实例密码，未重启实例 [出现概率：7%] 找到原因，自己手贱改了密码不知道要重启<br>故障现象：有实例密码修改记录，但无重启实例记录。</p>
<p>可能原因：您修改了实例密码，但是未重启 ECS 实例。</p>
<p>解决方法：</p>
<p>登录云服务器管理控制台。<br>单击左侧导航栏中的 实例。<br>单击页面顶部的地域。<br>选择需要的实例。单击 重启。<br>在弹出的提示框中，选择 重启，单击 确定。</p>
<p>3、防火墙配置异常（Windows 2008&amp;2012）[出现概率：10%]</p>
<p>前提条件：您只有在已授权可关闭防火墙的情况下，才能做该项排查。<br>故障现象：远程无法连接，关闭 防火墙 后连接恢复。<br>解决方法：调整防火墙配置策略，具体操作详见官网：ECS Windows 远程连接之防火墙设置。<br>完成操作后，请再进行远程连接。</p>
<p>4、安全组公网规则 [出现概率：8%]</p>
<p>故障现象：ECS 服务器无法ping通，排查防火墙、网卡 IP 配置无误，回滚系统后仍然无法ping通。<br>可能原因：ECS 实例安全组默认的公网规则被删除。<br>解决方法：重新配置 ECS 实例的安全组公网规则，具体操作详见 ECS实例安全组默认的公网规则被删除导致无法ping通。</p>
<p>5、远程访问端口配置异常 [出现概率：10%]</p>
<p>故障现象：远程无法连接，远程访问端口非默认端口。<br>解决方法：<br>运行注册表，然后查看此文档<a href="https://yq.aliyun.com/articles/33712">https://yq.aliyun.com/articles/33712</a></p>
<p>6、CPU 负载过高 [出现概率：9%]</p>
<p>故障现象：CPU 负载过高导致系统无法进行远程连接。</p>
<p>附上官网关于连接失败的的文档：</p>
<p><a href="https://help.aliyun.com/knowledge_detail/40849.html?spm=a2c4g.11186623.4.1.zfSNDN">https://help.aliyun.com/knowledge_detail/40849.html?spm=a2c4g.11186623.4.1.zfSNDN</a></p>
<p><a href="https://help.aliyun.com/knowledge_detail/50982.html">https://help.aliyun.com/knowledge_detail/50982.html</a></p>
<p>其他楼主遇到的这格问题的一些解决方法，百度搜来大多都是差不多，这个楼主的方法蛮全的</p>
<p><a href="https://blog.csdn.net/sun15732621550/article/details/50444398">https://blog.csdn.net/sun15732621550/article/details/50444398</a></p>
<p>欢迎留言交流  (´▽`ʃ♡ƪ)</p>
]]></content>
      <categories>
        <category>Others</category>
      </categories>
      <tags>
        <tag>server</tag>
      </tags>
  </entry>
  <entry>
    <title>(译) 全面刨析 CSS-in-JS</title>
    <url>/2022/11/27/translation-a-thorough-analysis-of-css-in-js/</url>
    <content><![CDATA[<blockquote>
<ul>
<li>原文地址：<a href="https://css-tricks.com/a-thorough-analysis-of-css-in-js/">A Thorough Analysis of CSS-in-JS</a></li>
<li>原文作者：<a href="https://css-tricks.com/author/andreipfeiffer/">Andrei Pfeiffer</a></li>
<li>译文出自：<a href="https://github.com/xitu/gold-miner">掘金翻译计划</a></li>
<li>本文永久链接：<a href="https://github.com/xitu/gold-miner/blob/master/article/2022/a-thorough-analysis-of-css-in-js.md">https://github.com/xitu/gold-miner/blob/master/article/2022/a-thorough-analysis-of-css-in-js.md</a></li>
<li>译者：<a href="https://github.com/Tong-H">tong-h</a></li>
<li>校对者：</li>
</ul>
</blockquote>
<h1 id="全面刨析-CSS-in-JS"><a href="#全面刨析-CSS-in-JS" class="headerlink" title="全面刨析 CSS-in-JS"></a>全面刨析 CSS-in-JS</h1><p>比选择一个 JavaScript 框架更有挑战的是什么呢？你猜对了：选择一个 CSS-in-JS 方案。为什么？因为现在已经有 <a href="http://michelebertoli.github.io/css-in-js/">50 个以上的库</a>，而且每个库都有独一无二的特色。</p>
<p>我们测试了 <a href="https://github.com/andreipfeiffer/css-in-js/blob/main/README.md#overview">10 个不同的库</a>（排列没有特定的顺序）：<a href="https://github.com/andreipfeiffer/css-in-js/blob/main/README.md#styled-jsx">Styled JSX</a>，<a href="https://github.com/andreipfeiffer/css-in-js/blob/main/README.md#styled-components">styled-components</a>，<a href="https://github.com/andreipfeiffer/css-in-js/blob/main/README.md#emotion">Emotion</a>，<a href="https://github.com/andreipfeiffer/css-in-js/blob/main/README.md#treat">Treat</a>，<a href="https://github.com/andreipfeiffer/css-in-js/blob/main/README.md#typestyle">TypeStyle</a>，<a href="https://github.com/andreipfeiffer/css-in-js/blob/main/README.md#fela">Fela</a>，<a href="https://github.com/andreipfeiffer/css-in-js/blob/main/README.md#stitches">Stitches</a>，<a href="https://github.com/andreipfeiffer/css-in-js/blob/main/README.md#jss">JSS</a>，<a href="https://github.com/andreipfeiffer/css-in-js/blob/main/README.md#goober">Goober</a>，以及 <a href="https://github.com/andreipfeiffer/css-in-js/blob/main/README.md#compiled">Compiled</a>。我们发现，尽管每一个库都提供了一系列不同的功能，但事实上很多功能和其他的库是一样的。</p>
<p>所以比起单独评估每一个库，我们会分析最突出的功能。这可以帮助我们更好的理解，在特定的使用场景下哪一个库最适合。</p>
<p><strong>注意</strong>：在这篇文章里，我们假定你已经熟悉 CSS-in-JS 了。如果你想寻找一篇更基础的文章，可以看下 <a href="https://webdesign.tutsplus.com/articles/an-introduction-to-css-in-js-examples-pros-and-cons--cms-33574">CSS-in-JS 简介</a></p>
<h2 id="常见的-CSS-in-JS-功能"><a href="#常见的-CSS-in-JS-功能" class="headerlink" title="常见的 CSS-in-JS 功能"></a>常见的 CSS-in-JS 功能</h2><p>大多数积极维护的 CSS-in-JS 库都支持以下功能，所以我们可以把这些功能视为事实。</p>
<h3 id="Scoped-CSS"><a href="#Scoped-CSS" class="headerlink" title="Scoped CSS"></a>Scoped CSS</h3><p><strong>CSS 模块</strong>开创的一项技术，所有的 CSS-in-JS 库都会生成独一无二的 CSS class 名。在不影响其他定义于组件之外的样式的情况下的组件样式封装，使其样式只作用于各自的组件。</p>
<p>有了这个内建功能，我们再也不用担心 CSS 类名重名，特性冲突，或者为了想一个整个代码库中独特的类名而耗费时间。</p>
<p>这个功能对基于组件的开发非常宝贵。</p>
<h3 id="SSR-服务端渲染"><a href="#SSR-服务端渲染" class="headerlink" title="SSR (服务端渲染)"></a>SSR (服务端渲染)</h3><p>在单页面应用（SPAs）里，HTTP 服务只提供基础的空白 HTML 页面，所有的渲染都由浏览器执行。相比之下，在服务端渲染可能不是很有用。但任何需要被搜索引擎<strong>解析和索引</strong>的网站或应用都必须有 SSR 页面，而样式也需要在服务端生成。</p>
<p>与适用于静态网站生成器（SSG）的原则一样，页面会与CSS代码在打包时一起预先生成，用作静态 HTML 文件。</p>
<p>好消息是<strong>我们测试过的所有库都支持 SSR</strong>，这使得它们几乎适用于所有类型的项目。</p>
<h3 id="自动添加浏览器引擎前缀"><a href="#自动添加浏览器引擎前缀" class="headerlink" title="自动添加浏览器引擎前缀"></a>自动添加浏览器引擎前缀</h3><p>由于复杂的 <a href="https://www.youtube.com/watch?v=TQ7NqpFMbFs">CSS 标准化流程</a>，新的 CSS 功能可能需要几年时间才能在所有流行的浏览器中使用。在非标准的 CSS 语法前添加<a href="https://developer.mozilla.org/en-US/docs/Glossary/Vendor_Prefix">浏览器引擎前缀</a>是一种使我们提前使用实验性功能的方法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* WebKit 浏览器：Chrome, Safari, most iOS browsers, 等等 */</span></span><br><span class="line">-webkit-<span class="attribute">transition</span>: all <span class="number">1s</span> ease;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Firefox */</span></span><br><span class="line">-moz-<span class="attribute">transition</span>: all <span class="number">1s</span> ease;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Internet Explorer 和 Microsoft Edge */</span></span><br><span class="line">-ms-<span class="attribute">transition</span>: all <span class="number">1s</span> ease;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Opera 的旧 pre-WebKit 版本 */</span></span><br><span class="line">-o-<span class="attribute">transition</span>: all <span class="number">1s</span> ease;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 标准格式 */</span></span><br><span class="line"><span class="attribute">transition</span>: all <span class="number">1s</span> ease; </span><br></pre></td></tr></table></figure>

<p>然而，<a href="https://css-tricks.com/is-vendor-prefixing-dead/">添加浏览器引擎前缀这种方式仍然是问题重重</a>，CSS 工作组打算在未来停止使用这种方式。如果我们想要完全支持那些没有实施标准规范的旧浏览器，那我们需要知道<a href="http://shouldiprefix.com/">哪些功能要求添加浏览器引擎前缀</a>。</p>
<p>幸运的是，有一些工具通过自动生成携带浏览器引擎前缀的 CSS 属性，让我们可以在源代码中使用标准语法。<strong>所有的 CSS-in-JS 库都提供该功能，开箱即用</strong>。</p>
<h3 id="没有内联样式"><a href="#没有内联样式" class="headerlink" title="没有内联样式"></a>没有内联样式</h3><p>一些 CSS-in-JS 库，比如Radium 或 Glamor，将所有样式的定义以内联样式的方式输出。这种技术有巨大的局限性，因为无法通过内联样式来定义伪类、伪元素或者媒体查询。所以，这些库不得不通过添加 DOM 事件监听以及从 JavaScript 中触发样式更新的方式来处理这些功能，基本上是重新创建类似 <code>:hover</code>、 <code>:focus</code> 之类的原生 CSS 功能。</p>
<p>这也是一个普遍的认知，内联样式比 class <a href="https://esbench.com/bench/5908f78199634800a0347e94">性能更差</a>。使用内联样式作为主要的方式为组件定义样式，这通常是<a href="https://reactjs.org/docs/dom-elements.html#style">不鼓励的做法</a> .</p>
<p><strong>目前所有的 CSS-in-JS 库都不再使用内联样式</strong>，而是采用 CSS class 的方式来定义样式。</p>
<h3 id="全面的-CSS-支持"><a href="#全面的-CSS-支持" class="headerlink" title="全面的 CSS 支持"></a>全面的 CSS 支持</h3><p>使用 CSS class 而不是内联样式的结果是，关于 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Reference">CSS 属性</a> 的使用没有限制。在分析期间，我们主要感兴趣的是：</p>
<ul>
<li>伪类和伪元素</li>
<li>媒体查询</li>
<li>CSS 动画</li>
</ul>
<p>*我们解析过的所有库都全面支持所有的 CSS 属性。**</p>
<h2 id="差异化的功能"><a href="#差异化的功能" class="headerlink" title="差异化的功能"></a>差异化的功能</h2><p>这就是变得更有趣的地方。几乎每个库都提供了一套独具特色的功能，在为特定项目选择合适的解决方案时，这些功能会大大的影响我们的决定。一些库开创了一个特别的功能，而其他库可以选择借用甚至改进某些功能。</p>
<h3 id="特定于-React-还是与框架无关？"><a href="#特定于-React-还是与框架无关？" class="headerlink" title="特定于 React 还是与框架无关？"></a>特定于 React 还是与框架无关？</h3><p>CSS-in-JS 在 React 生态圈中更流行，这并不是秘密。 这也是为什么有些库是 <strong>特别为 React 构建</strong>：<a href="https://github.com/andreipfeiffer/css-in-js/blob/main/README.md#styled-jsx"><strong>Styled JSX</strong></a>，<a href="https://github.com/andreipfeiffer/css-in-js/blob/main/README.md#styled-components"><strong>styled-components</strong></a>，以及 <a href="https://github.com/andreipfeiffer/css-in-js/blob/main/README.md#stitches"><strong>Stitches</strong></a>。</p>
<p>但也有很多库是 <strong>无关框架的</strong>，这使得它们可以应用于所有项目： <a href="https://github.com/andreipfeiffer/css-in-js/blob/main/README.md#emotion"><strong>Emotion</strong></a>，<a href="https://github.com/andreipfeiffer/css-in-js/blob/main/README.md#treat"><strong>Treat</strong></a>，<a href="https://github.com/andreipfeiffer/css-in-js/blob/main/README.md#typestyle"><strong>TypeStyle</strong></a>，<a href="https://github.com/andreipfeiffer/css-in-js/blob/main/README.md#fela"><strong>Fela</strong></a>，<a href="https://github.com/andreipfeiffer/css-in-js/blob/main/README.md#jss"><strong>JSS</strong></a> 或 <a href="https://github.com/andreipfeiffer/css-in-js/blob/main/README.md#goober"><strong>Goober</strong></a>。</p>
<p>如果我们需要支持原生 JavaScript 代码或者其他非 React 的框架，那决定就很简单：我们应该选择一个无关框架的库。但针对 React 应用，我们有更广泛的选择，那做决定就比较困难了。那就让我们来探索一下其他标准吧。</p>
<h3 id="Styles-Component-co-location"><a href="#Styles-Component-co-location" class="headerlink" title="Styles/Component co-location"></a>Styles/Component co-location</h3><p>跟随组件定义样式是非常便利的功能，这样就不需要在两个不同的文件中反复切换：包含样式的 <code>.css</code> 或 <code>.less</code> / <code>.scss</code> 文件，与包含指令和行为的组件文件。</p>
<p><a href="https://reactnative.dev/docs/stylesheet">React Native StyleSheets</a>，<a href="https://vuejs.org/v2/guide/single-file-components.html">Vue.js SFCs</a>，或者 <a href="https://angular.io/guide/component-styles">Angular Components</a> 默认支持样式的共同定位，不论是开发还是维护阶段都能真正从中受益。我们依然可以选择将样式提取到一个单独的文件中，以防我们觉得它们掩盖了代码的其他部分。</p>
<p><img src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/05/aKsPahlPZ8qr6R8aVCancNsC_LOuKlcpBo-Ys44a1ya3QDvoLabbiBTYf36xX90hAfgMxgvBjMxxuBgIGnzH-_NId-71NfK7hh-ZFBJizZF6l3A4sLgb2vyYKgwnod86YBoLsE4.png?resize=800,589&ssl=1"></p>
<p>几乎所有的 CSS-in-JS 库都支持样式的共同定位。我们遇到的唯一一个例外是 <a href="https://github.com/andreipfeiffer/css-in-js/blob/main/README.md#treat"><strong>Treat</strong></a>，类似于 CSS Modules 的工作原理，它要求我们在一个单独的 <code>.treat.ts</code> 文件中定义样式。</p>
<h3 id="样式定义的语法"><a href="#样式定义的语法" class="headerlink" title="样式定义的语法"></a>样式定义的语法</h3><p>我们可以用两种不同的方式来定义我们的样式。有些库只支持一种方法，而有些库则相当灵活，同时支持这两种方法。</p>
<h4 id="标签模板语法"><a href="#标签模板语法" class="headerlink" title="标签模板语法"></a>标签模板语法</h4><p><strong>标签模板</strong>语法让我们可以将样式定义为标准 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals">ES 模板字面量</a>内的一串普通 CSS 代码。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将 &quot;css &quot; 视作一个通用的 CSS-in-JS 库的 API</span></span><br><span class="line"><span class="keyword">const</span> heading = css`<span class="css"></span></span><br><span class="line"><span class="css">  <span class="attribute">font-size</span>: <span class="number">2em</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">color</span>: </span><span class="subst">$&#123;myTheme.color&#125;</span><span class="css">;</span></span><br><span class="line"><span class="css">`</span>;</span><br></pre></td></tr></table></figure>

<p>我们可以发现：</p>
<ul>
<li>CSS 属性就像普通的 CSS 一样用 kebab-case （短横线命名）编写。</li>
<li>可以对 JavaScript 值进行插值替换。</li>
<li>我们可以很容易地迁移现有的CSS代码，而不需要重写它。</li>
</ul>
<p>需要记住：</p>
<ul>
<li>为了获得<strong>语法高亮和</strong>代码提示**，还需要一个额外的编辑器插件。这个插件通常可用于流行的编辑器，如VSCode、WebStorm 等等。</li>
<li>由于最终的代码必须由 JavaScript 执行，所以样式定义需要被<strong>解析并转换为 JavaScript 代码</strong>。运行时或者构建时都可以完成，这会在包大小或计算上产生少量的开销。</li>
</ul>
<h4 id="样式对象语法"><a href="#样式对象语法" class="headerlink" title="样式对象语法"></a>样式对象语法</h4><p><strong>样式对象</strong> 语法使我们可以像定义普通 JavaScript 对象一样定义样式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将 &quot;css &quot; 视作一个通用的 CSS-in-JS 库的 API</span></span><br><span class="line"><span class="keyword">const</span> heading = css(&#123;</span><br><span class="line">  <span class="attr">fontSize</span>: <span class="string">&quot;2em&quot;</span>,</span><br><span class="line">  <span class="attr">color</span>: myTheme.color,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>我们可以发现：</p>
<ul>
<li>CSS属性用 camel-case （驼峰命令）书写，字符串值必须用引号包裹。</li>
<li>JavaScript 值可以像预期的那样被引用。</li>
<li><strong>样式</strong>定义的语法有点差异，感觉好像不是在写 CSS，但又与CSS中的属性名和值相同（不要被这个吓到，你很快就会习惯的）。</li>
<li>迁移现有的 CSS 需要用这种新的语法重写。</li>
</ul>
<p>需要记住：</p>
<ul>
<li><strong>语法高亮</strong> 是开箱即用的功能，因为我们实际上是在写 JavaScript 代码.</li>
<li>*为了<strong>代码补全</strong>功能，该库必须装载 CSS 类型定义，其中大部分是扩展了通用的类型包 <a href="https://www.npmjs.com/package/csstype">CSSType</a>。</li>
<li>因为样式已经是用 JavaScript 写好了，所以不需要额外的解析或转换。</li>
</ul>
<table>
<thead>
<tr>
<th>库</th>
<th>标签模板</th>
<th>样式对象</th>
</tr>
</thead>
<tbody><tr>
<td>styled-components</td>
<td>✅</td>
<td>✅</td>
</tr>
<tr>
<td>Emotion</td>
<td>✅</td>
<td>✅</td>
</tr>
<tr>
<td>Goober</td>
<td>✅</td>
<td>✅</td>
</tr>
<tr>
<td>Compiled</td>
<td>✅</td>
<td>✅</td>
</tr>
<tr>
<td>Fela</td>
<td>🟠</td>
<td>✅</td>
</tr>
<tr>
<td>JSS</td>
<td>🟠</td>
<td>✅</td>
</tr>
<tr>
<td>Treat</td>
<td>❌</td>
<td>✅</td>
</tr>
<tr>
<td>TypeStyle</td>
<td>❌</td>
<td>✅</td>
</tr>
<tr>
<td>Stitches</td>
<td>❌</td>
<td>✅</td>
</tr>
<tr>
<td>Styled JSX</td>
<td>✅</td>
<td>❌</td>
</tr>
</tbody></table>
<blockquote>
<p>✅  全面支持         🟠  插件要求          ❌  不支持</p>
</blockquote>
<h3 id="样式应用方式"><a href="#样式应用方式" class="headerlink" title="样式应用方式"></a>样式应用方式</h3><p>现在我们知道有哪些可用的样式定义选项，让我们看看如何将它们应用于我们的组件和元素。</p>
<h4 id="使用-class-属性-className-prop"><a href="#使用-class-属性-className-prop" class="headerlink" title="使用 class 属性 / className prop"></a>使用 class 属性 / className prop</h4><p>最简单和最直观的应用样式的方式是将它们与 class 名关联。支持这种方法的库提供一个API，返回生成的唯一的 class 名。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将 &quot;css &quot; 视作一个通用的 CSS-in-JS 库的 API</span></span><br><span class="line"><span class="keyword">const</span> heading_style = css(&#123;</span><br><span class="line">  <span class="attr">color</span>: <span class="string">&quot;blue&quot;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><code>heading_style</code> 包含一串自动生成的 CSS class 名，接下来我们可以把 <code>heading_style</code> 应用于我们的 HTML 元素。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 原生 DOM 使用方式</span></span><br><span class="line"><span class="keyword">const</span> heading = <span class="string">`&lt;h1 class=&quot;<span class="subst">$&#123;heading_style&#125;</span>&quot;&gt;Title&lt;/h1&gt;`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 特定于 React 的 JSX 使用方式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Heading</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">className</span>=<span class="string">&#123;heading_style&#125;</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>正如我们所看到的，这种方法与传统的样式使用方法非常相似：首先我们定义样式，然后在我们需要的地方使用。这对于以前写过 CSS 的人来说，学习曲线很低。</p>
<h4 id="使用一个-lt-Styled-gt-组件"><a href="#使用一个-lt-Styled-gt-组件" class="headerlink" title="使用一个 &lt;Styled /&gt; 组件"></a>使用一个 <code>&lt;Styled /&gt;</code> 组件</h4><p>另一种流行的方法是由 <a href="https://styled-components.com/docs/basics#getting-started">styled-components</a> 库首先引入的（并以其命名），它采取了一种不同的方法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将 &quot;styled &quot; 视作一个通用的 CSS-in-JS 库的 API</span></span><br><span class="line"><span class="keyword">const</span> Heading = styled(<span class="string">&quot;h1&quot;</span>)(&#123;</span><br><span class="line">  <span class="attr">color</span>: <span class="string">&quot;blue&quot;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>比起单独定义样式并将它们添加到现有的组件或 HTML 元素上，我们倾向于通过指定要创建的元素类型和要添加的样式来使用一个特殊的 API。</p>
<p>这个 API 将 <strong>返回一个已经应用了类名的新组件</strong>，我们可以像渲染我们的应用程序中的其他组件一样进行渲染。这基本上就删除了组件和其样式之间的映射关系。</p>
<h4 id="使用-css-prop"><a href="#使用-css-prop" class="headerlink" title="使用 css prop"></a>使用 <code>css</code> prop</h4><p>一种较新的方法，由 <a href="https://emotion.sh/docs/css-prop">Emotion</a> 推广，使我们可以将样式传递给一个特殊的 prop，通常名为 <code>css</code>。这个 API 只适用于基于 JSX 的语法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 针对于 React JSX 语法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Heading</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">css</span>=<span class="string">&#123;&#123;</span> <span class="attr">color:</span> &quot;<span class="attr">blue</span>&quot; &#125;&#125;&gt;</span>Title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种方法有一定的人性化优势，因为我们不需要从库导入和使用任何特殊的API。我们可以简单地将样式传递给这个 <code>css</code> prop，就像我们使用内联样式一样。</p>
<p>请注意，这个自定义的 <code>css</code> prop 不是一个标准的 HTML 属性，需要通过库提供的单独的 Babel 插件来启用和支持。</p>
<table>
<thead>
<tr>
<th>库</th>
<th>标签模板</th>
<th>对象样式</th>
</tr>
</thead>
<tbody><tr>
<td>styled-components</td>
<td>✅</td>
<td>✅</td>
</tr>
<tr>
<td>Emotion</td>
<td>✅</td>
<td>✅</td>
</tr>
<tr>
<td>Goober</td>
<td>✅</td>
<td>✅</td>
</tr>
<tr>
<td>Compiled</td>
<td>✅</td>
<td>✅</td>
</tr>
<tr>
<td>Fela</td>
<td>🟠</td>
<td>✅</td>
</tr>
<tr>
<td>JSS</td>
<td>🟠</td>
<td>✅</td>
</tr>
<tr>
<td>Treat</td>
<td>❌</td>
<td>✅</td>
</tr>
<tr>
<td>TypeStyle</td>
<td>❌</td>
<td>✅</td>
</tr>
<tr>
<td>Stitches</td>
<td>❌</td>
<td>✅</td>
</tr>
<tr>
<td>Styled JSX</td>
<td>✅</td>
<td>❌</td>
</tr>
</tbody></table>
<blockquote>
<p>✅  全面支持         🟠  插件要求          ❌  不支持</p>
</blockquote>
<table>
<thead>
<tr>
<th>库</th>
<th><code>className</code></th>
<th><code>&lt;Styled /&gt;</code></th>
<th><code>css</code> prop</th>
</tr>
</thead>
<tbody><tr>
<td>styled-components</td>
<td>❌</td>
<td>✅</td>
<td>✅</td>
</tr>
<tr>
<td>Emotion</td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
</tr>
<tr>
<td>Goober</td>
<td>✅</td>
<td>✅</td>
<td>🟠 2</td>
</tr>
<tr>
<td>Compiled</td>
<td>🟠 1</td>
<td>✅</td>
<td>✅</td>
</tr>
<tr>
<td>Fela</td>
<td>✅</td>
<td>❌</td>
<td>❌</td>
</tr>
<tr>
<td>JSS</td>
<td>✅</td>
<td>🟠 2</td>
<td>❌</td>
</tr>
<tr>
<td>Treat</td>
<td>✅</td>
<td>❌</td>
<td>❌</td>
</tr>
<tr>
<td>TypeStyle</td>
<td>✅</td>
<td>❌</td>
<td>❌</td>
</tr>
<tr>
<td>Stitches</td>
<td>✅</td>
<td>✅</td>
<td>🟠 1</td>
</tr>
<tr>
<td>Styled JSX</td>
<td>✅</td>
<td>❌</td>
<td>❌</td>
</tr>
</tbody></table>
<blockquote>
<p>✅  全面支持         🟠 1  支持受限          🟠 2  插件要求          ❌  不支持</p>
</blockquote>
<h3 id="样式输出"><a href="#样式输出" class="headerlink" title="样式输出"></a>样式输出</h3><p>这里有两种互斥的方法可以生成并向浏览器发送样式。这两种方法都有好处和坏处，所以让我们详细分析一下。</p>
<h4 id="lt-style-gt-DOM-样式注入"><a href="#lt-style-gt-DOM-样式注入" class="headerlink" title="&lt;style&gt;- DOM 样式注入"></a><code>&lt;style&gt;</code>- DOM 样式注入</h4><p>大部分 CSS-in-JS 库会在运行时向 DOM 注入样式，使用一个或多个 <a href="https://github.com/andreipfeiffer/css-in-js/blob/main/README.md#1-using-style-tags"><code>&lt;style&gt;</code> 标签</a>，或使用 <a href="https://github.com/andreipfeiffer/css-in-js/blob/main/README.md#2-using-cssstylesheet-api"><code>CSSStyleSheet</code></a> API 直接在 CSSOM 中管理样式。在 SSR 中，样式总是作为 <code>&lt;style&gt;</code> 标签添加在需要渲染的 HTML 页面的 <code>&lt;head&gt;</code> 中。</p>
<p>这种方法有几个<strong>关键优势</strong>和<strong>首选用例</strong>：</p>
<ol>
<li>在 SSR 中内嵌样式可以 <a href="https://github.com/andreipfeiffer/css-in-js/blob/main/README.md#2-style-tag-injected-styles">提高网页加载性能指标</a>，比如 <strong>FCP</strong> (First Contentful Paint)，因为从服务器上获取单独的 <code>.css</code> 文件不会阻碍渲染。</li>
<li>SSR 项目中，通过内联初始 HTML 渲染所需的样式，达到了开箱即用的<a href="https://github.com/andreipfeiffer/css-in-js/blob/main/README.md#-critical-css-extraction"><strong>关键 CSS 提取</strong></a>，。它还删除了动态样式，从而通过下载更少的代码进一步改善加载时间。</li>
<li><strong>动态样式</strong>通常更容易实现，这种方法似乎更适用于高交互性的用户界面和<strong>单页应用（SPA）</strong>，因为 SPA 应用中的大多数组件都是**客户端渲染。</li>
</ol>
<p>弊端一般与总包大小有关：</p>
<ul>
<li>需要一个额外的<strong>运行时库</strong>来处理浏览器中的动态样式。</li>
<li>内联的 SSR 样式不会被直接缓存，它们需要在每次请求时被传送到浏览器，因为它们属于服务器渲染的 <code>.html</code> 文件的一部分。</li>
<li>在 <code>.html</code> 页面中内联的 SSR 样式将在 <a href="https://developers.google.com/web/updates/2019/02/rendering-on-the-web#rehydration-issues">rehydration</a> 过程中作为 JavaScript 资源再次发送到浏览器。</li>
</ul>
<h4 id="静态-css-文件提取"><a href="#静态-css-文件提取" class="headerlink" title="静态 .css 文件提取"></a>静态 <code>.css</code> 文件提取</h4><p>有极少数的库采取了完全不同的方法。相比于往 DOM 中注入样式，他们选择去生成静态的 <code>.css</code> 文件。从加载性能的角度来看，优缺点与编写普通 CSS 文件是一样的。</p>
<p>1.由于不再需要额外的运行时代码或 Rehydration 开销，所以<strong>传输的代码总量要小很多</strong>。<br>2.静态的 <code>.css</code> 文件受益于浏览器内部开箱即用的缓存，因此同一页面的后续请求不会再次去服务器请求该样式。<br>3.这种方法对 <strong>SSR 页面</strong>或<strong>静态生成的页面</strong>似乎更有帮助，因为它们受益于默认的缓存机制。</p>
<p>然而，有一些重要的弊端我们需要注意一下：</p>
<ul>
<li>和前面提到的几种方法相比，使用这个方法，在没有缓存的情况下第一次访问该页面会有较长的 <a href="https://github.com/andreipfeiffer/css-in-js/blob/main/README.md#1-css-file-extraction"><strong>FCP</strong></a>。因此，是为<strong>首次访问的用户</strong>还是为<strong>再次访问的用户</strong>进行优化，这个因素对是否选择这种方法起到至关重要的作用。</li>
<li>所有会在页面上使用的动态样式都将包含在预先生成的包中，这可能会导致前台需要加载更大的 <code>.css</code> 资源。</li>
</ul>
<p>我们测试过的所有库，几乎都实施了第一种方法，将样式注入到 DOM 中，其中唯一支持静态 <code>.css</code> 文件提取的库是 <a href="https://github.com/andreipfeiffer/css-in-js/blob/main/README.md#treat">Treat</a>。也有些其他的支持这个功能的库，比如 <a href="https://github.com/andreipfeiffer/css-in-js/blob/main/README.md#astroturf">Astroturf</a>，<a href="https://github.com/andreipfeiffer/css-in-js/blob/main/README.md#linaria">Linaria</a>，和没有包含在我们最后分析中的 <a href="https://github.com/andreipfeiffer/css-in-js/blob/main/README.md#style9">style9</a>。</p>
<h3 id="Atomic-CSS（原子化-CSS）"><a href="#Atomic-CSS（原子化-CSS）" class="headerlink" title="Atomic CSS（原子化 CSS）"></a>Atomic CSS（原子化 CSS）</h3><p>有些库为了进一步优化，实现了一种技术叫做 <a href="https://sebastienlorber.com/atomic-css-in-js"><strong>Atomic CSS-in-JS（原子化 CSS）</strong></a>，其灵感来自 <a href="https://tachyons.io/">Tachyons</a> 或 <a href="https://tailwindcss.com/">Tailwind</a>这样的框架。</p>
<p>相比于为某个的标签定义一个包含所有属性的 CSS class，Atomic CSS 为每一个的 CSS 键值对生成一个唯一的 CSS class。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 非 Atomic CSS class */</span></span><br><span class="line">._wqdGktJ &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">1em</span> <span class="number">2em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Atomic CSS class */</span></span><br><span class="line">._ktJqdG &#123; <span class="attribute">color</span>: blue; &#125;</span><br><span class="line">._garIHZ &#123; <span class="attribute">display</span>: block; &#125;</span><br><span class="line"><span class="comment">/* 简写的属性通常会被展开 */</span></span><br><span class="line">._kZbibd &#123; <span class="attribute">padding-right</span>: <span class="number">2em</span>; &#125;</span><br><span class="line">._jcgYzk &#123; <span class="attribute">padding-left</span>: <span class="number">2em</span>; &#125;</span><br><span class="line">._ekAjen &#123; <span class="attribute">padding-bottom</span>: <span class="number">1em</span>; &#125;</span><br><span class="line">._ibmHGN &#123; <span class="attribute">padding-top</span>: <span class="number">1em</span>; &#125;</span><br></pre></td></tr></table></figure>

<p>每一个单独的 CSS class 都可以在代码库任何地方复用，这大大提高了复用率。</p>
<p>理论上，这个方法很适合大型应用。为什么？因为整个应用所需的 CSS 属性是有限的，所以增长规模是<strong>对数型</strong>，而非线性。因此 Atomic CSS 比非 Atomic CSS 输出的 CSS 代码更少。</p>
<p><img src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/05/kwyuFPAdFlkMaYo7vYFufdUG3WP4mp7_bbAsQnU7sVCnGH31dDmSgYp5KHqX4tQQR60KfzWV890kBXDPC68H4rLuYvMeVEhItg_oBFt59mCJmsN8giiB6HogBD9F7h6p2aMbs7Q.png?resize=800,449&ssl=1"></p>
<p>但是这里有个隐患：单独的 class 名必须应用于每一个需要它们的元素，这会导致 HTML 文件更大些：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 非 Atomic CSS class --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;_wqdGktJ&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Atomic CSS class --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;_ktJqdG _garIHZ _kZbibd _jcgYzk _ekAjen _ibmHGN&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>所以基本上，我们是把代码从 CSS 转移到 HTML 。由此产生的大小差异取决于太多方面，我们无法得出一个明确的结论。但总的来说，Atomic CSS <strong>应该会减少</strong>传输给浏览器的总字节量。</p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>CSS-in-JS 将极大地改变我们编写 CSS 的方式，可以提供许多好处以及改善我们的整体开发体验。</p>
<p>然而，选择采用哪个库并不简单，所有的选择都伴随着许多技术上的妥协。为了识别最适合我们需求的库，我们必须了解项目要求以及库的使用情况：</p>
<ul>
<li><strong>我们是否使用 React？</strong> React 应用有更广泛的选择，而非 React 的解决方案需要使用无关框架的库。</li>
<li><strong>我们是否在处理一个高互动性的应用，并在客户端进行渲染？</strong> 在这种情况下，我们可能不是很关心 Rehydration 的开销以及静态的 <code>.css</code> 文件的提取。</li>
<li><strong>我们是否要用 SSR 建立一个动态网站？</strong> 那么，静态 <code>.css</code> 文件提取可能是一个更好的选择，因为它可以让我们从缓存中受益。</li>
<li><strong>我们需要迁移现有的CSS代码吗？</strong> 使用支持标签模板的库会使迁移更快更容易。</li>
<li><strong>我们要优化首次访问或再次访问的用户体验吗？</strong> 通过资源缓存，静态的 <code>.css</code> 文件为再次访问的用户提供最好的体验，但首次访问需要一个额外的 HTTP 请求，这会阻碍页面渲染。</li>
<li>*<strong>我们是否频繁更新样式？</strong> 如果我们频繁更新样式，导致缓存失效，那么 <code>.css</code> 文件缓存就毫无价值。</li>
<li><strong>我们是否重复使用大量的样式和组件？</strong> 如果我们在代码库中重复使用大量的 CSS 属性，Atomic CSS 将大放异彩。</li>
</ul>
<p>回答上述问题可以帮助我们明确，在选择 CSS-in-JS 的解决方案时应该关注哪些功能，使我们能够做出更有根据的决定。</p>
<blockquote>
<p>如果发现译文存在错误或其他需要改进的地方，欢迎到 <a href="https://github.com/xitu/gold-miner">掘金翻译计划</a> 对译文进行修改并 PR，也可获得相应奖励积分。文章开头的 <strong>本文永久链接</strong> 即为本文在 GitHub 上的 MarkDown 链接。</p>
</blockquote>
<hr>
<blockquote>
<p><a href="https://github.com/xitu/gold-miner">掘金翻译计划</a> 是一个翻译优质互联网技术文章的社区，文章来源为 <a href="https://juejin.im/">掘金</a> 上的英文分享文章。内容覆盖 <a href="https://github.com/xitu/gold-miner#android">Android</a>、<a href="https://github.com/xitu/gold-miner#ios">iOS</a>、<a href="https://github.com/xitu/gold-miner#%E5%89%8D%E7%AB%AF">前端</a>、<a href="https://github.com/xitu/gold-miner#%E5%90%8E%E7%AB%AF">后端</a>、<a href="https://github.com/xitu/gold-miner#%E5%8C%BA%E5%9D%97%E9%93%BE">区块链</a>、<a href="https://github.com/xitu/gold-miner#%E4%BA%A7%E5%93%81">产品</a>、<a href="https://github.com/xitu/gold-miner#%E8%AE%BE%E8%AE%A1">设计</a>、<a href="https://github.com/xitu/gold-miner#%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD">人工智能</a>等领域，想要查看更多优质译文请持续关注 <a href="https://github.com/xitu/gold-miner">掘金翻译计划</a>、<a href="http://weibo.com/juejinfanyi">官方微博</a>、<a href="https://zhuanlan.zhihu.com/juejinfanyi">知乎专栏</a>。</p>
</blockquote>
]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
      <tags>
        <tag>translation</tag>
      </tags>
  </entry>
  <entry>
    <title>(译)面向具有 React 开发经验的开发者介绍 Svelte</title>
    <url>/2021/07/06/translation-svelte-for-the-experienced-react-dev/</url>
    <content><![CDATA[<blockquote>
<ul>
<li>原文地址：<a href="https://css-tricks.com/svelte-for-the-experienced-react-dev/">Svelte for the Experienced React Dev</a></li>
<li>原文作者：<a href="https://css-tricks.com/author/adam-rackis/">Adam Rackis</a></li>
<li>译文出自：<a href="https://github.com/xitu/gold-miner">掘金翻译计划</a></li>
<li>本文永久链接：<a href="https://github.com/xitu/gold-miner/blob/master/article/2021/svelte-for-the-experienced-react-dev.md">https://github.com/xitu/gold-miner/blob/master/article/2021/svelte-for-the-experienced-react-dev.md</a></li>
<li>译者：<a href="https://github.com/Tong-H">tong-h</a></li>
<li>校对者：<a href="https://github.com/liyaxuanliyaxuan">liyaxuanliyaxuan</a>、<a href="https://github.com/CarlosChenN">CarlosChenN</a>、<a href="https://github.com/PassionPenguin">霜羽 Hoarfroster</a></li>
</ul>
</blockquote>
<h1 id="面向具有-React-开发经验的开发者介绍-Svelte"><a href="#面向具有-React-开发经验的开发者介绍-Svelte" class="headerlink" title="面向具有 React 开发经验的开发者介绍 Svelte"></a>面向具有 React 开发经验的开发者介绍 Svelte</h1><p>这篇文章将从富有 React 开发经验的开发者的角度快速的介绍 Sevlte。首先我会做一个概览，然后重点关注 state 管理和 DOM 交互能力等等。我打算把进度加快一点，这样就能覆盖更多的话题。总之，希望能引起你对 Svelte 的兴趣。</p>
<p>关于对 Svelte 的介绍，没有任何博客可以和官方<a href="https://svelte.dev/tutorial/basics">教程</a>和<a href="https://svelte.dev/docs">文档</a>相比。</p>
<h2 id="“Hello-World-”-Svelte-风格"><a href="#“Hello-World-”-Svelte-风格" class="headerlink" title="“Hello, World!” Svelte 风格"></a>“Hello, World!” Svelte 风格</h2><p>让我们先快速浏览一遍 Svelte 的组件风格</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  let number = 0;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">  h1 &#123;</span><br><span class="line">    color: blue;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;Value: &#123;number&#125;&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;button on:click=&#123;() =&gt; number++&#125;&gt;Increment&lt;/button&gt;</span><br><span class="line">&lt;button on:click=&#123;() =&gt; number--&#125;&gt;Decrement&lt;/button&gt; </span><br></pre></td></tr></table></figure>

<p>这个内容被存放在 <code>.svelte</code> 文件中，通过 <a href="https://github.com/sveltejs/rollup-plugin-svelte">Rollup</a> 或 <a href="https://github.com/sveltejs/svelte-loader">webpack</a> 插件加工后生成 Svelte 组件。我们可以通过一些小片段了解。</p>
<p>首先，我们添加一个 <code>&lt;script&gt;</code> 标签存放所有我们需要的 state。</p>
<p>我们也可以添加一个 <code>&lt;style&gt;</code> 标签存放所有我们需要的 CSS。这些样式 <strong>只作用于这个组件</strong>，所以 <code>&lt;h1&gt;</code> 元素在<strong>这个</strong> 组件中将会是蓝色的。是的，被限制作用域的样式内置于 Svelte，不需要外部依赖。在 React 中，想要达到这样受限制的样式，你需要使用第三方插件类似 <a href="https://github.com/css-modules/css-modules">css-modules</a>, <a href="https://styled-components.com/">styled-components</a>, 或者其他的 (有几十种，甚至上百种选择).</p>
<p>接下来是一些 html 标记，像你预期的，你将需要学习类似 <code>&#123;#if&#125;</code>、<code>&#123;#each&#125;</code> 等 html 捆绑方法。相较于在 React 中，一切皆 JavaScript 的概念而言，这类特殊领域的语言功能可能看上去像是一个退步。但有几件事值得注意，Svelte 允许你在这些捆绑中放入任意的 JavaScript 代码。所以类似下面这类代码是完全有效的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;#if childSubjects?.length&#125;</span><br></pre></td></tr></table></figure>

<p>如果你之前是使用 Knockout 或者 Ember，但现在使用并且忠于 React，那么这可能会令你感到惊喜。</p>
<p>还有，Svelte 处理组件的方法和 React 完全不同。只要一个组件的状态或者父组件中的任何地方(除非你缓存了)发生了改变，React 会重新运行所有的组件。这可能会导致效率低下，这也是为什么 React 会使用 <code>useCallback</code> 和 <code>useMemo</code> 来防止额外的重新计算数据。</p>
<p>在另一方面，Svelte 会分析你的模板，并且在相关的状态改变时创建目标 DOM 的更新代码。在上面的组件中，Svelte 将会看到 <code>number</code>  在哪里改变，然后在变更完成后添加代码去更新 <code>&lt;h1&gt;</code>的内容，这表示你不需要担心函数或者对象的缓存。事实上，你甚至不需要担心副作用的依赖列表，我们稍后会讨论这个问题。</p>
<p>但是我们先谈论……</p>
<h2 id="State-管理"><a href="#State-管理" class="headerlink" title="State 管理"></a>State 管理</h2><p>在 React 中，当我们需要管理 state 的时候，我们使用 <code>useState</code> hook。我们向它提供一个初始值，然后得到一个包含当前值和用于设置新值的函数的元组。看起来可能是这样： </p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [number, setNumber] = useState(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Value: &#123;number&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setNumber(n =&gt; n + 1)&#125;&gt;Increment<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setNumber(n =&gt; n - 1)&#125;&gt;Decrement<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>setNumber</code>函数可以传递到任何地方，比如子组件等。</p>
<p>这个在 Svelte 中会简单点。我们可以创建一个变量，在需要时更新它。 Svelte 的<a href="https://en.wikipedia.org/wiki/Ahead-of-time_compilation">提前编译</a>(和 React 即时更新不同)将会追踪变量更新的脚步，然后推动 DOM 更新。和上面一样简单的例子:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">let</span> number = <span class="number">0</span>;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Value: &#123;number&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">on:click</span>=<span class="string">&#123;()</span> =&gt;</span> number++&#125;&gt;Increment<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">on:click</span>=<span class="string">&#123;()</span> =&gt;</span> number--&#125;&gt;Decrement<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p> 另一个需要注意的是，Svelte 不需要 JSX 那样的单独的包裹元素，也没有 React 片段语法 <code>&lt;&gt;&lt;/&gt;</code> 的等价物。</p>
<p>但如果我们想要传递一个更新函数给子组件呢？使它能更新这块的状态，就像我们用 React 做的那样，我们可以写一个更新函数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  import Component3a from &quot;./Component3a.svelte&quot;;</span><br><span class="line">        </span><br><span class="line">  let number = 0;</span><br><span class="line">  const setNumber = cb =&gt; number = cb(number);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;Value: &#123;number&#125;&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;button on:click=&#123;() =&gt; setNumber(val =&gt; val + 1)&#125;&gt;Increment&lt;/button&gt;</span><br><span class="line">&lt;button on:click=&#123;() =&gt; setNumber(val =&gt; val - 1)&#125;&gt;Decrement&lt;/button&gt;</span><br></pre></td></tr></table></figure>

<p>现在，我们可以把这个更新函数传递到任何我们需要的地方，或者继续期待一个更自动化的解决方案。</p>
<h3 id="Reducer-和-store"><a href="#Reducer-和-store" class="headerlink" title="Reducer 和 store"></a>Reducer 和 store</h3><p>React 还有 <code>useReducer</code> hook，让我们可以塑造更复杂的状态。我们提供一个 reducer 函数，然后得到我们当前的值，以及一个 dispatch 函数让我们可以用一个给定的参数去调用 reducer，从而触发一个状态更新，不管 reducer 返回的是什么。我们上面的计数器例子可能看起来会是这样：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useReducer &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reducer</span>(<span class="params">currentValue, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (action) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;INC&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> currentValue + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;DEC&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> currentValue - <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [number, dispatch] = useReducer(reducer, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Value: &#123;number&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(&quot;INC&quot;)&#125;&gt;Increment<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(&quot;DEC&quot;)&#125;&gt;Decrement<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Svelte 没有类似的功能，但是它有一个称为 <strong>store</strong> 的模块。最简单的是 writable store，是持一个值的 object。想要设置一个新值，你可以调用 store 上的 <code>set</code> 方法并传递一个新值，或者调用 update，传入一个回调函数，这个函数接受当前值并且返回新值(和 React 的 <code>useState</code>一样).</p>
<p>在需要时读取 store 的当前值，可以调用<a href="https://svelte.dev/docs#get"><code>get</code> 函数</a>，它会返回当前值。Store 也有一个 subscribe 函数，我们可以传入一个回调函数，在值改变时被执行。</p>
<p>Svelte 是简洁轻量的，其中有一些不错的语法快捷方式。如果你在一个组件内部，你可以给 store 加一个 $ 前缀用于读取其值，或者通过直接赋值去更新值。这是上面的计数器例子，使用了一个 store，以及一些额外的副作用日志打印用于展示 subscribe 是如何工作的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  import &#123; writable, derived &#125; from &quot;svelte/store&quot;;</span><br><span class="line">        </span><br><span class="line">  let writableStore = writable(0);</span><br><span class="line">  let doubleValue = derived(writableStore, $val =&gt; $val * 2);</span><br><span class="line">        </span><br><span class="line">  writableStore.subscribe(val =&gt; console.log(&quot;current value&quot;, val));</span><br><span class="line">  doubleValue.subscribe(val =&gt; console.log(&quot;double value&quot;, val))</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;Value: &#123;$writableStore&#125;&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- manually use update --&gt;</span><br><span class="line">&lt;button on:click=&#123;() =&gt; writableStore.update(val =&gt; val + 1)&#125;&gt;Increment&lt;/button&gt;</span><br><span class="line">&lt;!-- use the $ shortcut --&gt;</span><br><span class="line">&lt;button on:click=&#123;() =&gt; $writableStore--&#125;&gt;Decrement&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;br /&gt;</span><br><span class="line"></span><br><span class="line">Double the value is &#123;$doubleValue&#125;</span><br></pre></td></tr></table></figure>

<p>注意，我在上面添加了一个 <code>derived</code> store。<a href="https://svelte.dev/docs#derived">文档</a>深入的介绍了这个，但简单来说，<code>derived</code> store 让你可以使用和 writable store 一样的语法，让一个 store (或许多 store) 映射出一个新值。</p>
<p>Svelte 中的 Store 非常灵活。我们可以将多个 store 传递到子组件中，更改、组合它们，甚至通过传递一个 derived store 使它们只读。如果我们要把一些 React 的代码转化为 Svelte，我们甚至可以重建一些你可能喜欢或需要的 React 抽象。</p>
<h3 id="React-API-与-Svelte"><a href="#React-API-与-Svelte" class="headerlink" title="React API 与 Svelte"></a>React API 与 Svelte</h3><p>说完这些，让我们回到之前 React 的 <code>useReducer</code> hook 上。</p>
<p>我们的确是真的喜欢通过定义 reducer 函数来维护和更新 state。让我们看看使用 Svelte 的 store 去模仿 React 的 <code>useReducer</code> 会有多难。我们想要调用我们自己的 <code>useReducer</code>，传入一个带有初始值的 reducer 函数，然后得到带有当前值的 store，这和 dispatch 函数调用 reducer 去更新 store 是一样的，完成这个任务实际上不算太糟糕。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">useReducer</span>(<span class="params">reducer, initialState</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> state = writable(initialState);</span><br><span class="line">  <span class="keyword">const</span> dispatch = <span class="function">(<span class="params">action</span>) =&gt;</span></span><br><span class="line">    state.update(<span class="function"><span class="params">currentState</span> =&gt;</span> reducer(currentState, action));</span><br><span class="line">  <span class="keyword">const</span> readableState = derived(state, <span class="function">(<span class="params">$state</span>) =&gt;</span> $state);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> [readableState, dispatch];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Svelte 的用法和 React 几乎是一样的。唯一的区别是我们当前的值是一个 store，而不是一个原始值，所以我们需要加上一个 <code>$</code> 前缀来读取值(或者手动调用 store 上的 <code>get</code> 或 <code>subscribe</code> )。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  import &#123; useReducer &#125; from &quot;./useReducer&quot;;</span><br><span class="line">        </span><br><span class="line">  function reducer(currentValue, action) &#123;</span><br><span class="line">    switch (action) &#123;</span><br><span class="line">      case &quot;INC&quot;:</span><br><span class="line">        return currentValue + 1;</span><br><span class="line">      case &quot;DEC&quot;:</span><br><span class="line">        return currentValue - 1;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  const [number, dispatch] = useReducer(reducer, 0);      </span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;Value: &#123;$number&#125;&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;button on:click=&#123;() =&gt; dispatch(&quot;INC&quot;)&#125;&gt;Increment&lt;/button&gt;</span><br><span class="line">&lt;button on:click=&#123;() =&gt; dispatch(&quot;DEC&quot;)&#125;&gt;Decrement&lt;/button&gt;</span><br></pre></td></tr></table></figure>

<h3 id="那么-useState-呢？"><a href="#那么-useState-呢？" class="headerlink" title="那么 useState 呢？"></a>那么 <code>useState</code> 呢？</h3><p>如果你真的喜欢 React 的 <code>useState</code> hook，实现也很简单。实际上，我并没有觉得这是一个很有用的抽象，但这是个有趣的练习，可以展示 Svelte 的灵活性。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export function useState(initialState) &#123;</span><br><span class="line">  const state = writable(initialState);</span><br><span class="line">  const update = (val) =&gt;</span><br><span class="line">    state.update(currentState =&gt;</span><br><span class="line">      typeof val === &quot;function&quot; ? val(currentState) : val</span><br><span class="line">    );</span><br><span class="line">  const readableState = derived(state, $state =&gt; $state);</span><br><span class="line"></span><br><span class="line">  return [readableState, update];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="双向绑定真的糟糕吗？"><a href="#双向绑定真的糟糕吗？" class="headerlink" title="双向绑定真的糟糕吗？"></a>双向绑定<strong>真的</strong>糟糕吗？</h3><p>在结束 state 管理这部分之前，我要提及最后一个对 Svelte 而言比较特殊的技巧。我们已经知道了 Svelte 允许我们使用任何我们能用的 Rect 方法来传递更新函数到组件树。允许子组件通知他们的父组件，state 变化，这是个频繁的操作，我们已经做了几千次。一个子组件改变了 state，然后调用一个父组件传递过来的函数，这样父组件就可以接收 state 改变。</p>
<p>除了支持回调函数的传递，Svelte 也允许父组件与子组件 state 的双向绑定。比如，我们有这样一个组件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- Child.svelte --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export let val = 0;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;button on:click=&#123;() =&gt; val++&#125;&gt;</span><br><span class="line">  Increment</span><br><span class="line">&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">Child: &#123;val&#125;</span><br></pre></td></tr></table></figure>

<p>上面的例子创建一个带有 <code>val</code> 属性的组件。在 Svelte 中，<code>export</code> 关键字用于组件声明 props。通常，我们会把 props 传入到一个组件中，但这里有点不同。比如上面的例子，<code>val</code> prop 被子组件修改了。在 React 中，这是错误的，可能会引发 bug，但在 Svelte 中，渲染这个组件的组件可以做这个。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- Parent.svelte --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import Child from &quot;./Child.svelte&quot;;</span><br><span class="line">        </span><br><span class="line">  let parentVal;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;Child bind:val=&#123;parentVal&#125; /&gt;</span><br><span class="line">Parent Val: &#123;parentVal&#125;</span><br></pre></td></tr></table></figure>

<p>这里，在父组件中我们为子组件的 <code>val</code> prop 重新<strong>绑定</strong>了一个变量。如果子组件的 <code>val</code> prop 变化，那么父组件的 <code>parentVal</code> 也会自动被 Svelte 更新。</p>
<p>双向绑定是存在一些争论。如果你不喜欢，那就不要用它。但是少量使用，我认为这会是一个非常方便的工具，可以减少模板。</p>
<h2 id="Svelte-中的副作用没有分离-或者过时的闭包"><a href="#Svelte-中的副作用没有分离-或者过时的闭包" class="headerlink" title="Svelte 中的副作用没有分离(或者过时的闭包)"></a>Svelte 中的副作用没有分离(或者过时的闭包)</h2><p>在 React 中，我们使用 <code>useEffect</code> hook 管理副作用。像这样：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Current value of number&quot;</span>, number);</span><br><span class="line">&#125;, [number]);</span><br></pre></td></tr></table></figure>

<p>我们写了一个函数，以及依赖列表。每一次渲染，React 都会检查列表中的每一个元素，如果有一个与上一次渲染时不同，那么这个回调函数就会再次运行。如果我们想要在上一次运行后运行一个 cleanup 函数，那么我们可以从 effect 中返回一个 cleanup 函数。</p>
<p>像数字变化这类简单的需求，这很简单。但是任何有经验的 React 开发者都知道，对于非琐碎的使用案例，<code>useEffect</code> 会是个潜在的麻烦。这非常容易，在依赖列表遗漏一些什么从而引发过时的闭包问题。</p>
<p>在 Svelte 中，操作副作用最基础的形式是反应性的声明。看起来像这样。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$: &#123;</span><br><span class="line">  console.log(&quot;number changed&quot;, number);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>给一个代码块加上一个前缀 <code>$:</code>，然后放入我们想要执行的代码。Svelte 分析哪个依赖被读，只要它们改变，Svelte 会重新运行这个代码块。没有直接的方法可以在上一次这个反应性代码块运行后去运行 cleanup，如果真的需要可以做一个替代方法，这非常简单。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let cleanup;</span><br><span class="line">$: &#123;</span><br><span class="line">  cleanup?.();</span><br><span class="line">  console.log(&quot;number changed&quot;, number);</span><br><span class="line">  cleanup = () =&gt; console.log(&quot;cleanup from number change&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这并不会导致无限循环：在一个反应性的代码块内重新赋值不会再引发这个代码块运行。</p>
<p>这是有效的，cleanup effects 通常会用在组件卸载时，Svelte 对此有一个内置功能 <a href="https://svelte.dev/docs#onMount"><code>onMount</code>函数</a>，使我们可以返回一个 cleanup 函数能够在组件销毁时执行，更直接还有一个<a href="https://svelte.dev/docs#onDestroy"><code>onDestroy</code>函数</a>，可以做我们想做的事。</p>
<h3 id="action-来增加一些趣味"><a href="#action-来增加一些趣味" class="headerlink" title="action 来增加一些趣味"></a>action 来增加一些趣味</h3><p>以上的一切都很好用，但 action 才是 Svelte 的最大亮点。副作用频繁的捆绑 DOM 节点。我们可能想在一个 DOM 节点上集成一个老式的(但仍然很不错) jQuery 插件，然后在节点离开 DOM 的时候拆除它；或者我们想为一个节点设置一个 <code>ResizeObserver</code>，然后在节点离开 DOM 的时候分离它，等等。这是非常普通的需求，Svelte 将其内置在 <a href="https://svelte.dev/docs#use_action">action</a> 中。让我们一起去看看。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;#if show&#125;</span><br><span class="line">  &lt;div use:myAction&gt;</span><br><span class="line">    Hello                </span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&#123;/if&#125;</span><br></pre></td></tr></table></figure>

<p>注意这个语法 <code>use:actionName</code>。这里我们将 <code>&lt;div&gt;</code> 与一个称作 <code>myAction</code> 的 action 捆绑，这个 action 只是个函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myAction</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Node added&quot;</span>, node);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>只要 <code>&lt;div&gt;</code> 进入 DOM，就会调用这个 action，并且传递这个 DOM 节点给 action。这是一个时机可以去添加 jQuery 插件以及设置 <code>ResizeObserver</code> 等等。不只这样，我们还可以从中返回一个 cleanup 函数，比如这样：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myAction</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Node added&quot;</span>, node);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="function"><span class="title">destroy</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;Destroyed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当节点离开 DOM 的时候，<code>destroy()</code> 将会执行，这是我们销毁 jQuery 插件的地方。</p>
<h3 id="慢着，还有！"><a href="#慢着，还有！" class="headerlink" title="慢着，还有！"></a>慢着，还有！</h3><p>我们还可以传递参数给 action, 像这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div use:myAction=&#123;number&#125;&gt;</span><br><span class="line">  Hello                </span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>这个参数将作为 action 函数的第二个参数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myAction</span>(<span class="params">node, param</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Node added&quot;</span>, node, param);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="function"><span class="title">destroy</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;Destroyed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果你想在参数变化时做额外的工作，你可以返回一个 update 函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myAction</span>(<span class="params">node, param</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Node added&quot;</span>, node, param);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="function"><span class="title">update</span>(<span class="params">param</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;Update&quot;</span>, param);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">destroy</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;Destroyed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当传递给 action 的参数变化时，update 函数将会运行。向一个 action 传递多个参数，我们可以传递一个 object。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div use:myAction=&#123;&#123;number, otherValue&#125;&#125;&gt;</span><br><span class="line">  Hello                </span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>只要 object 的属性改变，Svelte 就会再次运行 update 函数。</p>
<p>Actions 是我最喜欢的 Svelte 功能之一，它们非常强大。</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>Svelte 还有很多其他的，React 没有与之相对的功能。还有很多表单捆绑（<a href="https://svelte.dev/tutorial/text-inputs">教程有涵盖</a>），以及 CSS <a href="https://svelte.dev/docs#class_name">辅助</a>。</p>
<p>来自 React 的开发者可能会惊喜，Svelte 开箱即用的动画。与其在 npm 里搜索然后希望能找到最好的，不如…内置。它甚至包含了<a href="https://css-tricks.com/svelte-and-spring-animations/">弹性动画，进入离开的动画</a>，Svelte 称之为<strong>transitions</strong>。</p>
<p>对于 <code>React.Chidren</code>，Svelte 与之对应的是 slots，<a href="https://svelte.dev/docs#slot">Svelte 的文档很好的讲解了这个</a>。我发现它们比 React’s Children API 更简单些。</p>
<p>最后，我最喜欢的功能之一，几乎算是隐藏的功能，通过 <a href="https://svelte.dev/docs#svelte_options"><code>svelte:options</code></a> 的属性<code>tagName</code>，Svelte 可以将自己的组件编译为真实的 web 组件。但一定要在 webpack 或 Rollup 配置中设置对应的属性。在 webpack 中是这样的：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">loader</span>: <span class="string">&quot;svelte-loader&quot;</span>,</span><br><span class="line">  <span class="attr">options</span>: &#123;</span><br><span class="line">    <span class="attr">customElement</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="有兴趣试试-Svelte-吗"><a href="#有兴趣试试-Svelte-吗" class="headerlink" title="有兴趣试试 Svelte 吗"></a>有兴趣试试 Svelte 吗</h2><p>这篇文章中的任何一个知识点都可以单独拧出来写一个 blog 了，比如 state 管理和 actions，而我们可能只了解到了一些皮毛，我们看到了 Svelte 的功能，不仅是与 React 相匹配，甚至可以模仿很多 React 的 API。然后之前我们简单的谈到了一些 Svelte 的便利，比如内置动画（或者过渡）以及将 Svelte 组件转化为真实的 web 组件。</p>
<p>我希望我成功的激起了你的兴趣，有很多文章，教程或者在线课程等等可以更深入探究。如果你有任何问题可以在评论区告诉我。</p>
<blockquote>
<p>如果发现译文存在错误或其他需要改进的地方，欢迎到 <a href="https://github.com/xitu/gold-miner">掘金翻译计划</a> 对译文进行修改并 PR，也可获得相应奖励积分。文章开头的 <strong>本文永久链接</strong> 即为本文在 GitHub 上的 MarkDown 链接。</p>
</blockquote>
<hr>
<blockquote>
<p><a href="https://github.com/xitu/gold-miner">掘金翻译计划</a> 是一个翻译优质互联网技术文章的社区，文章来源为 <a href="https://juejin.im/">掘金</a> 上的英文分享文章。内容覆盖 <a href="https://github.com/xitu/gold-miner#android">Android</a>、<a href="https://github.com/xitu/gold-miner#ios">iOS</a>、<a href="https://github.com/xitu/gold-miner#%E5%89%8D%E7%AB%AF">前端</a>、<a href="https://github.com/xitu/gold-miner#%E5%90%8E%E7%AB%AF">后端</a>、<a href="https://github.com/xitu/gold-miner#%E5%8C%BA%E5%9D%97%E9%93%BE">区块链</a>、<a href="https://github.com/xitu/gold-miner#%E4%BA%A7%E5%93%81">产品</a>、<a href="https://github.com/xitu/gold-miner#%E8%AE%BE%E8%AE%A1">设计</a>、<a href="https://github.com/xitu/gold-miner#%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD">人工智能</a>等领域，想要查看更多优质译文请持续关注 <a href="https://github.com/xitu/gold-miner">掘金翻译计划</a>、<a href="http://weibo.com/juejinfanyi">官方微博</a>、<a href="https://zhuanlan.zhihu.com/juejinfanyi">知乎专栏</a>。</p>
</blockquote>
]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
      <tags>
        <tag>translation</tag>
      </tags>
  </entry>
  <entry>
    <title>japanese</title>
    <url>/2023/11/17/notes_jp/</url>
    <content><![CDATA[<h2 id="quick-review"><a href="#quick-review" class="headerlink" title="quick review"></a>quick review</h2><ul>
<li><p>53</p>
<ul>
<li>を + [noun] + に + して(can be omitted), a means or reason for something to happen, “because of” / 以…为… / “as a result of”<ul>
<li>をきっかけにして, Taking [something] as an opportunity..</li>
<li>を頼りにして, according to</li>
</ul>
</li>
<li>~に受ける、well received</li>
<li>ということからきた</li>
<li>音読み: 音读，訓読み[くんよみ]: 训读，熟字訓[じゅくじくん]: 熟字训</li>
<li>~って, </li>
<li>が and の can use exchangeably when express a common quality<ul>
<li>意味[の/が]違う漢字があると聞きました</li>
</ul>
</li>
</ul>
</li>
<li><p>52</p>
<ul>
<li>ところ, can refer to a situation or moment in which someone is busy or occupied.<ul>
<li>お忙しいところ、すみません</li>
</ul>
</li>
<li>思ったより</li>
<li><a href="#%E3%81%A8%E3%81%84%E3%81%86%E3%81%93%E3%81%A8%E3%81%A7%E3%81%99">ということです</a>, explaining or summarizing information (often in past tense) that was provided or heard</li>
<li><a href="#%E3%82%82%E3%82%89%E3%81%84%E3%81%BE%E3%81%99">てもらいませんか</a></li>
<li>うち</li>
<li>そうです</li>
<li><a href="#%E3%81%93%E3%81%9D%E3%81%82%E3%81%A9">このように, そのように</a></li>
</ul>
</li>
<li><p>51, 日本の名字の起源と中国の名字の違い</p>
<ul>
<li>～といわれています，express a common sence, It is believed that ~ People say that ~<ul>
<li>“いわれています” is the passive form of 言う</li>
</ul>
</li>
<li>～わけにはいきません, it’s not possible to do (because of a certain reason)</li>
<li>ため</li>
<li>tricky sentences<ul>
<li>突然名字を 持て[持ちます]といわれても、どんな名字を持てばいいの分かりません</li>
</ul>
</li>
</ul>
</li>
<li><p>50</p>
<ul>
<li>～ものです、</li>
<li>~中、お電話中・お仕事中</li>
<li>~ぶり、express a time interval, the interval shouldn’t less than a day. for the first time in X years, 时隔x年，x年一遇</li>
</ul>
</li>
<li><p>49 </p>
<ul>
<li>とは、というのは、verb + ということは、noun + というものは</li>
<li>~ は ~ の１つです、one of the~</li>
<li>~化, privatization 民営化</li>
<li>~的, trun a noun into a <code>さadj</code>, 世界的、消極的</li>
<li><del>と</del>を結ぶ</li>
</ul>
</li>
<li><p>48 283</p>
<ul>
<li><a href="#%E8%87%AA%E8%AC%99%E8%AA%9E">自謙語</a></li>
<li>verbて形＋みたい</li>
<li><a href="#%E5%B0%8A%E6%95%AC%E8%AA%9E">noun/adj convert to 尊敬語</a></li>
</ul>
</li>
<li><p>47 273</p>
<ul>
<li><a href="#%E5%B0%8A%E6%95%AC%E8%AA%9E">尊敬語</a></li>
</ul>
</li>
<li><p>46</p>
<ul>
<li><a href="#conjecture">いかにも noun らしい</a> </li>
<li><a href="#conjecture">まるで noun みたいです / ようです</a></li>
<li>までに、すえ</li>
</ul>
</li>
<li><p>45 253</p>
<ul>
<li>～ていきます/てきました</li>
<li><a href="#connectPoints">～し～し</a></li>
<li>ば形＋「辞書形／」＋ほど<ul>
<li><blockquote>
<p>商品は<code>安ければ安いほど</code>売れるでしょう</p>
</blockquote>
</li>
</ul>
</li>
</ul>
</li>
<li><p>44 </p>
<ul>
<li><a href="#conjecture">ようです</a>, It seems” or “It appears”</li>
<li><a href="#conjecture">みたいです</a>, “It looks like” or “It seems like”</li>
<li><a href="#conjecture">らしいです</a>, “I heard that” or “It seems that”</li>
</ul>
</li>
<li><p>43</p>
<ul>
<li><a href="#%E5%8F%97%E8%BA%AB%E5%BD%A2%E3%81%86%E3%81%91%E3%81%BF%E3%81%91%E3%81%84">受身形うけみけい</a></li>
<li><a href="#thinking">のではないでしょうか</a></li>
<li><a href="#thinking">と考える</a></li>
</ul>
</li>
<li><p>42 217</p>
<ul>
<li><a href="#conditionalform">た形／ない形＋まま</a></li>
<li><a href="#possibility">はずです</a></li>
<li>はずがありません</li>
<li>のに、can refer to “even though /  after all”, when the subclause is contrast or unexpected outcome<ul>
<li>さadj + なのに</li>
<li><blockquote>
<p>目覚[めざ] ましを<code>かけておいたのに</code>、今朝は起きられませんでした</p>
</blockquote>
</li>
</ul>
</li>
</ul>
</li>
<li><p>41 207</p>
<ul>
<li><a href="#%E5%8F%97%E8%BA%AB%E5%BD%A2%E3%81%86%E3%81%91%E3%81%BF%E3%81%91%E3%81%84">受身形</a></li>
<li><a href="#Quantifier">~とも</a></li>
</ul>
</li>
<li><p>40 191</p>
<ul>
<li>ところです, going to do sth, about to do sth, 正要去<ul>
<li>ているところです, emphasizes being in the middle of an action right now.</li>
<li>たところです, an action just finished</li>
</ul>
</li>
<li>ばかり, alomst same as たところです, but it is preferred when the action has been completed after a long time.”</li>
<li>ます形 + 続けます,  the action will continue or has been continuing over a period of time.</li>
</ul>
</li>
<li><p>39 181</p>
<ul>
<li><strong>て形　+　いきます</strong><ul>
<li>an action that continues or happens away from the speaker’s current location or context.</li>
</ul>
</li>
<li><strong>て形　+　きます</strong><ul>
<li>in the speaking language, this can refert to an action that occurs toward the speaker, or is completed and then returned to the current context.</li>
</ul>
</li>
<li><a href="#becauseandtherefore">ために、のために</a></li>
<li><strong>遠く、近く</strong>are noun, diferent from other いadj</li>
</ul>
</li>
<li><p>38</p>
<ul>
<li><a href="#%E5%8F%AF%E8%83%BD%E5%BD%A2%E3%81%8B%E3%81%AE%E3%81%86%E3%81%91%E3%81%84">可能形かのうけい</a></li>
<li><a href="#becauseandtherefore">ように</a></li>
</ul>
</li>
<li><p>37 161</p>
<ul>
<li><a href="#%E3%81%B0%E5%BD%A2">ば形</a></li>
<li>なら<a href="#conditionalform">conditionalform</a></li>
<li><a href="#connectPoints">とか～とか</a>、similar to <del>や</del>など, the later can only connect nouns</li>
</ul>
</li>
<li><p>36 p145</p>
<ul>
<li>て／で、express reasons</li>
<li><a href="#%E3%81%AB">に／のに、to express the use of something</a></li>
<li>ばかり, <a href="#limitations">limitations</a></li>
<li>のが＋見えます／聞こえます, able to see or hear, refer to <a href="#clauseAsPartOfSpeech">clauseAsPartOfSpeech</a> when use with adj</li>
</ul>
</li>
<li><p>35</p>
<ul>
<li><a href="#%E3%81%9F%E3%82%89">たら</a></li>
<li><strong>ても</strong> = even if, even though</li>
<li>しか＋negative form, express limitation, nothing but</li>
<li>だけ = only, <a href="#limitations">limitations</a></li>
</ul>
</li>
<li><p>34 p125</p>
<ul>
<li><a href="#%E3%81%A6%E5%BD%A2%E3%81%82%E3%82%8A%E3%81%BE%E3%81%99">てあります</a></li>
<li><a href="#%E3%81%A6%E5%BD%A2%E3%81%8A%E3%81%8D%E3%81%BE%E3%81%99">ておきます</a></li>
<li><a href="#%E3%81%A6%E5%BD%A2%E3%81%BF%E3%81%BE%E3%81%99">てみます</a></li>
<li><a href="#becauseandtherefore">ために</a></li>
</ul>
</li>
<li><p>33</p>
<ul>
<li>自动词/他动词</li>
<li><a href="#%E3%81%A6%E5%BD%A2">「て形」しまいます</a></li>
<li><a href="#%E3%81%9D%E3%81%86%E3%81%A7%E3%81%99">[いadj(remove い)/さadj/verb(remove ます)] + そうです</a></li>
<li>かしら</li>
</ul>
</li>
<li><p>32　99</p>
<ul>
<li>辞書形／ない形 + <strong>つもりです</strong>、plan to, <a href="#%E3%81%A8%E6%80%9D%E3%81%84%E3%81%BE%E3%81%99">same as と思っています</a></li>
<li>ことにします／ことにしました, decide to do sth</li>
<li>ことになりました = It has been decided. indicates that something has been decided or arranged. It conveys a sense of formality and finality about the situation.</li>
<li><a href="#%E3%81%9D%E3%81%86%E3%81%A7%E3%81%99">clause + そうです</a></li>
</ul>
</li>
<li><p>31</p>
<ul>
<li>辞書形／ない形 + <a href="#%E3%81%A8">と</a></li>
<li>辞書形／ない形 + ことがあります，usually used with たまに／時々, refer to something happening at certain times</li>
<li>でしょうか，to be polite</li>
<li>adj as adverb</li>
</ul>
</li>
<li><p>30</p>
<ul>
<li><a href="#%E6%84%8F%E5%BF%97%E5%BD%A2">意志形</a></li>
<li>ので <a href="#BecauseandTherefore">BecauseandTherefore</a></li>
<li>と思います、と思っています</li>
</ul>
</li>
<li><p>29</p>
<ul>
<li>命令形　<a href="#imperative-form">Imperative-Form</a></li>
<li>禁止形　<a href="#negative-imperative-form">Negative-Imperative-Form</a></li>
<li>という</li>
<li>～方をします describe the way or manner in which an action is performed<ul>
<li>言い方をします、考え方をします</li>
</ul>
</li>
</ul>
</li>
<li><p>28</p>
<ul>
<li>くれます</li>
<li>て形 of くれます/あげます/もらいます. <a href="#giveandaccept">give and accept</a></li>
</ul>
<p>森さんは　李さんに　地図を　くれました<br>森さんは お年寄りの荷物を　持ってあげました<br>森さんは　李さんに　北京を　案内してもらいました<br>女の人が　私の財布を　拾ってくれました</p>
<p>すてきな　マフラーです<br>小野さんが誕生日にくれたんです</p>
<p>森さんは　明日引っ越しですれ<br>みんなで　手伝ってあげましよう</p>
<p>この文章の意味が　わからないです<br>戴さんに訳してもらいましよう。英語が得意ですから</p>
<p>おいしいお茶を　おくってくれで。ありがとう<br>いいえ、どういたしまして</p>
</li>
<li><p>27</p>
<ul>
<li>clause + 時 = when, 在…时候，indicates a specific point in time when something happens or a condition is met</li>
<li>ながら = while, 一边做…一边做…, two actions are happening simultaneously</li>
<li>でしょう <a href="#possibility">other usages</a>, seeking agreement or confirmation</li>
<li><a href="#%E3%81%A6%E5%BD%A2%E3%81%84%E3%81%BE%E3%81%99">「て形」います</a> expressing something happening regularly</li>
<li><a href="#%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6">について</a></li>
<li>と会います</li>
</ul>
</li>
<li><p>26</p>
<ul>
<li>use a clause as a noun, <a href="#clause-as-a-part-of-speech">clause as a part of speech</a></li>
<li>express possibility, <a href="#possibility">possibility</a><ul>
<li>でしょう</li>
<li>かもしれません</li>
<li>もしかしたら</li>
</ul>
</li>
</ul>
</li>
<li><p>25</p>
<ul>
<li>use a clause as a adj to modify a noun, <a href="#clause-as-a-part-of-speech">clause as a part of speech</a></li>
<li>このとこの, このあたり</li>
</ul>
</li>
</ul>
<p>n3: the overall score = above 95 out of a total of 180, with each section exceeding 19</p>
<h2 id="particles"><a href="#particles" class="headerlink" title="particles"></a>particles</h2><h3 id="と"><a href="#と" class="headerlink" title="と"></a>と</h3><ul>
<li>辞書形／ない形 + と<ul>
<li>express a <em>constant or natural status</em></li>
<li><blockquote>
<p>このバタンを　押すと、電源が　入ります</p>
</blockquote>
</li>
<li><a href="#conditionalform">conditional form</a></li>
</ul>
</li>
</ul>
<h3 id="に"><a href="#に" class="headerlink" title="に"></a>に</h3><ul>
<li><p>it’s used for directions, movement, and specific time.</p>
</li>
<li><p>express settlement</p>
<ul>
<li><blockquote>
<p>１か月ぐらい<code>ホテルに</code>　泊まってください</p>
</blockquote>
</li>
</ul>
</li>
<li><p>indicates the instrument or means by which an action is performed or the manner in which something is done</p>
<ul>
<li><blockquote>
<p><code>自転車に</code>　二人乗るのは　危ないです</p>
</blockquote>
</li>
</ul>
</li>
<li><p>To emphasize the noun before</p>
<ul>
<li>can be understood “for china or in china”. without “に”, the focus shifts from empathizing china as the place where the action takes place to simply stating that in relation to China</li>
<li><blockquote>
<p><code>中国には</code> 日本のうたが好きな人が たくさんいます</p>
</blockquote>
</li>
<li><blockquote>
<p><code>二時には</code>　終わるでしよう</p>
</blockquote>
</li>
</ul>
</li>
<li><p><strong>に／のに</strong>、to express the use of something</p>
<ul>
<li><blockquote>
<p>Q:　この写真は<code>何に</code>使いますか？A:　パスポートの<code>申請に</code>使います</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h3 id="が-amp-amp-は"><a href="#が-amp-amp-は" class="headerlink" title="が&amp;&amp;は"></a>が&amp;&amp;は</h3><p>が and は both are present noun, が is added after interrogative pronouns(だれ／何／どこ／いつ)</p>
<blockquote>
<p>あの方<code>が</code>　吉田さんです<br>吉田さん<code>は</code>　あの方です</p>
</blockquote>
<h3 id="interrogative-＋-か"><a href="#interrogative-＋-か" class="headerlink" title="interrogative ＋ か"></a>interrogative ＋ か</h3><p>どこ、どれ、どちら、だね、なに、何時</p>
<ul>
<li><p>[interrogative] か =  <em>somewhere / someone / when</em></p>
<blockquote>
<p>冬休み、<code>どこか</code>へ　行きたいです</p>
</blockquote>
</li>
<li><p>[interrogative expressions] か＝ <em>make a sub-clause as a noun</em></p>
<blockquote>
<p>かぎが　<code>どこに　あるか</code>　教えてください</p>
</blockquote>
</li>
</ul>
<blockquote>
<p>森さんが　<code>何時ごろ　くるか</code>　しって　いますか<br>いいえ、今日は　<code>くるか　どうか</code>　　わかりません</p>
</blockquote>
<h2 id="あります／います"><a href="#あります／います" class="headerlink" title="あります／います"></a>あります／います</h2><p><strong>あります</strong>  is used for things. etc(flower, desk…)<br><strong>います</strong>  is used for lives. etc(people, bug…)</p>
<ul>
<li>[location] <em>に</em>  [thing/people] <em>が</em>  あります／います</li>
<li>[thing/people] <em>が</em>  [location] <em>に</em>  あります／います</li>
<li>[thing/people] <em>が</em> [Quantifier] あります／います= use Quantifier to modify the number of the noun</li>
</ul>
<p><strong>疑问词 + も to express negative</strong></p>
<ul>
<li><em>だねも</em> いません = people</li>
<li><em>何も</em> ありません = things</li>
</ul>
<h2 id="Number-44"><a href="#Number-44" class="headerlink" title="Number (44)"></a>Number (44)</h2><p>0~9: ねい／ぜろ、いち、に、さん、し／よん、ご、ろく、しち／なな、はち、く／きゆう</p>
<p>10:じゆう<br>11<del>19: じゆう + 1</del>9<br>20/30…: 2~9 +  じゆう</p>
<p>100:ひやく<br>200/300…: 2~9 +  ひやく</p>
<p>1000: せん<br>2000/3000…: 2~9 +  せん</p>
<p>1w: いちまん<br>1w/2w…: 1~9 +  まん<br>10w: じゆうまん<br>100w: いやくまん<br>1000w: いつせんまん</p>
<p>1亿: いちおく</p>
<h2 id="こそあど"><a href="#こそあど" class="headerlink" title="こそあど"></a>こそあど</h2><ul>
<li>thing: これ    それ    あれ    どれ／どの　だれ／どなた</li>
<li>relative pronouns(連体詞): この    その    あの    どの<ul>
<li>relative pronouns＋方 = polite form to show respect forwards someone</li>
</ul>
</li>
<li>location: ここ    そこ    あそこ    どこ</li>
<li>direction: こちら    そちら    あちら    どちら<ul>
<li>also polite expressions for ここ</li>
</ul>
</li>
<li>副词:    こう    そう    ああ    どう</li>
<li>このように、そのように、あのように、どのように<ul>
<li>introduces or refer to something that has been previously mentioned, demonstrated, or explained.</li>
<li>in this way(most close to the speaker or immediate in context), in that way, in that way(more distant), in what way</li>
</ul>
</li>
</ul>
<h2 id="長音"><a href="#長音" class="headerlink" title="長音"></a>長音</h2><p>長音「ちょうおん」, add vowel[あ (a), い (i), う (u), え (e), and お (o)] which is  on the same stage as the last sound</p>
<h2 id="Quantifier"><a href="#Quantifier" class="headerlink" title="Quantifier"></a>Quantifier</h2><ul>
<li><p>Noun <em>を</em> Quantifier action = <strong>use with action</strong></p>
<ul>
<li>とりあえず　生ビールを　３<sup>みっ</sup>つ　お願いします</li>
</ul>
</li>
<li><p>Noun <em>が</em> Quantifier <em>います／あります</em> = <strong>express existence</strong></p>
<ul>
<li>机の上に　本が　三冊<sup>さんさつ</sup>あります</li>
</ul>
</li>
<li><p>Quantifier *で = 以个为单位的销售</p>
<ul>
<li>Special: ignore で if the number is one</li>
</ul>
</li>
<li><p>the number of people  <em>で</em></p>
<blockquote>
<p>昨日は<code>一人で</code>映画館に行った</p>
</blockquote>
</li>
<li><p>~とも、used after quantifiers, express the idea of “both” or “together,”</p>
<ul>
<li><blockquote>
<p>週末にキャンプにいきました。２日<sup>ふつか</sup>とも雨が降<sup>ふ</sup>られて、大変でしたよ</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<p><strong>Query</strong></p>
<ul>
<li>ぐらい／くらい<ul>
<li>can express “a extent” “to the extent”</li>
</ul>
</li>
</ul>
<h2 id="Location-lesson-4"><a href="#Location-lesson-4" class="headerlink" title="Location (lesson 4)"></a>Location (lesson 4)</h2><ul>
<li>Location へ = <strong>Modify the location as the destination of movement</strong></li>
<li>Location に = <strong>express existence</strong></li>
<li>に へ can be used <em>interchangeably when the move verbs are classic words</em>, 帰ります／来ます／行きます</li>
</ul>
<hr>
<ul>
<li><p>Location へ action に きます／いきます= <strong>Modify the action as the purpose of movement</strong></p>
<blockquote>
<p>午後　郵便局へ　荷物を　出しに　いきます<br>昨日　何を　しました？ 新宿へ　映画を　見に　行きました</p>
</blockquote>
</li>
<li><p>Location から／まで = <strong>from ~ / to~</strong></p>
</li>
<li><p>direction noun = <strong>上／下、前／後ろ、隣、中／外</strong></p>
<ul>
<li><p>墙上：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">- 壁のうえ</span></span><br><span class="line"><span class="addition">+ 壁に</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><p><strong>Means of transportation</strong> Transportation tool + で</p>
<ul>
<li>Special：歩いて</li>
</ul>
</li>
<li><p><strong>transform to location nouns</strong></p>
<ul>
<li>「辞書形」 所：住む所</li>
<li>noun + の + 所: あの所</li>
</ul>
</li>
</ul>
<h2 id="Time"><a href="#Time" class="headerlink" title="Time"></a>Time</h2><ul>
<li>時「じ」 分「ぷん」 びょう</li>
</ul>
<p>For example: 今午後1時23分　いちじにじゅうさんぷん</p>
<p>【じ】特殊：よじ(four)、しちじ(seven)、くじ(nine)<br>【ぷん】特殊：いっぷん，よんぷん，ろっぷん，ななふん，はっぷん，じゅうぷん</p>
<ul>
<li><p>Time に verb = <strong>A specific time that an action happened</strong></p>
<blockquote>
<p>私は7時半ごろに起きます</p>
</blockquote>
</li>
<li><p><em>Ignore の</em> between two time expressions if the first one is started from “毎”</p>
<blockquote>
<p>来週の日曜日7時ごろ<br>毎日7時ごろ</p>
</blockquote>
</li>
</ul>
<h3 id="Time-nouns"><a href="#Time-nouns" class="headerlink" title="Time nouns"></a>Time nouns</h3><ul>
<li>午前「ごぜん」／ 午後「ごご」／　30分 = 半「はん」</li>
<li>さっき(刚才) / ただ今(刚刚)，ただ今 is closer to current</li>
<li>Number 時　＋　過ぎ　＝　几点过<ul>
<li>Number 過ぎ = 多少岁出头（表年龄）</li>
</ul>
</li>
<li>いつも = often</li>
<li>また<ul>
<li>また[future time] = またfuture time 会いましょう＝see you at …</li>
<li><blockquote>
<p>また　あした = see you tomorrow</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h3 id="Time-period"><a href="#Time-period" class="headerlink" title="Time period"></a>Time period</h3><ul>
<li><p><strong>time から time まで～ ＝ from~ to~</strong>, they can use separately to express the start point and the end point</p>
<blockquote>
<p>私は午前九時から午後六時まで働きます</p>
</blockquote>
</li>
<li><p><strong>Time quantifier + verb</strong> = how long the action last</p>
<blockquote>
<p>家から会社まで　<code>どのくらい　かかりますか</code>？<br>電車で　<code>１時間くらい</code>　かかります<br>李さんは　毎日<code>七時間</code>　働きます。</p>
</blockquote>
</li>
<li><p><strong>Time quantifier に Frequency</strong> = how much time the action repeated</p>
<ul>
<li>Special: Ignore number if the quantifier is one<blockquote>
<p>よく　映画を　見ますか？<br>ええ、１か月に　２回くらい　見ます</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h3 id="Time-query"><a href="#Time-query" class="headerlink" title="Time query"></a>Time query</h3><ul>
<li>いつ action ますか?<blockquote>
<p>童さんは　いつ起きますが？<br>童さんは　いつから休みますが？</p>
</blockquote>
</li>
</ul>
<h3 id="Time-clause-27"><a href="#Time-clause-27" class="headerlink" title="Time clause(27)"></a>Time clause(27)</h3><ul>
<li>た形/辞書形/nounの + 時(に) = when</li>
<li><blockquote>
<p><code>子供の時</code>、大きな地震が　ありました</p>
</blockquote>
</li>
<li><blockquote>
<p><code>映画を　見る時</code>、いつも　いちばん後ろの席に　座ります</p>
</blockquote>
</li>
</ul>
<h2 id="Adjective"><a href="#Adjective" class="headerlink" title="Adjective"></a>Adjective</h2><p>Noun + が + adj／verb = <strong>to describe noun、focus on the Noun</strong><br>Noun + が + verb</p>
<blockquote>
<p>小野さんは歌が好きです<br>小野さんは料理が上手です</p>
</blockquote>
<ul>
<li>Adj + の　can be used as a noun<br>おもしろいのが　ありますよ</li>
</ul>
<p>て形 = paralleling /</p>
<h3 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h3><ul>
<li>どうですか/どうでしたかかち</li>
<li>どんな = what’s it like</li>
</ul>
<h3 id="イ形"><a href="#イ形" class="headerlink" title="イ形"></a>イ形</h3><p>Ending with い: 旅行は楽しいです</p>
<p>add です to express <strong>丁寧形</strong></p>
<p>【くて】= <strong>て形</strong></p>
<p>【い】&gt;【かった】 = <strong>past</strong></p>
<p>【い】=&gt;【く】</p>
<ul>
<li><p>中断句子，变成两个并列的字句</p>
<blockquote>
<p>男の留学生は多く、女の留学生は少ないです</p>
</blockquote>
</li>
<li><p>く [ないです/ ありません] =  <strong>negative</strong></p>
<ul>
<li>ありません =&gt; ない = <strong>普通形</strong><blockquote>
<p>旅行は楽しくないです</p>
</blockquote>
</li>
</ul>
</li>
<li><p>く [なかったです/ ありませんでした] =  <strong>past negative</strong></p>
<ul>
<li>ありませんでした =&gt; なかった = <strong>普通形</strong><blockquote>
<p>旅行は楽しくなかったです</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h3 id="ナ形"><a href="#ナ形" class="headerlink" title="ナ形"></a>ナ形</h3><p>Not ending with い, Nouns sometimes can be used as adj<br><strong>Special words</strong>：きれい、嫌い</p>
<ul>
<li><p>Adj/Noun + で = <strong>てfrom</strong></p>
</li>
<li><p>Adj/Noun + です/でした = <strong>positive / past positive</strong></p>
<ul>
<li>Adj/Noun + だ／だった = <em>普通形</em><blockquote>
<p>奈良は<code>静かです</code><br>今日は <code>曇りだ</code><br>昨日の試験は　<code>どうだった</code>？</p>
</blockquote>
</li>
</ul>
</li>
<li><p>Adj/Noun + では／じゃ + ありません／ありませんでした = <strong>negative / past negative</strong></p>
<ul>
<li>ありません／ありませんでした　=&gt;　ない／なかった = <em>普通形</em><blockquote>
<p>奈良は <code>にぎやかじゃありません</code><br>コンピュータは　<code>簡単ではない</code></p>
</blockquote>
</li>
</ul>
</li>
</ul>
<p>Adj+ な + noun + です = <strong>describe the noun、focus on the Adj</strong></p>
<blockquote>
<p>奈良は静かな町です</p>
</blockquote>
<h3 id="なります-amp-amp-します"><a href="#なります-amp-amp-します" class="headerlink" title="なります &amp;&amp; します"></a>なります &amp;&amp; します</h3><p><strong>なります自动词</strong>：normally use to express change</p>
<ul>
<li>携帯電話を　とても少しくなりました　changes are already happened</li>
<li>だだ　暖かくなります    changes are happening</li>
</ul>
<p><strong>します他动词</strong>：changed by the subject’s action</p>
<ul>
<li><p>[イAdj  い 变 く] + なります／します</p>
<blockquote>
<p>携帯電話を　とても　少しくなりました</p>
</blockquote>
</li>
<li><p>[ナAdj／noun ] に+ なります／します</p>
<blockquote>
<p>部屋を　きれいに　してください（て形 + ください）<br>息子は　医者に　なりました</p>
</blockquote>
</li>
</ul>
<h3 id="to-adverbs"><a href="#to-adverbs" class="headerlink" title="to adverbs"></a>to adverbs</h3><p>い：い　=&gt;　く<br>さ：に　after</p>
<p><strong>negative form</strong></p>
<p>しません／なりません</p>
<h2 id="Verb-forms"><a href="#Verb-forms" class="headerlink" title="Verb forms"></a>Verb forms</h2><ul>
<li>interactive verb (27): noun<strong>は</strong>Noun<strong>と</strong>verb, noun<strong>と</strong>Noun<strong>が</strong>verb<ul>
<li><blockquote>
<p>田中さん<code>と</code>　佐藤さん<code>が</code>　結婚しました</p>
</blockquote>
</li>
<li><blockquote>
<p>田中さん<code>は</code>　佐藤さん<code>と</code>　結婚しました</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<p>辞書形／普通形／丁寧形「ます形」<br>た形／て形／ない形</p>
<p>noun[car/chair/boat…]に verb[乗ります/座ります／入れます] = to express noun stay at the transportation tools</p>
<ul>
<li><strong>い verb</strong>: the last pronunciation after ます-stem is belong to <em>い sound</em></li>
<li><strong>え verb</strong>: the last pronunciation after ます-stem is belong to <em>え sound</em><ul>
<li>え verb but い sound: <em>起きます／見ます</em></li>
</ul>
</li>
<li><strong>3verb</strong>: ending with します: <em>来ます／します</em></li>
</ul>
<h2 id="自动词他动词"><a href="#自动词他动词" class="headerlink" title="自动词他动词"></a>自动词他动词</h2><ul>
<li>自动词：Noun <strong>が</strong> verb, ending with ま sound +る</li>
<li>他动词：Noun <strong>を</strong> verb, ending with え sound +る</li>
<li>special<ul>
<li>自动词 form of some verbs ends  with え sound +る, while the 他动词 form ends with う sound. 消「け」える・消「き」す、壊れる・壊す</li>
<li>some verbs have same 自动词 form and 他动词 form, 閉じる</li>
</ul>
</li>
</ul>
<h2 id="辞書形"><a href="#辞書形" class="headerlink" title="辞書形"></a>辞書形</h2><p>the basic form of verb</p>
<ul>
<li><p><strong>1verb</strong>, remove ます, replace the last pronunciation with the corresponding <em>う sound(3)</em></p>
<blockquote>
<p>書きます＝＞書く、買います＝＞買う</p>
</blockquote>
</li>
<li><p><strong>2verb</strong>：<em>remove ます + る</em></p>
<blockquote>
<p>食べます＝＞食べる</p>
</blockquote>
</li>
<li><p><strong>3verb</strong>, きます /くる、します / する</p>
</li>
</ul>
<hr>
<p><strong>[辞書形] こと =  as a noun</strong></p>
<blockquote>
<p>スミスさんは　ピアノを　<code>弾くこと</code>が　できます<br>私の趣味は　切手を集<code>めること</code>です</p>
</blockquote>
<p><strong>[辞書形] noun =  as an adj to modify a noun</strong></p>
<blockquote>
<p>これは　<code>明日会議使う</code>資料です<br>私が　<code>明日乗る</code>飛行機は　中国航空です</p>
</blockquote>
<p><strong>[辞書形] 前に =  before the action happened</strong></p>
<h2 id="ます形"><a href="#ます形" class="headerlink" title="ます形"></a>ます形</h2><p>transform from 辞書形 to ます形</p>
<ul>
<li><p><strong>1verb</strong>, replace the last pronunciation with the corresponding <em>い sound(2)</em></p>
</li>
<li><p><strong>2verb</strong>：<em>remove る + ます</em></p>
</li>
<li><p><strong>3verb</strong>, きます /くる、します / する</p>
</li>
</ul>
<h2 id="て形"><a href="#て形" class="headerlink" title="て形"></a>て形</h2><ul>
<li><p>い verb<br>Special:</p>
<ul>
<li>き　＝＞　いて，except：行きます／行って</li>
<li>ぎ　＝＞　いで</li>
<li>ひ／み／に　＝＞　んで</li>
<li>ち／り／い　＝＞　って</li>
<li>し　＝＞　して  except: 走る/走って</li>
</ul>
</li>
<li><p>えverb: ます-stem + て</p>
</li>
<li><p>3verb: ます-stem + て</p>
</li>
</ul>
<hr>
<h3 id="Two-and-above-actions-occur-consecutively"><a href="#Two-and-above-actions-occur-consecutively" class="headerlink" title="Two and above actions occur consecutively"></a>Two and above actions occur consecutively</h3><ul>
<li><p>「て形」verb</p>
</li>
<li><p><strong>Verb てから verb</strong>、(can’t be used twice in one sentence)</p>
<blockquote>
<p>李さんは　毎晩　ラジオを　聞い<code>てから</code>　寝ます</p>
</blockquote>
</li>
<li><p><strong>それから/そして</strong>, put at the start of a sentence to intro the next action</p>
<blockquote>
<p>図書館へ　行って、　勉強を　します。<code>そねから</code>　家へ帰って、　手紙を　書きます<br>昨日会社で　メモを　整理して、小野さんに　見せました。<code>そして</code>、アパートへ　帰ってから　書きました。</p>
</blockquote>
</li>
</ul>
<hr>
<h3 id="て形-ください"><a href="#て形-ください" class="headerlink" title="て形+ください"></a>て形+ください</h3><ul>
<li><p>Please someone to do something</p>
<blockquote>
<p>ここへ　住所と名前を　書いて　<code>ください</code></p>
</blockquote>
</li>
<li><p>「て形」<strong>くださいませんか</strong>、more polite expression</p>
<blockquote>
<p>後で　写真も　見て　くださいませんか</p>
</blockquote>
</li>
</ul>
<hr>
<h3 id="て形います"><a href="#て形います" class="headerlink" title="て形います"></a>て形います</h3><ul>
<li><p>express progressive tense</p>
</li>
<li><p>express special state leaded by actions, <em>知ります／持ちます</em> (16)</p>
<blockquote>
<p>森さんは　何時ごとくるか　<code>知っています</code>か？<br>ううん、今日は　くるか　どうか　わかりません</p>
</blockquote>
</li>
<li><p>express an action repeatedly happening</p>
<ul>
<li><blockquote>
<p>葉子さんは　アルバイトを　しながら学校を  <code>通っているんです</code></p>
</blockquote>
</li>
</ul>
</li>
<li><p>自动词て形+います, express a continued state</p>
</li>
</ul>
<hr>
<h3 id="て形おきます"><a href="#て形おきます" class="headerlink" title="て形おきます"></a>て形おきます</h3><ul>
<li>to express doing something in advance, preparing for the future, often with a sense of anticipation or preparation<ul>
<li><blockquote>
<p>お客さんが来「く」る前に、部屋を掃除しておきます</p>
</blockquote>
</li>
<li><blockquote>
<p>Ｑ：森さん、会議の資料はどうしますか。Ａ：十部コピーをしておいてください</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<hr>
<h3 id="て形あります"><a href="#て形あります" class="headerlink" title="て形あります"></a>て形あります</h3><ul>
<li>often implies that something has been done for a purpose or is intentionally prepared or arranged.<ul>
<li><blockquote>
<p>壁にカレンダーが<code>掛けてあります</code></p>
</blockquote>
</li>
</ul>
</li>
</ul>
<hr>
<h3 id="て形-みます"><a href="#て形-みます" class="headerlink" title="て形+みます"></a>て形+みます</h3><ul>
<li>to try something out<ul>
<li><blockquote>
<p>カレーライスを<code>作ってみました</code>、<code>食べてみて</code>ください</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<hr>
<h3 id="て形-いいです"><a href="#て形-いいです" class="headerlink" title="て形+いいです"></a>て形+いいです</h3><p>Action’s permission</p>
<ul>
<li>て形+いいです　able to do something</li>
<li>て形+いいですか　query permission</li>
<li>て形+は　いけません　not able to do something</li>
</ul>
<hr>
<h3 id="て形-しまいます"><a href="#て形-しまいます" class="headerlink" title="て形+しまいます"></a>て形+しまいます</h3><p>to  express that something is completed, done unintentionally, often implying regret</p>
<h2 id="た形"><a href="#た形" class="headerlink" title="た形"></a>た形</h2><p>Replace the [て／で] of [て形] with た／だ</p>
<ul>
<li><p>です　＝＞　だった</p>
</li>
<li><p>[た形]ことが　あります = <strong>express a past action</strong></p>
<blockquote>
<p>わたしは　すき焼きを　<code>食べたことが　あります</code></p>
</blockquote>
</li>
<li><p>[た形]後で =  <strong>after the action happened</strong></p>
<blockquote>
<p>李さんは　会社が　<code>終わった 後で</code>、飲みに　行きます</p>
</blockquote>
</li>
<li><p>[た形]ほうが　いいです =  <strong>express advice，还是….比较好</strong></p>
<blockquote>
<p>もうと　野菜を　<code>食べた ほうが　いいです</code></p>
</blockquote>
</li>
</ul>
<hr>
<p><strong>[た形] noun =  as an adj</strong></p>
<blockquote>
<p><code>中国で買ったＣＤ</code>は　友達に　貸しました</p>
</blockquote>
<h2 id="ない形"><a href="#ない形" class="headerlink" title="ない形"></a>ない形</h2><ul>
<li>い：replace the ending word with the corresponding <em>あ sound(1)</em>(except い=&gt; わ) + ます =&gt;  ない</li>
<li>え：ます =&gt;  ない</li>
<li>きます=&gt;こない、します＝＞しない</li>
</ul>
<h3 id="express-imperative-mood"><a href="#express-imperative-mood" class="headerlink" title="express imperative mood"></a>express imperative mood</h3><p>give commands, make requests</p>
<ul>
<li>「ない形」と　いけません <strong>double negative</strong>, abbr 「ない形」と</li>
<li>「ない形」＝＞なければなりません <strong>polite form</strong>, abbr 「ない形」なければ, something is necessary or required. “must,” “have to,” or “should”</li>
</ul>
<h3 id="It’s-fine-for-not-doing-something"><a href="#It’s-fine-for-not-doing-something" class="headerlink" title="It’s fine for not doing something"></a>It’s fine for not doing something</h3><ul>
<li>なくてもいいです</li>
<li>[ない形] ほうが　いいです</li>
</ul>
<h3 id="ないでください"><a href="#ないでください" class="headerlink" title="ないでください"></a>ないでください</h3><p>please do not do something</p>
<h3 id="ずに"><a href="#ずに" class="headerlink" title="ずに"></a>ずに</h3><blockquote>
<p>a negative conjunction that means “without doing something” or “instead of doing something.”</p>
</blockquote>
<p>する　＝＞　せずに</p>
<h2 id="Imperative-Form"><a href="#Imperative-Form" class="headerlink" title="Imperative-Form"></a>Imperative-Form</h2><h3 id="命令形-めいれいけ"><a href="#命令形-めいれいけ" class="headerlink" title="命令形(めいれいけ)"></a>命令形(めいれいけ)</h3><p>a general way, which is used to give commands or make requests</p>
<ul>
<li>replace the last one to <em>え sound(4)</em></li>
<li>replace <em>る  to ろ</em></li>
<li>する =&gt; <em>しろ</em>、くる =&gt; <em>こい</em></li>
</ul>
<h3 id="なさい"><a href="#なさい" class="headerlink" title="なさい"></a>なさい</h3><p>a polite and gentle way to give commands</p>
<p><strong>ます-stem + なさい</strong></p>
<h3 id="ない形-で-で-form"><a href="#ない形-で-で-form" class="headerlink" title="ない形 + で, で form"></a>ない形 + で, で form</h3><p>more casual</p>
<h3 id="Negative-Imperative-Form"><a href="#Negative-Imperative-Form" class="headerlink" title="Negative-Imperative-Form"></a>Negative-Imperative-Form</h3><p><strong>辞書形 + な</strong> indicating a prohibition or command not to do something</p>
<h2 id="意志形"><a href="#意志形" class="headerlink" title="意志形"></a>意志形</h2><p>いしけい, expresses the speaker’s will, intention, or suggestion</p>
<p><strong>Formation</strong></p>
<ul>
<li>replace the last sound to <em>お sound(5)う</em></li>
<li>replace <em>る  to よう</em></li>
<li>する =&gt; <em>しよう</em>、くる =&gt; <em>こよう</em></li>
</ul>
<p>意志形 + と思います, express one’s intention<br>意志形 + と思っています(て形＋います), express one’s intention that is prolonged or continuing for a while</p>
<h2 id="ば形"><a href="#ば形" class="headerlink" title="ば形"></a>ば形</h2><p>condition form, similar to “if”</p>
<p><strong>Formation</strong></p>
<ul>
<li>replace the last one to <em>え sound(4)</em> and add <em>ば</em></li>
<li>replace <em>る  to れば</em></li>
<li>する =&gt; <em>すれば</em>、くる =&gt; <em>くれば</em></li>
</ul>
<h2 id="可能形かのうけい"><a href="#可能形かのうけい" class="headerlink" title="可能形かのうけい"></a>可能形かのうけい</h2><p>express the ability or potential to do something,, similar with “ことができます”</p>
<ul>
<li>を switch to が<ul>
<li><blockquote>
<p>李さんは日本語が話せます</p>
</blockquote>
</li>
<li><blockquote>
<p>李さんは日本語を話すことができます</p>
</blockquote>
</li>
</ul>
</li>
<li>can infer to other verb forms, ない形、た形、なかった形</li>
</ul>
<p><strong>Formation</strong></p>
<ul>
<li>replace the last one to <em>え sound(4)</em> and <em>add る</em></li>
<li>replace <em>る  to られる</em></li>
<li>する =&gt; <em>できる</em>、くる =&gt; <em>くられる</em></li>
</ul>
<h2 id="受身形うけみけい"><a href="#受身形うけみけい" class="headerlink" title="受身形うけみけい"></a>受身形うけみけい</h2><p><strong>passive form, based on ない形</strong></p>
<ul>
<li><p>simlar with <a href="#giveandaccept">give and accept</a>, both can contain the meaning of making someone do something for me. while 受身形 is stronger </p>
</li>
<li><p>ない =&gt; れる</p>
</li>
<li><p>ない =&gt; られる, same with <a href="#%E3%81%8B%E3%81%AE%E3%81%86%E5%BD%A2">可能形</a></p>
</li>
<li><p>する =&gt; される、くる =&gt; こられる</p>
</li>
</ul>
<p><strong>sentence structure</strong></p>
<ul>
<li>[object] は [doer] に [verb 受身形] = <del>被</del></li>
<li>[object] は [doer]<em>によって</em> [verb 受身形] = <del>被</del>, clearly indicates the doer<ul>
<li><blockquote>
<p>万有引力<sup>ばんゆういんりょく</sup>の法則<sup>ほうそく</sup>は<code>ニュートンによって</code>発見<sup>はっけん</sup>されました</p>
</blockquote>
</li>
</ul>
</li>
<li>[subject] は [doer] に [object] を [verb 受身形] = when <em>object</em> is a thing, <em>subject</em> is the owner of <em>object</em>, action is preformed by <em>doer</em>.  emphasizes what happened to <em>subject</em><ul>
<li>馬さんは李さんにカメラを壊されました</li>
</ul>
</li>
</ul>
<h2 id="使役形しえきけい"><a href="#使役形しえきけい" class="headerlink" title="使役形しえきけい"></a>使役形しえきけい</h2><ul>
<li>to “make,” “have,” or “let” someone do something</li>
<li>noun は (noun に) noun を使役形<ul>
<li><blockquote>
<p>陳さんは　息子さんを　アメリカに留学させます</p>
</blockquote>
</li>
<li><blockquote>
<p>部長は　大田さんに　レポートを　書かさせます</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<p><strong>Formation</strong></p>
<ul>
<li>based on ない形</li>
<li>replace <em>ない  =&gt; せる</em></li>
<li>replace <em>ない  =&gt; させる</em></li>
<li>する =&gt; <em>させる</em>、くる =&gt; <em>こさせる</em></li>
</ul>
<h2 id="敬語"><a href="#敬語" class="headerlink" title="敬語"></a>敬語</h2><h3 id="自謙語"><a href="#自謙語" class="headerlink" title="自謙語"></a>自謙語</h3><p>自謙語<sup>じけんご</sup>, refers to “self-deprecating language” or “humble language”, used to lower one’s own status or achievements in conversation, often to show humility or politeness.</p>
<h3 id="尊敬語"><a href="#尊敬語" class="headerlink" title="尊敬語"></a>尊敬語</h3><ul>
<li>Politeness refers to the general practice of showing respect and consideration toward others in communication</li>
<li>尊敬語<sup>そんけいご</sup> honorifics usually towards the people who you are not familar with</li>
<li><strong>noun / adj transform to 尊敬語</strong><ul>
<li>漢字 words and fixed phrases are start from ご, while the rest are start from お</li>
<li>ご利用、ご家族、お忙しい、お暇</li>
</ul>
</li>
<li><a href="#%E5%8F%97%E8%BA%AB%E5%BD%A2%E3%81%86%E3%81%91%E3%81%BF%E3%81%91%E3%81%84">受身形</a> can be used as 尊敬語<ul>
<li><blockquote>
<p>周先生<sup>しゅうせんせい</sup>は明日日本へ行かれます</p>
</blockquote>
</li>
</ul>
</li>
<li>~ください<ul>
<li>お＋い／え verb(remove ます)＋ください<ul>
<li><blockquote>
<p>どうぞ、お座りください</p>
</blockquote>
</li>
</ul>
</li>
<li>ご＋さ verb(remove ます)＋ください</li>
<li>words like 見ます, 寝ます, and います, which have only <em>one syllable left after removing ます</em>cannot apply this transformation.</li>
</ul>
</li>
</ul>
<h3 id="辞書形-1"><a href="#辞書形-1" class="headerlink" title="辞書形"></a>辞書形</h3><ul>
<li>お＋い／え verb(remove ます)＋になる</li>
<li>ご＋さ verb(remove ます)＋になる</li>
<li>some verbs have a special honorific form<ul>
<li>a few words which is ending with あいうえお are very likely transform to しゃる</li>
<li>食べる =&gt; 召し上がる（い verb, 召し上がります）</li>
<li>行く=&gt; いらっしゃる（いらっしゃいます）</li>
<li>する =&gt; なさる </li>
</ul>
</li>
</ul>
<h3 id="ます形-1"><a href="#ます形-1" class="headerlink" title="ます形"></a>ます形</h3><ul>
<li>お＋い／え verb(remove ます)＋になります</li>
<li>words like 見ます, 寝ます, and います, which have only <em>one syllable left after removing ます</em>, and <em>さ verb</em> cannot apply this transformation.</li>
<li><blockquote>
<p>お客様はもうお帰りになりました</p>
</blockquote>
</li>
</ul>
<h2 id="普通形"><a href="#普通形" class="headerlink" title="普通形"></a>普通形</h2><p>22 lesson<br>equal to 简体形</p>
<ul>
<li><p>verb =&gt; <a href="#%E8%BE%9E%E6%9B%B8%E5%BD%A2">辞書形</a></p>
</li>
<li><p>さ Adj/Noun + だ／だった</p>
</li>
<li><p><strong>status</strong><br>です/でした = だ／だった<br>ではありません／ではありませんでした = ではない／ではなかった</p>
</li>
<li><p><strong>actions</strong><br>ます／ました = 辞書形／た形<br>ません／ませんでした = ない形／なたった</p>
</li>
<li><p><strong>existence</strong><br>あります／ありました = ある／あった<br>ありません／ありませんでした = ない／なかった</p>
</li>
</ul>
<h3 id="confirm-something"><a href="#confirm-something" class="headerlink" title="confirm something"></a>confirm something</h3><p><strong>「普通形」の／かな</strong> In addition, かな can be used like about/probably/maybe</p>
<blockquote>
<p>ああ、清水君、<code>どうしたの</code>？<br>太田、今度　中国の北京へ　転勤だって。期間は　四年か　<code>五年かな</code>。</p>
</blockquote>
<h2 id="clauseAsPartOfSpeech"><a href="#clauseAsPartOfSpeech" class="headerlink" title="clauseAsPartOfSpeech"></a>clauseAsPartOfSpeech</h2><ul>
<li><p>verb</p>
<ul>
<li><strong><a href="#%E6%99%AE%E9%80%9A%E5%BD%A2">普通形</a> or <a href="#%E3%81%9F%E5%BD%A2">た形</a></strong>  = an adj</li>
<li><strong>普通形 or た形</strong>  + <strong>の / こと</strong>= a noun</li>
</ul>
</li>
<li><p>adj<br><strong>イ形</strong> =&gt; <strong>普通形</strong><br><strong>さ形</strong> + <strong>な</strong></p>
</li>
<li><p>noun: + <strong>が</strong>   = an adj</p>
</li>
<li><p>the subject of the clause + <strong>は =&gt; が</strong></p>
</li>
<li><p>the location of the clause + <strong>で</strong></p>
</li>
<li><p>if predicate are adj (like 好きです、嫌いです.etc expressing personal likes or dislikes), then use が to modify the clause</p>
<ul>
<li>李さんは　絵を描くのが　好きですか</li>
</ul>
</li>
</ul>
<h2 id="BecauseandTherefore"><a href="#BecauseandTherefore" class="headerlink" title="BecauseandTherefore"></a>BecauseandTherefore</h2><ul>
<li><strong>どうしてですか？</strong> = why</li>
<li><strong>どうして「action」「の／ん」ですか</strong> = why perform this [action]<blockquote>
<p>Q: <code>どうして　たべないん　ですか</code><br>A: もう　おなかが　いっぱいな<code>んです</code></p>
</blockquote>
</li>
</ul>
<h3 id="Express-reasons"><a href="#Express-reasons" class="headerlink" title="Express reasons"></a>Express reasons</h3><ul>
<li><p><strong>~から</strong>, at the end of a sentence</p>
<blockquote>
<p>長島さん、スペイン語が　分かりますか？<br>ええ、大学で　習いました<code>から</code>、少し　わかります。</p>
</blockquote>
</li>
<li><p><strong>~ので</strong>, after 「普通形」、show more polite sense than から</p>
</li>
<li><p><strong>ですから（polite form）／たから</strong>, at the start of a sentence, and can be used independently</p>
<blockquote>
<p>荷物が重いので、宅配便で送ります</p>
</blockquote>
</li>
<li><p><strong>ですもの</strong>、softer, sometimes emotional、compare to ですから</p>
<ul>
<li><blockquote>
<p>森：ええ、おかしいな。そんな<code>はずはないです</code>。<br>  李：そうですよ。おととい送ったん<code>ですもの</code>れ</p>
</blockquote>
</li>
</ul>
</li>
<li><p><strong>「辞書形」のです（polite form）／んです</strong></p>
<blockquote>
<p>すみません、頭が　いたいんです</p>
</blockquote>
</li>
<li><p><strong>それで</strong> (26), used in dependently, 因此</p>
<ul>
<li><blockquote>
<p>日本には　握手の習慣がありません。<code>それで</code>、<code>つい</code>握手するのを　忘れます</p>
</blockquote>
</li>
</ul>
</li>
<li><p><strong>noun で ~</strong>(27)</p>
</li>
<li><p>ため, ために、のために</p>
</li>
</ul>
<h3 id="express-purposes-or-goals"><a href="#express-purposes-or-goals" class="headerlink" title="express purposes or goals"></a>express purposes or goals</h3><h4 id="ように"><a href="#ように" class="headerlink" title="ように"></a>ように</h4><ul>
<li>express a wish, a desired outcome, or a more general aim.<ul>
<li>after ない形、辞書形、可能形</li>
<li>ようになります, express a change</li>
<li>ようにします, indicates to make an effort or try to achieve a certain behavior or outcome.</li>
</ul>
</li>
</ul>
<h4 id="ために"><a href="#ために" class="headerlink" title="ために"></a>ために</h4><ul>
<li>indicates that the action is done in order to achieve something<ul>
<li>after 辞書形</li>
<li><blockquote>
<p>日本へ留学する<code>ために</code>、お金「かね」をためています</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h2 id="Comparative"><a href="#Comparative" class="headerlink" title="Comparative"></a>Comparative</h2><ul>
<li><p>N1 は <strong>N2 より</strong> Adj です = <em>N1 is …. than N2</em></p>
<blockquote>
<p>李さんは 森さんより 若いです</p>
</blockquote>
</li>
<li><p>N1 は <strong>N2 ほど</strong> Adj negative formです = <em>N1 is not ….than N2</em></p>
<blockquote>
<p>神戸は 大阪ほど にぎやがでは ありません</p>
</blockquote>
</li>
<li><p><strong>N2 より</strong>  <strong>N1 のほうが</strong> Adj です = <em>compare to N2, N1 is  …..</em></p>
<blockquote>
<p>日本より中国のほうが広いです</p>
</blockquote>
</li>
<li><p>Adj <strong>ほうが いいです</strong> = 还是…好一点</p>
</li>
<li><p>N1 <strong>の中</strong>で N2 が <strong>いちばん</strong> Adj です ＝ <em>N2 is most …. in the range of N1</em><br>スポイシの中で サッカーが いちばん おもしろいです</p>
</li>
</ul>
<hr>
<p><strong>Phrases</strong></p>
<p>…ほど… = …不如….<br>…のほうが = ….更…<br>…がいちばん…. = …最…<br>どちらも …. = 全部都….</p>
<hr>
<p><strong>Query</strong></p>
<ul>
<li>Q: どの　Noun/いつが／どれ／だれ／何 が  いちばん Adj　ですか?  = <em>which one is the most ….</em><ul>
<li>A: どちらも　Adj です ＝ <em>all of them are Adj</em></li>
</ul>
</li>
<li>Q： N1 と N2 と どちらが Adj ですか？= <em>comparative in the given items</em><ul>
<li>A:  …のほうが　Adj です</li>
</ul>
</li>
</ul>
<h2 id="Want"><a href="#Want" class="headerlink" title="Want"></a>Want</h2><ul>
<li><p><strong>Noun が 欲しいです</strong>= want something</p>
<ul>
<li>私は　あたらしいようふくが　欲しいです</li>
</ul>
</li>
<li><p><strong>Noun を 「ます-stem」 たいです</strong> = want <em>to do</em> something</p>
<ul>
<li>私は　えいがを　みたいです</li>
</ul>
</li>
<li><p>verbて形＋みたい = want <em>to do</em> something</p>
<ul>
<li><blockquote>
<p>社長：そうだよ。事務所へ 直行<sup>ちょっこ</sup>しょうか。早く 見てみたいからな</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h2 id="advising"><a href="#advising" class="headerlink" title="advising"></a>advising</h2><ul>
<li><p><strong>Verb ませんか</strong>= how about to do ….？去做…怎么样？</p>
<ul>
<li><em>Verb ません</em> = negative form of verb</li>
</ul>
</li>
<li><p><strong>Verb ましょうか</strong>= shall we to do something 去做…好吗？</p>
<ul>
<li><em>Verb ましょう</em>= let’s to do something 好啊，去做…吧</li>
</ul>
</li>
<li><p><strong>Differ between ませんか and ましょうか</strong></p>
<ul>
<li>Both are refer to provide a suggestion</li>
<li>ませんか is more polite</li>
<li>ましょうか is more likely to confirm a suggestion</li>
</ul>
</li>
<li><p><a href="#possibility">でしよう</a></p>
</li>
</ul>
<h2 id="GiveAndAccept"><a href="#GiveAndAccept" class="headerlink" title="GiveAndAccept"></a>GiveAndAccept</h2><h3 id="あげます"><a href="#あげます" class="headerlink" title="あげます"></a>あげます</h3><ul>
<li>from the speaker’s perspective, the speaker is giving something to  someone, <em>giver は</em>, taker に, thing を</li>
<li>the speaker does something for the benefit of someone</li>
<li><blockquote>
<p>李さん<code>は</code> 小野さん<code>に</code> シルクのハンカチ<code>を あげました</code></p>
</blockquote>
</li>
<li><strong>てform + あげます, help someone to do something</strong>, not polite when face to face talk to someone who are deserving of respect.<blockquote>
<p>森さんは　お年寄りの荷物を　<code>持ってあげました</code></p>
</blockquote>
</li>
</ul>
<h3 id="くれます-28"><a href="#くれます-28" class="headerlink" title="くれます(28)"></a>くれます(28)</h3><ul>
<li>the speaker is receiving something from someone particularly from the speaker’s perspective, <em>giver は/が</em>, taker に, thing を</li>
<li>someone does something for the benefit of the speaker</li>
<li><blockquote>
<p>馬さんは　わたしに　地図を　<code>くれました</code></p>
</blockquote>
</li>
<li><blockquote>
<p>馬さんが　妹(means my sister)に　旅行のお土産を　<code>くれました</code></p>
</blockquote>
</li>
<li><strong>てform + くれます, someone did something for me</strong><blockquote>
<p>女の人が　私の財布を　<code>拾ってくれました</code></p>
</blockquote>
</li>
<li><em>てform + くれませんか? can someone do something for me</em></li>
</ul>
<h3 id="もらいます"><a href="#もらいます" class="headerlink" title="もらいます"></a>もらいます</h3><ul>
<li>the speaker is receiving something from someone**, <em>taker は</em>, giver に / から, thing を</li>
<li>someone does something for the benefit of the speaker</li>
<li><blockquote>
<p>If the giver is 会社/学校, then use から, to express the start point of goods</p>
</blockquote>
</li>
<li><strong>てform + もらいます, please someone to do something</strong></li>
<li><blockquote>
<p>森さんは　李さんに　北京を　<code>案内してもらいます</code></p>
</blockquote>
</li>
<li> <strong>てもらいませんか, polite negative form</strong>, make a request in a humble, somewhat indirect way.</li>
</ul>
<h3 id="ください"><a href="#ください" class="headerlink" title="ください"></a>ください</h3><ul>
<li>accept, buy or order something, please someone to do something</li>
<li><blockquote>
<p>この本と　鉛筆を　ください</p>
</blockquote>
</li>
<li><em>てform + ください, please someone to do something</em></li>
</ul>
<p>お願いします、polite expression, please can you do this</p>
<h2 id="possibility"><a href="#possibility" class="headerlink" title="possibility"></a>possibility</h2><ul>
<li><p><strong>でしょう eighty percent</strong>, mostly like to happen</p>
<ul>
<li>verb clause / イadj: 普通形 + でしょう</li>
<li>noun clause / adj: change だ of 普通形 to でしょう</li>
<li><blockquote>
<p>明日の朝は　大雨に　<code>なるでしょう</code></p>
</blockquote>
</li>
<li>other usages<ul>
<li>ない form + でしょう = negative expressions</li>
<li>when it’s used as a question to confirm something(27)<ul>
<li><blockquote>
<p>李さん、明日　パーティーに　行く<code>でしょう</code>?</p>
</blockquote>
</li>
</ul>
</li>
<li>softening statements</li>
</ul>
</li>
</ul>
</li>
<li><p>普通形 + だろう, similar with でしよう, but is used to expresses one’s own estimate or prediction</p>
</li>
<li><p><strong>かもしれません fifty percent</strong></p>
<ul>
<li>verb clause / イadj: 普通形 + かもしれません</li>
<li>noun clause / adj: change だ in 普通形 to かもしれません<blockquote>
<p>森さんは　今日会社を　<code>休むかもしれません</code></p>
</blockquote>
</li>
<li>Perhaps it will, perhaps it won’t.<blockquote>
<p>森さんは　今日会社を　<code>休むかもしれません</code>か、<code>休まないかもしれません</code></p>
</blockquote>
</li>
</ul>
</li>
<li><p><strong>もしかしたら low possibility</strong>, not likely to happen, it’s used at the start of a sentence</p>
<ul>
<li><blockquote>
<p>もしかしたら、今日は　来ない　かもしれません</p>
</blockquote>
</li>
</ul>
</li>
<li><p><strong>かな</strong></p>
</li>
<li><p><strong>辞書形 + はずです</strong> = should / is supposed to</p>
<ul>
<li>会議は５時<sup>「ごじ」</sup>まですすから、もうすぐ終わる<code>はずです</code></li>
<li><strong>negative forms of はずです</strong> = should not based on context or reasoning<ul>
<li>張さんは入院中ですから、旅行にいく<code>はずがありません</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="limitations"><a href="#limitations" class="headerlink" title="limitations"></a>limitations</h2><ul>
<li><p><strong>だけ</strong> = only</p>
<ul>
<li><blockquote>
</blockquote>
</li>
</ul>
</li>
<li><p><strong>ばかり</strong></p>
<ul>
<li>nothing but, only</li>
<li><strong>use with います</strong>, Something happened repeatedly<ul>
<li><blockquote>
<p>森さんは　いつも失敗してばかりいます</p>
</blockquote>
</li>
<li><blockquote>
<p>陳さんは毎日お酒を飲んでばかりいます</p>
</blockquote>
</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>diff between</strong> だけ and ばかり</p>
<ul>
<li>the former can be used to express limitations in number, and can work together with negative forms</li>
</ul>
</li>
</ul>
<h2 id="conditionalForm"><a href="#conditionalForm" class="headerlink" title="conditionalForm"></a>conditionalForm</h2><h3 id="たら"><a href="#たら" class="headerlink" title="たら"></a>たら</h3><p>can be used in a <em>wider range</em> of contexts, including past, present, and future conditions.</p>
<ul>
<li><em>verbs, adj and noun</em>: replace た to たら in the past form</li>
<li><em>special</em>: remove は from  the past negative of さ adj and noun</li>
<li>with the polite form<ul>
<li>replace ます to ましたら、です to でしたら</li>
</ul>
</li>
</ul>
<h3 id="なら"><a href="#なら" class="headerlink" title="なら"></a>なら</h3><ul>
<li>Used for <em>hypothetical or conditional</em> statements </li>
<li>implies that the speaker assumes the listener is already aware of the condition. It is commonly used to offer advice, make suggestions, or give opinions based on the known condition.</li>
</ul>
<h3 id="ば形-1"><a href="#ば形-1" class="headerlink" title="ば形"></a><a href="#%E3%81%B0%E5%BD%A2">ば形</a></h3><p>Used for <em>hypothetical or conditional</em> statements that may not always be true but depend on certain conditions being met.</p>
<h3 id="まま"><a href="#まま" class="headerlink" title="まま"></a>まま</h3><ul>
<li><strong>た形／ない形＋まま</strong>、perform an action while something remains unchanged</li>
</ul>
<h3 id="と-1"><a href="#と-1" class="headerlink" title="~と"></a>~と</h3><ul>
<li>implies a <em>natural result</em> if a condition is meet<ul>
<li><blockquote>
<p>早く帰らないと、ごごの会議が始まります</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h2 id="thinking"><a href="#thinking" class="headerlink" title="thinking"></a>thinking</h2><h3 id="と思います"><a href="#と思います" class="headerlink" title="と思います"></a>と思います</h3><ul>
<li><p>add だ for modifing nouns</p>
</li>
<li><p>普通形 of さ adj</p>
</li>
<li><p>query</p>
<blockquote>
<p>どう思いますか？</p>
</blockquote>
</li>
<li><p>[辞書形 / adj 原型]<strong>と思います</strong>　＝＞ my idea</p>
<blockquote>
<p>李さんは　もうすぐ　<code>くると　おもいます</code></p>
</blockquote>
</li>
<li><p>[辞書形]<strong>と思っています</strong> =&gt; other people’s idea</p>
</li>
<li><p>意志形 + と思います, express one’s intention</p>
</li>
<li><p>意志形 + と思っています(て形＋います), express one’s intention that is prolonged or continuing for a while</p>
</li>
<li><p>辞書形／ない形 + つもりです, plan to, same as と思っています</p>
</li>
</ul>
<h3 id="と考える"><a href="#と考える" class="headerlink" title="と考える"></a>と考える</h3><ul>
<li><p>implies deeply think, to consider, to ponder</p>
</li>
<li><p><strong>のではないでしょうか</strong> Isn’t it…?” or “Don’t you think…?”</p>
<ul>
<li>compare to どう思いますか, this refer to a polite or tentative opinion, suggestion, or assumption</li>
<li><blockquote>
<p>アルファベットは分かりにくいので、避けた<sub>さ</sub>ほうがいい<code>のではないでしょうか</code></p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h2 id="conjecture"><a href="#conjecture" class="headerlink" title="conjecture"></a>conjecture</h2><h3 id="ようです"><a href="#ようです" class="headerlink" title="ようです"></a>ようです</h3><ul>
<li>“It seems” or “It appears”, based on <strong>objective observation</strong>;<ul>
<li>after clasue / noun + の</li>
</ul>
</li>
<li>まるで noun ようです = just like, as if, <ul>
<li><blockquote>
<p>これは 柔らかく[やわらかい] 、まるで 本物[ほんもの]の 毛皮[けがわ]のようです</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h3 id="らしいです"><a href="#らしいです" class="headerlink" title="らしいです"></a>らしいです</h3><ul>
<li>“I heard that” or “They say that” Based on <strong>hearsay</strong>,  the information that one has heard from others or rumors.<ul>
<li>after clasue</li>
</ul>
</li>
<li>いかにも noun らしい = it’s truly truly or indeed, emphasizing authenticity or classical.</li>
</ul>
<h3 id="みたいです"><a href="#みたいです" class="headerlink" title="みたいです"></a>みたいです</h3><ul>
<li>express both <strong>hearsay and objective observation</strong>,  casual form<ul>
<li>after clasue</li>
</ul>
</li>
<li>まるで noun みたいです = just like, as if, <ul>
<li><blockquote>
<p>これは 柔らかく[やわらかい] 、まるで 本物[ほんもの]の 毛皮[けがわ]のようです</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h2 id="indirectSpeech"><a href="#indirectSpeech" class="headerlink" title="indirectSpeech"></a>indirectSpeech</h2><p>report or paraphrase what someone has said without directly quoting their words</p>
<h3 id="と言いました"><a href="#と言いました" class="headerlink" title="と言いました"></a>と言いました</h3><ul>
<li><p>add だ for modifing nouns</p>
</li>
<li><p>普通形 of さ adj</p>
</li>
<li><p>It’s ongoing or has been said recently.</p>
</li>
<li><p>query</p>
<blockquote>
<p>課長はなん<code>と言いました</code>？</p>
</blockquote>
</li>
<li><p>to forward someone’s words</p>
<ul>
<li>if you are the second people, 陳さん is the “someone”<blockquote>
<p>陳さんは　パーティーにいき<code>と　言いました</code></p>
</blockquote>
</li>
<li>if you are third people, 小野さん told 李さん, 李さん + に<blockquote>
<p>小野さんは　李さん<code>に</code>　ちゅっと　休みたい <code>と　言いました</code></p>
</blockquote>
</li>
</ul>
</li>
<li><p>repeatedly forward someone’s words  <strong>と言っています</strong></p>
</li>
</ul>
<h3 id="そうです"><a href="#そうです" class="headerlink" title="そうです"></a>そうです</h3><ul>
<li>clause + <strong>そうです</strong>, it is said…, report <strong>indirect information</strong> that you’ve heard or read from others, but it doesn’t necessarily quote the exact words of someone, more of a general report.</li>
<li>[いadj(remove い)/さadj/verb(remove ます)] + そうです, to infer status based on <strong>objective observation</strong><ul>
<li>negative form, adj + そうではありません、verb + そうにありません</li>
<li>なさそうです＝ない＋そうです、よさそうです = いい＋そうです</li>
</ul>
</li>
</ul>
<h3 id="ということです"><a href="#ということです" class="headerlink" title="ということです"></a>ということです</h3><p> “the thing is…” or “this means…”<br>explaining or summarizing information (often in past tense) that was provided or heard<br>中国の事情を詳しいからということでした</p>
<h2 id="と会います"><a href="#と会います" class="headerlink" title="と会います"></a>と会います</h2><p>に会います</p>
<h2 id="という-29"><a href="#という-29" class="headerlink" title="という(29)"></a>という(29)</h2><p>expressing a quote = named or called</p>
<h2 id="できます"><a href="#できます" class="headerlink" title="できます"></a>できます</h2><ul>
<li><p><em>can，able, allow</em></p>
<blockquote>
<p>わたしは　運転が　できませんから、いつも電車です</p>
</blockquote>
</li>
<li><p><em>done. finish</em></p>
<blockquote>
<p>吉田課長、原稿が　できました。<br>箱根の記事ですね。ちょっと　見せて　ください</p>
</blockquote>
</li>
</ul>
<h2 id="connectPoints"><a href="#connectPoints" class="headerlink" title="connectPoints"></a>connectPoints</h2><h3 id="～たり～たり"><a href="#～たり～たり" class="headerlink" title="～たり～たり"></a>～たり～たり</h3><p>有时… 有时…., 既有….还有…</p>
<ul>
<li><p>[た形]<em>たり</em>　[た形]<em>たり します</em>、 <em>replace た to たり</em></p>
<blockquote>
<p>休みの日、<code>散歩したり</code>、買い物に<code>行ったり</code>　します<br>しゅうまつは　なにを　しましたか？<br>—- スケートを　<code>したり</code>、ボーリングを　<code>したり</code>　しました</p>
</blockquote>
</li>
<li><p>[イAdj] <em>かったり</em>　[イAdj] <em>かったり</em></p>
<blockquote>
<p>北京まで、飛行機のチケット　は　いくらぐらいですか？<br>季節<em>によって</em>、<code>高かったり、安かったり</code>です</p>
</blockquote>
</li>
<li><p>[サAdj／Noun] [<em>だったり</em>　サAdj／Noun] <em>だったり</em></p>
<blockquote>
<p>日本せんせいは　中<code>国人だったり、日本人だったり</code>です</p>
</blockquote>
</li>
</ul>
<h3 id="～し～し"><a href="#～し～し" class="headerlink" title="～し～し"></a>～し～し</h3><ul>
<li>list reasons or attributes (similar to “and” or “also”).</li>
<li><blockquote>
<p>おいしいし、手軽だし、わたしは 冷凍<sup>れいとう</sup>食品をよく食べます</p>
</blockquote>
</li>
</ul>
<h3 id="～や～や-など"><a href="#～や～や-など" class="headerlink" title="～や～や~など"></a>～や～や~など</h3><ul>
<li><blockquote>
<p>太極拳や　ラジオ体操を　していました</p>
</blockquote>
</li>
</ul>
<h3 id="～と～と"><a href="#～と～と" class="headerlink" title="～と～と"></a>～と～と</h3><h3 id="とか～とか"><a href="#とか～とか" class="headerlink" title="~とか～とか"></a>~とか～とか</h3><ul>
<li><blockquote>
<p>テレビ<code>とか</code>写真集<code>とか</code>で見たことがありますが、実際<sup>じっさい</sup>に見ると、本当に規模<sup>きぼ</sup>が大きいですれ。</p>
</blockquote>
</li>
</ul>
<h2 id="Sentence-structure"><a href="#Sentence-structure" class="headerlink" title="Sentence structure"></a>Sentence structure</h2><p>いいえ、ちがぃます　／はい、そうです<br>何歳ですか／おいくつですか</p>
<h3 id="nounですか-nounですか"><a href="#nounですか-nounですか" class="headerlink" title="nounですか , nounですか"></a>nounですか , nounですか</h3><p>こねはいくなですか</p>
<h3 id="Level"><a href="#Level" class="headerlink" title="Level"></a>Level</h3><ul>
<li>なかなか　p14</li>
<li>とても = very, extremely.</li>
<li>ぜひ = must, absolutely</li>
<li>かならず  = must, absolutely</li>
<li>だいぶ = emphasizes the noticeable amount or degree of change, improvement<ul>
<li><blockquote>
<p>だいぶ車が　多くなりました</p>
</blockquote>
</li>
</ul>
</li>
<li>ずいぶん = very, quite</li>
<li>すっかり = completely</li>
<li>よく = “very, much”, also can express “well in a skill”, or “often” / “frequently”</li>
<li>いちばん = number one, the most</li>
<li>本当に = really, truly, indeed</li>
<li>ほとんど = mostly, almost</li>
</ul>
<h3 id="many"><a href="#many" class="headerlink" title="many"></a>many</h3><ul>
<li>たくさん</li>
<li>大勢, describe people only</li>
</ul>
<h3 id="And"><a href="#And" class="headerlink" title="And"></a>And</h3><ul>
<li>それに</li>
</ul>
<h3 id="After"><a href="#After" class="headerlink" title="After"></a>After</h3><ul>
<li>これから</li>
<li>それから</li>
<li>そして</li>
</ul>
<h3 id="But-yet"><a href="#But-yet" class="headerlink" title="But/yet"></a>But/yet</h3><ul>
<li><strong>Add が</strong> at the end of the first clauses between two clauses</li>
<li><strong>でも</strong><ul>
<li>but, however</li>
<li>when use with interrogative words, いつでも／だれでも／何でも = 都行</li>
<li>なくても</li>
</ul>
</li>
<li><strong>けど</strong><ul>
<li>add between two clauses<blockquote>
<p>昨日の試験、どうだった？<br>ーーちょっど　難しくかった<code>けど</code>、まあまあ　できたよ</p>
</blockquote>
</li>
<li>表示铺垫,<blockquote>
<p>もしもし、小野です<br>小野さん？清水だ　<code>けど</code></p>
</blockquote>
</li>
<li>が 也可以表示铺垫<blockquote>
<p>東京タワーへ　いきたいんです<code>が</code>、どうやって　いきますか</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h3 id="so-therefore"><a href="#so-therefore" class="headerlink" title="so/therefore"></a>so/therefore</h3><ul>
<li>それで = because of that, 因此</li>
</ul>
<h3 id="really-Is-that-so"><a href="#really-Is-that-so" class="headerlink" title="really, Is that so"></a>really, Is that so</h3><ul>
<li>本当ですか</li>
</ul>
<h3 id="yes"><a href="#yes" class="headerlink" title="yes"></a>yes</h3><ul>
<li>そうなんです</li>
</ul>
<h3 id="って"><a href="#って" class="headerlink" title="~って"></a>~って</h3><p>表示传闻</p>
<blockquote>
<p>清水：太田、　今度　中国へ　転勤だって。<br>小野：本当に？いつ　いくの？</p>
</blockquote>
<h3 id="により"><a href="#により" class="headerlink" title="により"></a>により</h3><p>according to, て形 <code>によって</code></p>
<blockquote>
<p>北京まで、飛行機のチケット　は　いくらぐらいですか？<br>季節<code>によって</code>、高かったり、安かったりです</p>
<p>李さん、しごとは　忙しいですか<br>日<code>によって</code>、ひまだったり、忙しかったりです</p>
</blockquote>
<h3 id="について"><a href="#について" class="headerlink" title="について"></a>について</h3><p>about…</p>
<blockquote>
<p>日本の音楽<code>について</code>　どう思いますか<br>すばらしいと思います</p>
</blockquote>
<h3 id="～かどうか"><a href="#～かどうか" class="headerlink" title="～かどうか"></a>～かどうか</h3><p>to express the unknown status</p>
<ul>
<li>辞書形 of verb + か　どうか<blockquote>
<p>私は　今年の夏　<code>北京へ　いくか　どうか</code>　わかりません</p>
</blockquote>
</li>
<li>noun / adj + か　どうか<ul>
<li>私は　<code>李さんが　中国人か　どうか</code>　知りません</li>
</ul>
</li>
</ul>
<h3 id="方をする"><a href="#方をする" class="headerlink" title="~方をする"></a>~方をする</h3><p>express how the action is made</p>
<p>言い方を　します = what’s it said</p>
<h3 id="action-collocations"><a href="#action-collocations" class="headerlink" title="action collocations"></a>action collocations</h3><ul>
<li>[sport noun] をします</li>
<li>テレビをけします</li>
</ul>
<blockquote>
<p>しゅうまつは　なにを　しましたか？<br><code>スケートを　したり、ボーリングを　したり</code>　しました</p>
</blockquote>
<ul>
<li>温泉に入ります</li>
<li>電話をかける</li>
</ul>
<h2 id="Pronoun"><a href="#Pronoun" class="headerlink" title="Pronoun"></a>Pronoun</h2><ul>
<li><strong>わたし</strong>, me, first person<ul>
<li>わたくし</li>
</ul>
</li>
<li><strong>あなた</strong>, second person, same as “you”, used when people’s name is unknown. it’s considered too direct and even impolite</li>
<li><strong>Name / surname + さん</strong>, can replace あなた</li>
<li><strong>あの人</strong>，third person</li>
<li><strong>Children’s name / closed friends or family + ちゃん</strong>，~さんvs ~ちゃん = mom vs mommy</li>
<li><strong>~君【くん】</strong>, is used toward someone younger or of similar age</li>
<li><strong>~たち</strong></li>
</ul>
<h2 id="empty"><a href="#empty" class="headerlink" title="empty"></a>empty</h2><div>
    <a href="/other/Lemon.html">Lemon.md</a>
    <a href="/other/ヤキモチ.html">ヤキモチ.md</a>
    <a href="/other/僕が死のうと思ったのは.html">僕が死のうと思ったのは.md</a>
    <a href="/other/桜のうた.html">桜のうた.md</a>
</div>

<style>
  .postDetail strong {
    color: #0a95ff ;
    background: rgb(10 149 255 / 10%);
    padding: 0px 2px;
    border-radius: 3px;
    font-size: 88%
  }
  .postDetail em {
    background: #44ff0a1f;
    color: #3de708;
  }
  blockquote {
    border-left: 1px solid #d6d6d6 !important;
    border: 1px solid #d6d6d6;
    border-radius: 4px;
    background-color: rgb(245 245 245 / 95%) !important;
    color: #818181 !important;
  }
 html body hr {
  height: 1px !important;
 }
 .postDetail li {
    list-style: circle !important;
  }
</style>

]]></content>
      <categories>
        <category>Notes</category>
      </categories>
      <tags>
        <tag>japanese</tag>
      </tags>
  </entry>
  <entry>
    <title>frontend</title>
    <url>/2021/11/17/notes_js/</url>
    <content><![CDATA[<h2 id="rxjs"><a href="#rxjs" class="headerlink" title="rxjs"></a>rxjs</h2><p>features:</p>
<ul>
<li>one-directional data flow, from the Observable to the Subscriber</li>
<li>in a <code>push</code> system<ul>
<li><code>push</code>: the Producer determines when to send data to the Consumer. like <code>promise</code></li>
<li><code>pull</code>: the Consumer determines when to get data. like <code>generator</code> or a normal function</li>
</ul>
</li>
<li><code>multicast</code> and <code>unicast</code><ul>
<li><code>unicast</code> by default<ul>
<li>one producer is observed by only one consumer</li>
<li><code>lazy execution</code>, a producer starts to execute when a consumer is subscribed to it</li>
</ul>
</li>
<li>achieve <code>multicast</code> by using <code>Subjects</code>, one producer is observed by many consumers, like <code>EventEmitters</code></li>
</ul>
</li>
<li><code>cold observable</code> and <code>hot observable</code><ul>
<li><code>cold observable</code>: emits values only when it is subscribed to, the consumer receives values from beginning. is <code>unicast</code>.</li>
<li><code>hot observable</code>: like websoket, emits values regardless of whether there are any subscribers, the consumer from where the Observable currently is—not from the beginning. is <code>multicast</code>.</li>
</ul>
</li>
</ul>
<p><code>Observable</code>, a data stream that allow to be subscribe to</p>
<p><code>Observer</code>, an object with three callbacks to response the three notifications <code>next</code> <code>error</code> <code>complete</code><br><code>Subject</code>, open to observers for subscribing, like <code>EventEmitters</code>: they maintain a registry of many listeners.</p>
<ul>
<li>allows convert a <code>unicast</code> Observable execution to <code>multicast</code></li>
<li>Subject, doesn’t care about value</li>
<li>BehaviorSubject, will store the current value</li>
<li>ReplaySubject, will send old values to new subscribers</li>
<li>AsyncSubject, only the last value will send to its observers at <code>subject.complete()</code></li>
</ul>
<p><code>Scheduler</code>, managing concurrency, dictates how and when the operations should be scheduled in time.</p>
<ul>
<li>queueScheduler</li>
<li>asapScheduler</li>
<li>asyncScheduler</li>
<li>animationFrameScheduler</li>
</ul>
<p>Operators allow complex asynchronous code to be easily composed</p>
<ul>
<li><code>Creation Operators</code>, can be called as standalone functions to create a new Observable.</li>
<li><code>Pipeable operators</code></li>
</ul>
<h2 id="Micro-Frontend"><a href="#Micro-Frontend" class="headerlink" title="Micro-Frontend"></a>Micro-Frontend</h2><p><a href="https://tong-h.github.io/2025/01/23/micro_frontend">blog: 微前端实践:single-spa+vite</a></p>
<p><strong>web components</strong></p>
<ul>
<li>enables to attach a DOM tree to an element, and have the internals of this tree hidden from JavaScript and CSS running in the page. therefore, natural encapsulation for both styles and behavior</li>
<li>should be great for small, reusable pieces of UI, building and managing large-scale complex UIs purely with Web Components can be cumbersome</li>
</ul>
<p><strong>webpack module federation</strong></p>
<ul>
<li><p>each micro-frontend app bundling all of its dependencies. In the browser, if any shared dependency are downloaded, the subsequent micro-frontend apps will reuse that shared dependency without re-downloading</p>
</li>
<li><p>nginx deploy for a spa app</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="comment"># serves the index.html for all routes.</span></span><br><span class="line">location / &#123;</span><br><span class="line">      try_files <span class="variable">$uri</span> /index.html;</span><br><span class="line">      add_header Access-Control-Allow-Origin *;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment"># handles static assets</span></span><br><span class="line"><span class="comment"># ~* means case-insensitive regular expression matching</span></span><br><span class="line">location ~* \.(?<span class="symbol">:ico|css|js|gif|jpe?g|png|svg|woff2?|eot|ttf|otf|webp|avif</span>)<span class="variable">$ </span>&#123;</span><br><span class="line">    expires <span class="number">6</span>M; <span class="comment"># Cache these assets for six months</span></span><br><span class="line">    access_log off; <span class="comment"># Disable logging for static assets</span></span><br><span class="line">    add_header Cache-Control <span class="string">&quot;public&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>export a desired lifecycle through <code>vite-plugin-Single-Spa</code> which requires: <code>type: &quot;module&quot;</code> explicitly exists in <code>package.json</code></p>
<ul>
<li><a href="https://github.com/vitejs/vite/issues/5316">an issue with how vite treat ESM (ES modules)</a>.<br>CommonJS files need to be explicitly named as .cjs</li>
</ul>
</li>
<li><p>vue.esm-bundler vs vue.runtime.esm-bundler.js</p>
<ul>
<li>an import named <code>vue_runtime_esmBundler</code> may exist after vite build</li>
</ul>
</li>
</ul>
<h2 id="gitlab-ci-cd"><a href="#gitlab-ci-cd" class="headerlink" title="gitlab ci/cd"></a>gitlab ci/cd</h2><p><a href="https://tong-h.github.io/2025/01/23/gitlab_cicd/">blog: 使用 Gitlab CI/CD 自动打包和部署微前端</a></p>
<h2 id="Monorepos"><a href="#Monorepos" class="headerlink" title="Monorepos"></a>Monorepos</h2><ul>
<li>a single repository containing multiple distinct projects, with well-defined relationships. like app and web projects are exist in one repo, they share same libraries, logic and config files</li>
<li><strong>code colocation</strong> the practice of grouping related pieces of code together within your project’s directory structure.</li>
</ul>
<h2 id="Time-Complexity"><a href="#Time-Complexity" class="headerlink" title="Time Complexity"></a>Time Complexity</h2><p>the growth rate of the runtime as the input size increases.</p>
<ul>
<li>O(1): Constant time – the execution time does not change with the input size.</li>
<li>O(n): Linear time – the execution time grows linearly with the input size.</li>
<li>O(log n)</li>
</ul>
<h2 id="Design-Patterns"><a href="#Design-Patterns" class="headerlink" title="Design Patterns"></a>Design Patterns</h2><h3 id="method-chaining"><a href="#method-chaining" class="headerlink" title="method chaining"></a>method chaining</h3><p>a concept, one function returns the current(refer to <code>this</code> in js) object and another function can use values in <code>this</code>.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">chaining</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="title">Method1</span>(<span class="params">v</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.v = v</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">Method2</span>(<span class="params">v</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.v = v</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> chaining_obj = <span class="keyword">new</span> chaining()</span><br><span class="line">chaining_obj.Method1(<span class="number">1</span>).Method2(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<h2 id="the-principles-of-component-design"><a href="#the-principles-of-component-design" class="headerlink" title="the principles of component design"></a>the principles of component design</h2><ol>
<li><strong>single responsibility principle</strong>. to compose complex components by smaller specialized components.</li>
<li><strong>conceals</strong> the construction of components, and only <strong>reveals</strong> the necessary information</li>
<li>To ensure predictability and determinacy of components, <strong>always return the same output for a given input</strong></li>
<li><strong>keep loose coupling</strong>, instead of tight coupling. Components should have little or no knowledge about others.</li>
<li><strong>composable</strong>. Composition is a way to combine components to create a bigger component</li>
<li><strong>reuseable</strong></li>
<li><strong>pure or almost pure function</strong> which means no side effects and doesn’t depend on the environment or the global state, such as network or global variables.</li>
<li><strong>isolate the impure code</strong> from the pure</li>
<li><strong>straightforward to test</strong></li>
<li><strong>a meaningful name</strong>. If a component’s usage is highly specific, its name may contain more words, like <code>&lt;HeaderMenu&gt;</code> <code>&lt;Header&gt;</code></li>
<li><strong>Open Closed principle</strong>，software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification</li>
</ol>
<p><strong>the levels of a component based on its usage</strong><br>    1. Reading name and props; <strong>best</strong><br>    2. Consulting documentation; <strong>good</strong><br>    3. Exploring the code; <strong>admissible</strong><br>    4. Asking the author. <strong>avoid</strong></p>
<h2 id="performance-optimization"><a href="#performance-optimization" class="headerlink" title="performance optimization"></a>performance optimization</h2><ul>
<li>avid <code>reflow</code> and <code>repaint</code></li>
<li>utilize <code>prefetch</code> and <code>preload</code> to enhance the execution order of js and prevent it from blocking HTML rendering</li>
<li>enable GZIP compression on the server</li>
<li>minimize the number of DOM elements and keep the DOM structure as simple as possible</li>
<li>lazy loading</li>
<li>virtual scroll<ul>
<li>listen to scroll event, only render the items within the visible area of parent element according the <code>scrollTop</code> and the visible height of the parent</li>
<li><em>dynamic height</em></li>
<li>Use the estimated height initially, and then replace the position value with the actual DOM height after rendering. Add a buffer area by rendering a few items at the top and bottom of the visible area. This provides more time to render and calculate for a smooth scrolling experience.</li>
</ul>
</li>
</ul>
<h2 id="browser-rendering"><a href="#browser-rendering" class="headerlink" title="browser rendering"></a>browser rendering</h2><h3 id="the-rendering-process"><a href="#the-rendering-process" class="headerlink" title="the rendering process"></a>the rendering process</h3><ul>
<li>the browser obtains the <code>IP address</code> from the <code>domain name</code> by <code>DNS(domain name system) analysis</code><ul>
<li>establish a <code>tcp</code> connection with the server</li>
<li>send an <code>http request</code></li>
<li>server receives the request and responds with html content</li>
</ul>
</li>
<li>the browser parses html and CSS, forming a DOM tree and a CSSOM (CSS Object Model)</li>
<li><code>DOM</code> and <code>CSSOM</code> are starts in parallel, once both are ready, they are combined to create the <code>Render Tree</code><ul>
<li>only the nodes necessary for display are include in the <code>Render Tree</code></li>
<li><code>blocking resource</code> (like a stylesheet, or an external script without <code>async</code> or <code>defer</code>) will affect the layout, so the browser will pauses rendering until those resources are loaded and executed.<ul>
<li><code>Stylesheets</code> block rendering but do not block DOM construction</li>
<li>css may put before js execution, since some scripts rely on computed styles (e.g., getComputedStyle)</li>
</ul>
</li>
</ul>
</li>
<li>Compositing (GPU Acceleration &amp; Layers)<ul>
<li>Complex pages split into layers</li>
<li>The GPU renders layers separately and composites them efficiently.</li>
<li>elements with those properties <code>position: fixed;</code> <code>will-change: transform;</code> <code>opacity animations</code> <strong>get their own layer</strong></li>
</ul>
</li>
</ul>
<p><strong>GUI rendering thread and JS engine thread</strong></p>
<p>GUI(graphical user interface) rendering thread and JS engine thread are <code>mutual exclusive</code>. The rendering process pauses during the download, analysis, and execution of JS. When the browser encounters JS during the rendering process, it halts rendering to construct the rendering tree and passes control to the JS engine .</p>
<h3 id="reflow-and-repaint"><a href="#reflow-and-repaint" class="headerlink" title="reflow and repaint"></a>reflow and repaint</h3><ol>
<li><strong>reflow</strong>: When changes in DOM geometrical properties (like width, height, or display) affect the page layout or the position of other elements, the browser must recalculate the page’s layout.</li>
<li><strong>repaint</strong>: when the style(like color, background) of dom are changed<br>If <code>repaint</code> doesn’t affect the geometrical size of the DOM elements, then <code>reflow</code> isn’t required. However, <code>reflow</code>  will inevitably trigger <code>repaint</code>.</li>
</ol>
<h3 id="renderOptimization"><a href="#renderOptimization" class="headerlink" title="renderOptimization"></a>renderOptimization</h3><ul>
<li>Use media=”print” or preload for non-blocking CSS.</li>
<li><strong>avid <code>reflow</code> and <code>repaint</code> as much as possible</strong><ul>
<li>use <code>transform</code> instead of <code>positive and top</code>, the former performs changes in the GPU instead of <code>causing</code> reflow and occupying the rendering thread.</li>
<li>use <code>visibility</code> instead of <code>display:none</code>, the former incur repaint only while the latter will change layout</li>
<li>accessing properties like <code>offsetWidth</code>, <code>offsetHeight</code>, or <code>getComputedStyle()</code> can trigger <code>reflow</code></li>
</ul>
</li>
<li>instead of making multiple small changes to the DOM, try to make all necessary <strong>changes in one go</strong>.</li>
<li>use browser developer tools to <strong>monitor performance metrics</strong> like reflows, repaints, and rendering performance.</li>
<li><strong>requestAnimationFrame</strong></li>
<li><code>will-change</code> to <strong>inform the browser in advance about potential changes</strong> to an element<ul>
<li>don’t overuse and remove it after use. <a href="#https://developer.mozilla.org/en-US/docs/Web/CSS/will-change">Some of the stronger optimizations that are likely to be tied to will-change end up using a lot of a machine’s resources, and when overused like this can cause the page to slow down or consume a lot of resources</a></li>
<li>particularly useful for <code>animations</code> and <code>transitions</code>, since elements with those properties are changed frequently</li>
<li><code>scroll-position</code>, to improve scroll performance when an element is going to change due to scrolling</li>
</ul>
</li>
<li><code>contain</code> <strong>restricting a given element’s scope</strong> for layout, style, paint, and size calculations</li>
<li><code>backface-visibility: hidden</code> Prevents unnecessary rendering of the back side of an element</li>
<li><code>contain-intrinsic-size</code> Helps browsers allocate space for lazy-loaded images or dynamic content, best for skeleton screens</li>
</ul>
<h2 id="SVG"><a href="#SVG" class="headerlink" title="SVG"></a>SVG</h2><h3 id="properties"><a href="#properties" class="headerlink" title="properties"></a>properties</h3><p>width/height: define the size in the document<br>viewBox: first two number are min-x and min-y used to define the position,  the other two are define the scale relative to width/height</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">when the viewBox is same as width/height, then the dimension is 1. if it is smaller than width/height, then the dimension is larger than 1, and vice versa.</span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 200 200&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">height</span>=<span class="string">&quot;200&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="path"><a href="#path" class="headerlink" title="path"></a>path</h3><p><strong>M</strong>: move to</p>
<p><strong>L</strong>: line to</p>
<p><strong>H</strong>: a horizontal line</p>
<p><strong>V</strong>: a vertical line</p>
<p><strong>Z</strong>: close path, combine the start and the end</p>
<p><strong>C</strong>: curve, x1 y1 x2 y2 x y, the last set x y specify where the line should end and the line start at  the point where the last operation ended, the first two are control points.</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">svg</span> <span class="attr">className</span>=<span class="string">&quot;selected-round-btm&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 8 8&quot;</span> <span class="attr">width</span>=<span class="string">&quot;8&quot;</span> <span class="attr">height</span>=<span class="string">&quot;8&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M 0,8 L 8,8 L 8,0 C 8,0 8,8 0,8 &quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#fff&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;0&quot;</span> <span class="attr">r</span>=<span class="string">&quot;8&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;#e4e4e4&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>S</strong>: smooth curveto</p>
<p><strong>A</strong>: an arc, <code>rx ry x-axis-rotation large-arc-flag sweep-flag x y</code></p>
<ul>
<li><p><code>rx ry</code> radius x and radius y</p>
</li>
<li><p><code>x-axis-rotation</code></p>
</li>
<li><p><code>large-arc-flag</code> determines that the arc should be greater than or less than 180 degrees.</p>
</li>
<li><p><code>sweep-flag</code> determines that the drawing direction is clockwise or anticlockwise.</p>
</li>
<li><p><code>x y</code> the ending point calculated with angle, while the arc starting point is at three o’clock of a circle, <code>circle center + radius = the arc starting point</code></p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// get the ending point with an angle</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">polarToCartesian</span>(<span class="params">centerX, centerY, radius, angleInDegrees</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> angleInRadians = (angleInDegrees * <span class="built_in">Math</span>.PI) / <span class="number">180.0</span> <span class="comment">// the length of the arc</span></span><br><span class="line">	<span class="keyword">const</span> largeArcFlag = angleInDegrees &lt;= <span class="number">180</span> ? <span class="string">&quot;0&quot;</span> : <span class="string">&quot;1&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> x = centerX + radius * <span class="built_in">Math</span>.cos(angleInRadians)</span><br><span class="line">  <span class="keyword">const</span> y = centerY + radius * <span class="built_in">Math</span>.sin(angleInRadians)</span><br><span class="line">  <span class="keyword">return</span> [radius, radius, largeArcFlag, <span class="number">0</span>, x, y]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><em>a 360-degree circle can’t be done by one arc</em>, since the end point are same with the start point. but it consist of two arcs.</p>
<ul>
<li><code>&quot;M 140 80 A 60 60 0 0 0 20 80</code> + <code>60 60 0 1 0 140 80</code></li>
</ul>
</li>
</ul>
<p><strong>Q</strong>: x1 y1, x y, quadratic Bézier curve, to control the slope of two sides with one point, which is  the first set<br><strong>T</strong>: x y, smooth quadratic Bézier curveto, auto control the slope of two sides according to the last control point</p>
<h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><blockquote>
<p><strong>in &amp;&amp; in2</strong>, SourceGraphic | SourceAlpha | BackgroundImage | BackgroundAlpha | FillPaint | StrokePaint | <filter-primitive-reference><br>1.<code>in</code> is the first input, and <code>in2</code> is the second input, while the placing order is same with the layer order of PS<br>2.if <code>in</code> is not existed, then the value will be the previous filter input</filter-primitive-reference></p>
</blockquote>
<ul>
<li><strong>feBlend</strong>, to blend two layers ruled by a certain blending mode<ul>
<li><code>in</code></li>
<li><code>in2</code></li>
<li><code>mode</code></li>
</ul>
</li>
<li><strong>feComposite</strong>, to combine two input images<ul>
<li><code>in</code></li>
<li><code>in2</code></li>
<li><code>operator</code>, compositing operations</li>
</ul>
</li>
</ul>
<h3 id="animation"><a href="#animation" class="headerlink" title="animation"></a>animation</h3><ul>
<li>SVG animation is not css animation,  it’s part of the <code>SVG animation specification</code>, specifically within the <code>SMIL (Synchronized Multimedia Integration Language)</code> animations in SVG.<br>it runs on the browser’s <code>compositor thread</code>, reducing the load on the main JavaScript thread.</li>
</ul>
<h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><h3 id="anchor-position"><a href="#anchor-position" class="headerlink" title="anchor position"></a>anchor position</h3><h3 id="stacking-context"><a href="#stacking-context" class="headerlink" title="stacking context"></a>stacking context</h3><p>Special properties like <code>z-index</code> will cause elements to form a <code>stacking context 层叠上下文</code>, as those properties can change the render order of elements on the page if their values are set to something rather than <code>none</code></p>
<p>position, opacity, filter, transform, <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_positioned_layout/Understanding_z-index/Stacking_context#description">detailed list of such special properties</a></p>
<h3 id="selector"><a href="#selector" class="headerlink" title="selector"></a>selector</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* nth-of-type and nth-child, the former according to the order of a given type, while the latter according to the order of children*/</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">2</span>) &#123; &#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:nth-of-type</span>(odd) &#123; &#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:nth-of-type</span>(even) &#123; &#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">3</span>n) &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* select p which is behind h1*/</span></span><br><span class="line"><span class="selector-tag">h1</span> + <span class="selector-tag">p</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*select all the children of container*/</span></span><br><span class="line"><span class="selector-class">.container</span> &gt; * &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* according to element&#x27;s attributes */</span></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;button&quot;</span>]</span> &#123; &#125;</span><br></pre></td></tr></table></figure>

<h3 id="box-module"><a href="#box-module" class="headerlink" title="box module"></a>box module</h3><p>standard box: only content is included in <code>with / height</code><br>IE box: border + padding + content = <code>with / height</code></p>
<p>box-sizing: content-box = standard<br>box-sizing: border-box = IE</p>
<h3 id="layouts"><a href="#layouts" class="headerlink" title="layouts"></a>layouts</h3><ul>
<li><p><strong>adaptive design</strong>: multiple predefined layouts are created for different screen sizes</p>
</li>
<li><p><strong>responsive design</strong>: use flexible grids and elements that automatically adjust and reflow based on the viewport size</p>
</li>
<li><p>物理像素：计算机硬件，真实屏幕的像素点</p>
</li>
<li><p>css像素：属于逻辑像素的一种</p>
</li>
<li><p>设备像素比（Device Pixel Ratio，DPR）：物理像素与逻辑像素之比吗，比如iphone6物理像素是750 x1334，但实际逻辑像素是 375* 667，所以dpr = 2，这表示iphone6采用高清屏使用两个像素去渲染一个像素使画面更高清，iphone6 plus 甚至是dpr = 3</p>
</li>
<li><p>1px 问题：设计师的视觉稿是相对于物理像素750px，实现一个1px边框，但css逻辑像素是375px，border-width:0.5px 使用transform: scale(0.5)</p>
</li>
<li><p><strong>% + meta</strong></p>
</li>
<li><p>vw/vh/% + px + flex layout，响应式布局</p>
</li>
<li><p>flex + vw/v/%h布局，局部使用px</p>
</li>
<li><p>在跨设备类型的时候（pc &lt;-&gt; 手机 &lt;-&gt; 平板）使用媒体查询</p>
</li>
<li><p>rem ，响应式布局，动态设置 root 的 fontsize，子节点使用rem，和flexible不同的是可以根据pc、手机、平板的尺寸来设置比例使子节点计算方便</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> deviceWidth = <span class="built_in">document</span>.documentElement.clientWidth</span><br><span class="line">deviceWidth = deviceWidth &lt; <span class="number">320</span> ? <span class="number">320</span> : deviceWidth &gt; <span class="number">640</span> ? <span class="number">640</span> : deviceWidth</span><br></pre></td></tr></table></figure>

<h4 id="flexible-self-adoption"><a href="#flexible-self-adoption" class="headerlink" title="flexible, self-adoption"></a>flexible, self-adoption</h4><p><strong>模拟vw特性</strong>，动态的将页面宽度的1/10作为根节点的 fontsize，子节点使用rem就等于是按照页面比例计算</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> doc = <span class="built_in">document</span>.documentElement</span><br><span class="line"><span class="keyword">var</span> rem = doc.clientWidth / <span class="number">10</span></span><br><span class="line">doc.style.fontSize = rem + <span class="string">&#x27;px&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>高倍屏适配</strong>，修改了等比缩放视口的scale值，使得clientWidth变为物理像素尺寸，1物理像素等于1css像素，由原来的375=&gt;750, media尺寸查询语句也同样需要修改</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> metaEL = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;meta[name=&quot;viewport&quot;]&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> dpr = <span class="built_in">window</span>.devicePixelRatio</span><br><span class="line"><span class="keyword">var</span> scale = <span class="number">1</span> / dpr</span><br><span class="line">metaEL.setAttribute(<span class="string">&#x27;content&#x27;</span>, <span class="string">&#x27;width=device-width, initial-scale=&#x27;</span> + scale + <span class="string">&#x27;, maximum-scale=&#x27;</span> + scale + <span class="string">&#x27;, minimum-scale=&#x27;</span> + scale + <span class="string">&#x27;, user-scalable=no&#x27;</span>)</span><br><span class="line"><span class="built_in">document</span>.documentElement.style.fontSize = deviceWidth / <span class="number">7.5</span> + <span class="string">&#x27;px&#x27;</span> <span class="comment">// 7.5并不固定</span></span><br></pre></td></tr></table></figure>

<h4 id="flex-and-grid"><a href="#flex-and-grid" class="headerlink" title="flex and grid"></a>flex and grid</h4><p><code>Flex</code> was designed for layout in one dimension - aligning items dynamically in a single row or column. best for a small and sample component, like a nav bar, or buttons in a row<br><code>Grid</code> was designed for two-dimensional layout - rows, and columns at the same time. best for a full page layout, product list</p>
<h4 id="centered-and-vertically-aligned-layout"><a href="#centered-and-vertically-aligned-layout" class="headerlink" title="centered and vertically aligned layout"></a>centered and vertically aligned layout</h4><ul>
<li><p>Flex</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Grid</p>
</li>
<li><p><code>display: table</code> and <code>display: table-cell;vertical-align: middle;</code></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: table;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: table-cell;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>position</code> and <code>transform</code></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="others"><a href="#others" class="headerlink" title="others"></a>others</h3><ul>
<li><p>text linear-gradient</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attribute">color</span>: transparent;</span><br><span class="line">  -webkit-<span class="attribute">background-clip</span>: text;</span><br><span class="line">  <span class="attribute">background-clip</span>: text;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(<span class="number">130deg</span>,red,black);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>browsers (like chrome) can set a <code>minimum fontsize</code> which can’t be overthrow, but <code>transform: scale</code> can be a workaround</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  <span class="comment">// set an unseen element for getting the minimum size</span></span><br><span class="line"><span class="keyword">const</span> minimumSize = <span class="built_in">Number</span>.parseInt(<span class="built_in">window</span>.getComputedStyle(<span class="built_in">document</span>.getElementById(<span class="string">&quot;minimumSize&quot;</span>), <span class="literal">null</span>).getPropertyValue(<span class="string">&quot;font-size&quot;</span>).replace(<span class="regexp">/px/</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">  <span class="comment">// generate different scales based on the minimumSize</span></span><br><span class="line">  <span class="comment">//the app has been set to fit `window.devicePixelRatio`  in this situation. so the fontsize takes rem as unit,  and item * fontSize is purposed to get the original size.</span></span><br><span class="line"><span class="keyword">const</span> fontSizes = [<span class="number">1.2</span>, <span class="number">1.3</span>, <span class="number">1.4</span>, <span class="number">1.6</span>, <span class="number">2</span>, <span class="number">2.8</span>].map(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">	<span class="keyword">const</span> _s = item * fontSize &lt; minimumSize ? item * fontSize / minimumSize : <span class="number">1</span></span><br><span class="line">	<span class="keyword">return</span> <span class="string">`--fontSize<span class="subst">$&#123;item.toString().replace(<span class="regexp">/\./</span>, <span class="string">&quot;&quot;</span>)&#125;</span>:<span class="subst">$&#123;_s&#125;</span>;`</span></span><br><span class="line">&#125;).join(<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>transform</code> doesn’t work on inline elements</p>
</li>
<li><p>use <code>position: sticky</code> with <code>flex layout</code>. the sticked elements may still moving when user scrolling.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- set flex&#x27;s width to the sum total of all the cell widths 250vw to fix the problem --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span> <span class="attr">style</span>=<span class="string">&quot;overflow: auto&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex&quot;</span><span class="attr">style</span>=<span class="string">&quot;display: flex&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 25vw;flex-shrink: 0;background: green; position: sticky; left: 0&quot;</span>&gt;</span>cell<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 25vw;flex-shrink: 0;background: green;position: sticky; left: 25vw&quot;</span>&gt;</span>cell<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 25vw;flex-shrink: 0;background: red&quot;</span>&gt;</span>cell<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 25vw;flex-shrink: 0;background: red&quot;</span>&gt;</span>cell<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 25vw;flex-shrink: 0;background: red&quot;</span>&gt;</span>cell<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 25vw;flex-shrink: 0;background: red&quot;</span>&gt;</span>cell<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 25vw;flex-shrink: 0;background: red&quot;</span>&gt;</span>cell<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 25vw;flex-shrink: 0;background: red&quot;</span>&gt;</span>cell<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 25vw;flex-shrink: 0;background: red&quot;</span>&gt;</span>cell<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 25vw;flex-shrink: 0;background: red&quot;</span>&gt;</span>cell<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>text ellipsis</p>
<ul>
<li><p><code>text-overflow: ellipsis</code> only applies to single line</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.single</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">  <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>multiple lines</code></p>
<ul>
<li>use <code>after pseudo class</code> to  display “…” after the text</li>
<li>cut off the text through js</li>
</ul>
</li>
</ul>
</li>
<li><p><code>attr()</code></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.test</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;我的内容是&#x27;</span> <span class="built_in">attr</span>(text) <span class="string">&#x27;颜色是&#x27;</span> <span class="built_in">attr</span>(data-color);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;test&quot;</span> <span class="attr">data-text</span>=<span class="string">&quot;TEXT&quot;</span> <span class="attr">data-color</span>=<span class="string">&quot;red&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>shape-outside</code> make the adjoining inline-elements around itself</p>
</li>
<li><p><code>pseudo-elements</code>, don’t work on img/select/input</p>
<ul>
<li><code>::before</code> and <code>::after</code> can add elements, and clean float.</li>
<li><code>::first-line</code>, <code>::first-letter</code>, <code>::selection</code></li>
</ul>
</li>
<li><p><code>pseudo-class</code></p>
<ul>
<li><code>:enabled</code> and `:disabled</li>
<li><code>:checked</code></li>
<li><code>:nth-child(n)</code>, <code>:nth-of-type(n)</code></li>
</ul>
</li>
<li><p>element hiding</p>
<ul>
<li><code>transform: scale(0,0)</code> will not respond to event  listeners</li>
<li><code>visibility:visible</code> can display children whose parent is hidden by <code>visibility:hidden</code></li>
</ul>
</li>
<li><p>Browsers render empty characters between inline elements as whitespace.</p>
</li>
</ul>
<h2 id="Storage"><a href="#Storage" class="headerlink" title="Storage"></a>Storage</h2><ul>
<li><p><strong>cookie</strong>, 4kb, can set the expire time, <code>httpOnly = true</code> means this cookie is set by server and can only be changed by server</p>
</li>
<li><p><strong>localStorage</strong> <strong>sessionStorage</strong>, maximum size 5MB</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">localStorage</span>.setItem(<span class="string">&#x27;chooseId&#x27;</span>,<span class="built_in">JSON</span>.stringify(<span class="built_in">this</span>.$route.params))</span><br><span class="line"><span class="built_in">localStorage</span>.removeItem(<span class="string">&#x27;chooseId&#x27;</span>)</span><br><span class="line"><span class="built_in">localStorage</span>.clear()</span><br><span class="line"><span class="built_in">localStorage</span>.key(index)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>indexedDB</strong> no size limits, it can be used like a database</p>
</li>
<li><p><strong>caches</strong>, an object which include <code>cache  instance</code>s, each <code>cache instance</code> can viewed as a storage region. the return type of all the methods of <code>caches</code> or <code>cache instance</code> is <code>promise</code>.</p>
<ul>
<li><p>methods which are mounted on <code>caches</code> are used for managing <code>cache instance</code>s.</p>
<ul>
<li><code>caches</code>: <code>keys</code> <code>open</code> <code>delete</code> <code>has</code> <code>match</code></li>
<li>differ between <code>has</code> and match: has return boolean while match give you the data</li>
</ul>
</li>
<li><p>if we want to store something, then we need to use <code>open</code> to get a <code>cache instance</code> where is our data stay</p>
<ul>
<li><p><code>cache</code> instance: <code>add</code> <code>addAll</code> <code>keys</code> <code>delete</code> <code>match</code> <code>matchAll</code> <code>put</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// differ between `add` and `put`: add can `fetch` and `store` the data automatically, but also because of automatically then we can&#x27;t make changes on key and value to be stored</span></span><br><span class="line"><span class="comment">// so fetch + put = add</span></span><br><span class="line">cache.add(request).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// request has been added to the cache</span></span><br><span class="line">&#125;);</span><br><span class="line">fetch(url).then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> cache.put(url, response);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>when use <code>cache with service worker</code>, the data we stored is the raw <code>response</code> returned by <code>http</code></p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="RegExp-regular-expression"><a href="#RegExp-regular-expression" class="headerlink" title="RegExp (regular expression)"></a>RegExp (regular expression)</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> re = <span class="keyword">new</span> <span class="built_in">RegExp</span>(“a”, <span class="string">&quot;img&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> re = <span class="regexp">/a/img</span>;</span><br></pre></td></tr></table></figure>

<h3 id="modifier"><a href="#modifier" class="headerlink" title="modifier"></a>modifier</h3><ul>
<li><code>i</code> ignore uppercase and lowercase of letters</li>
<li><code>g</code> global matching, to search from the start to the end whatever how much</li>
<li><code>m</code> matching on multiple lines</li>
<li>es6 <code>u</code> turn on <code>Unicode mode</code> to deal with Unicode characters</li>
<li>es6 <code>y</code> similar with <code>g</code>, but it’s match work started form the beginning of the string<ul>
<li>it’s effect is equal to add <code>^</code> at the beginning of a regexp, so it could regarded as a complement  for that <code>g</code> couldn’t add <code>^</code></li>
<li><code>sticky</code>, new property of RegExp, to know the regexp is added <code>y</code> or not</li>
</ul>
</li>
</ul>
<h3 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h3><ul>
<li><p>es6 <code>regexp.flags</code>, get all the modifiers</p>
</li>
<li><p>es6 <code>regexp.source</code>, get the regexp context</p>
</li>
<li><p><code>regexp.lastIndex</code>, allow you to define and get the index from where the next match work started</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> REGEX = <span class="regexp">/a/g</span>;</span><br><span class="line">REGEX.lastIndex = <span class="number">2</span>; <span class="comment">// to define the index</span></span><br><span class="line"><span class="keyword">const</span> match = REGEX.exec(<span class="string">&#x27;match a string&#x27;</span>);</span><br><span class="line">match.index <span class="comment">// 6</span></span><br><span class="line">REGEX.lastIndex <span class="comment">// 7， to get the index</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>test(), is matching or not</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">regExp.test(str) <span class="comment">// boolean</span></span><br></pre></td></tr></table></figure>

<p>search()</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">string.search(regExp) <span class="comment">// return an index or -1</span></span><br></pre></td></tr></table></figure>

<p>replace(), es6 replaceAll</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">string.replace(regExp, replaceText) <span class="comment">// return the replaced string</span></span><br></pre></td></tr></table></figure>

<p>exec()</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">regExp.exec(string) <span class="comment">// return an array of information which include lastIndex, allow you to match along the last position.</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// use with while</span></span><br><span class="line"><span class="keyword">var</span> regExp = <span class="regexp">/t(e)(st(\d?))/g</span>;</span><br><span class="line"><span class="keyword">var</span> string = <span class="string">&#x27;test1test2test3&#x27;</span>;</span><br><span class="line"><span class="keyword">while</span> (match = regExp.exec(string)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(match)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>with named capture groups(具名组匹配), you can get the data of each group which declared by <code>()</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> regExp = <span class="regexp">/(?&lt;year&gt;\d&#123;4&#125;)-(?&lt;month&gt;\d&#123;2&#125;)-(?&lt;day&gt;\d&#123;2&#125;)/</span></span><br><span class="line"><span class="keyword">const</span> matchObj = regExp.exec(<span class="string">&#x27;1999-12-31&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>match(), es6 matchAll</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;For more information, see Chapter 3.4.5.1&#x27;</span>.match( <span class="regexp">/see (chapter \d+(\.\d)*)/i</span>) <span class="comment">// return an array of information</span></span><br></pre></td></tr></table></figure>

<h3 id="symbols"><a href="#symbols" class="headerlink" title="symbols"></a>symbols</h3><p><strong>PS</strong> Safari does not support <code>?!=n</code> <code>?&lt;=n</code> <code>?&lt;!=n</code> <code>?:n</code></p>
<table>
<thead>
<tr>
<th>key</th>
<th>usage</th>
</tr>
</thead>
<tbody><tr>
<td><code>()</code></td>
<td>Parentheses, to group regular expressions</td>
</tr>
<tr>
<td><code>[]</code></td>
<td>match any character within the brackets</td>
</tr>
<tr>
<td><code>^</code>  <code>$</code></td>
<td>match from the start or the end of the string</td>
</tr>
<tr>
<td><code>[^a]</code></td>
<td>match string which no ”a“</td>
</tr>
<tr>
<td><code>&#123;n,m&#125;</code></td>
<td>the display times &gt; n and &lt; m</td>
</tr>
<tr>
<td><code>&#123;n,&#125;</code></td>
<td>the display times &gt; n</td>
</tr>
<tr>
<td><code>&#123;,m&#125;</code></td>
<td>the display times &lt; m</td>
</tr>
<tr>
<td><code>*</code></td>
<td>equal to {0,}</td>
</tr>
<tr>
<td><code>+</code></td>
<td>equal to {1,}</td>
</tr>
<tr>
<td><code>?</code></td>
<td>equal to {,1},  /.*?(\d)/, when ? is used with greed mode, it means to exclude a specific format</td>
</tr>
<tr>
<td>|</td>
<td>a|b === a or b</td>
</tr>
<tr>
<td><code>.</code></td>
<td>equal to {1,}</td>
</tr>
<tr>
<td><code>.*</code></td>
<td>greedy mode</td>
</tr>
<tr>
<td><code>.*?</code></td>
<td>the regex engine will, at every step it matches text into the “.” attempt to match whatever make come after the “.*?”</td>
</tr>
<tr>
<td><code>\d</code></td>
<td>equal to <code>[0-9]</code></td>
</tr>
<tr>
<td><code>\D</code></td>
<td>equal to <code>[^0-9]</code></td>
</tr>
<tr>
<td><code>\w</code></td>
<td>equal to <code>[a-zA-Z_]</code></td>
</tr>
<tr>
<td><code>\W</code></td>
<td>equal to <code>[^/w]</code></td>
</tr>
<tr>
<td><code>\s</code></td>
<td>equal to <code>[ \f\n\r\t\v]</code>(换页,enter,空格,tab,垂直制表符) , matching all the empty characters</td>
</tr>
<tr>
<td><code>\S</code></td>
<td>equal to <code>[^/s]</code></td>
</tr>
<tr>
<td><code>/S/s</code></td>
<td>all the characters</td>
</tr>
<tr>
<td>(.|\n)*</td>
<td>to match any characters across multiple line</td>
</tr>
<tr>
<td><code>?=n</code></td>
<td>match string but don’t get, the string <strong>after</strong> which <strong>is</strong> n</td>
</tr>
<tr>
<td><code>?!=n</code></td>
<td>match string but don’t get, the string <strong>after</strong> which <strong>isn’t</strong> n</td>
</tr>
<tr>
<td><code>?&lt;=n</code></td>
<td>(incompatible with safari) match string but don’t get, the string <strong>before</strong> which <strong>is</strong> n</td>
</tr>
<tr>
<td><code>?&lt;!=n</code></td>
<td>match string but don’t get, the string <strong>before</strong> which <strong>isn’t</strong> n</td>
</tr>
<tr>
<td><code>?:n</code></td>
<td>match string but don’t get</td>
</tr>
</tbody></table>
<h3 id="examples"><a href="#examples" class="headerlink" title="examples"></a>examples</h3><p>to match every character except ,;</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/[^,;]+/</span><br></pre></td></tr></table></figure>

<p>to match a string, stop matching until a specific format is encountered</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// ?(?=hello) match string but don&#x27;t get</span></span><br><span class="line"> <span class="comment">// ?(hello) match string and get</span></span><br><span class="line"><span class="string">&#x27;&quot;/public/images/index/组 4099.png&quot;,&quot;textAlign&quot;:&quot;&#x27;</span>.match(<span class="regexp">/public\/images\/(.*?(?=&quot;))/img</span>)</span><br></pre></td></tr></table></figure>

<p>verify float number, two standards judged by <code>|</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/^(([<span class="number">0</span>-<span class="number">9</span>]+\.?[<span class="number">0</span>-<span class="number">9</span>]+)|([<span class="number">0</span>-<span class="number">9</span>]*))$/.test(<span class="string">&quot;5.&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>get an array of date number arranged by <code>[year, month, day, hour, minute, second]</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>().toLocaleString(<span class="string">&quot;zh&quot;</span>).match(<span class="regexp">/[0-9]*/g</span>).filter(<span class="function">(<span class="params">el</span>) =&gt;</span> el).map(<span class="function"><span class="params">el</span> =&gt;</span> (el.length &lt; <span class="number">2</span> ? <span class="string">&quot;0&quot;</span> : <span class="string">&quot;&quot;</span>) + el)</span><br></pre></td></tr></table></figure>

<ul>
<li>extract the type in the string returned by <code>Object.prototype.toString.call</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/(?&lt;=\[object ).*(?=])/.exec(<span class="built_in">Object</span>.prototype.toString.call(&#123;&#125;))</span><br></pre></td></tr></table></figure>

<h2 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h2><h3 id="symbol-and-keyword"><a href="#symbol-and-keyword" class="headerlink" title="symbol and keyword"></a>symbol and keyword</h3><table>
<thead>
<tr>
<th>keyword</th>
<th>function</th>
</tr>
</thead>
<tbody><tr>
<td><code>=~</code></td>
<td>按位非var <code>num1=~25;//-26 值反一次再减一</code></td>
</tr>
<tr>
<td><code>6%4</code></td>
<td>取余, c%2 !== 0</td>
</tr>
<tr>
<td><code>~~</code></td>
<td>取整 <code>~~(6 / 4) // 1  ~~(9 / 4) // 2</code></td>
</tr>
<tr>
<td><code>yield next</code> <code>yield*</code></td>
<td>to stop or resume a generate function, yield* 加入另一个可迭代的对象</td>
</tr>
<tr>
<td><code>es6</code> <code>?.</code></td>
<td>optional chain, stop running when null or undefined is encountered</td>
</tr>
<tr>
<td><code>es6</code> <code>??</code></td>
<td><code>null ?? 4; 4 ?? 5</code> the right value will be returned when the left value is <code>null</code> or <code>undefined</code></td>
</tr>
<tr>
<td><code>es6</code> <code>&amp;&amp;=</code></td>
<td><code>a &amp;&amp;= 1</code> === <code>a &amp;&amp; (a=1)</code> // if a is existed then assign 1 to it</td>
</tr>
<tr>
<td><code>es6</code> <code>??=</code></td>
<td><code>a ??= 1</code> === <code>a ?? (a=1)</code> // if a is <code>null</code> or <code>undefined</code> then assign 1 to it</td>
</tr>
<tr>
<td><code>es6</code> <code>**</code></td>
<td>指数运算符    <code>2 ** 3 // 8</code> b **= 3;  // equal to <code>b = b * b * b;</code></td>
</tr>
<tr>
<td><code>es6</code> <code>symbol</code></td>
<td>data type: designed to prevent conflicts in property naming</td>
</tr>
</tbody></table>
<ul>
<li><p><strong>delete obj.a</strong> delete an object’s own property without affecting properties that are part of the object’s prototype chain</p>
</li>
<li><p><strong>in</strong>: to get know whether a property or an item exists</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>]; <span class="built_in">console</span>.log(<span class="number">0</span> <span class="keyword">in</span> arr); <span class="comment">// true</span></span><br><span class="line"><span class="keyword">var</span> arr = &#123; <span class="attr">a</span>: <span class="number">4</span> &#125;; <span class="built_in">console</span>.log(<span class="string">&#x27;a&#x27;</span> <span class="keyword">in</span> arr);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>es6</code> <strong>… spread syntax</strong> to expand an iterable such as an array expression or string</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// express rest arguments</span></span><br><span class="line"><span class="keyword">const</span> bar = <span class="function">(<span class="params">...args</span>) =&gt;</span> args</span><br><span class="line"></span><br><span class="line"><span class="comment">// to concat or insert items</span></span><br><span class="line">&#123; ...obj1, ...obj2 &#125;</span><br><span class="line">[...iterableObj, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;five&#x27;</span>, <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// Applying with new operator</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(...[<span class="number">1970</span>, <span class="number">0</span>, <span class="number">1</span>])</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>while</strong>, the expression inside the brackets can be an assigning expression</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">var</span> bb = <span class="number">1</span></span><br><span class="line"> <span class="keyword">while</span> (aa = bb) &#123; <span class="comment">// assigning the value of bb to aa, and judge aa is false or not</span></span><br><span class="line"><span class="built_in">console</span>.log(aa)</span><br><span class="line">bb++</span><br><span class="line"><span class="keyword">if</span> (bb === <span class="number">5</span>) bb = <span class="literal">null</span> <span class="comment">// bb = null, then aa = null</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>break   continue   return</strong>, <code>continue</code> is used to break one layer of the loop</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (i === <span class="number">3</span>) <span class="keyword">break</span></span><br><span class="line"><span class="built_in">console</span>.log(i) <span class="comment">// 0 1 2</span></span><br><span class="line"> &#125;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (i === <span class="number">3</span>) <span class="keyword">continue</span></span><br><span class="line"><span class="built_in">console</span>.log(i)  <span class="comment">// 0 1 2 4</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>es6</code> <strong>set</strong> similar to Array, but each item in <code>set</code> is unique</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> items = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>]);</span><br><span class="line">items.size <span class="comment">// the length is 5, and the repeated value aren&#x27;t be counted</span></span><br><span class="line">items.add(<span class="number">6</span>) <span class="comment">// add item</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>es6</code> <strong>map</strong> similar to <code>set</code>, but <code>key: value</code> structure like an <code>object</code>. the <code>key</code> of an <code>object</code> is <code>string</code>, while the <code>key</code> of a <code>map</code> can be any type.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"><span class="keyword">const</span> o = &#123;<span class="attr">p</span>: <span class="string">&#x27;Hello World&#x27;</span>&#125;;</span><br><span class="line">m.set(o, <span class="string">&#x27;content&#x27;</span>)</span><br><span class="line">m.get(o)</span><br><span class="line">m.size <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>es6</code> <strong>WeakMap &amp;&amp; WeakSet</strong>, all the properties of the two are shallow copied(<strong>weak reference</strong>), if an <code>object</code> are referenced only by <code>WeakSet</code>, then this <code>object</code> will be deleted by <strong>Garbage-Collection</strong></p>
</li>
<li><p><strong>export</strong> &amp;&amp; <strong>import</strong> &amp;&amp; <strong>export default</strong></p>
</li>
</ul>
<h3 id="Strict-Mode"><a href="#Strict-Mode" class="headerlink" title="Strict Mode"></a>Strict Mode</h3><ul>
<li><strong>ReferenceError</strong>: Assigning a value to an undeclared variable. in <code>Non-Strict Mode</code>, automatically creates a global variable</li>
<li><strong>TypeError</strong>: assign a value to a read-only property.</li>
<li><strong>SyntaxError</strong>: duplicate parameter names in a function</li>
<li><strong>undefined this</strong>: the value of <code>this</code> is automatically coerced to a global object in <code>Non-Strict Mode</code>.  in <code>Strict Mode</code>, <code>this</code> is <code>undefined</code> in functions that are not called with a specific context.</li>
<li><strong>SyntaxError</strong>: use reserved keywords as name of variables</li>
<li>Function declarations within blocks</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(foo()); <span class="comment">// Strict: ReferenceError</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="variable-declaration"><a href="#variable-declaration" class="headerlink" title="variable declaration"></a>variable declaration</h3><p><strong>var</strong></p>
<ul>
<li><p>if  a <code>var</code> variable is not declared in a function scope, then it is a <code>global object</code></p>
</li>
<li><p>can be re-declared in a same scope</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> b = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">1</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>var</code> can be used before declare, <code>var</code> declaration will be raising to the first line when engine is running, even the variable is declared in a <code>block scope</code>. this is called <code>hoisting</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// warning</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">1</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong>let, const</strong></p>
<ul>
<li><p><code>let</code> declares a variable.</p>
</li>
<li><p><code>const</code> declares a constant with simultaneous assignment and declaration</p>
<ul>
<li>its value cannot be reassigned</li>
<li>For reference type data, the value maintains the memory location unchanged.</li>
</ul>
</li>
<li><p>no variable increase</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> m   = <span class="string">&#x27;block scope&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> n = <span class="string">&#x27;block scope 2&#x27;</span>;</span><br><span class="line">  <span class="keyword">var</span> k = <span class="string">&#x27;global scope&#x27;</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(m); <span class="comment">// block scope</span></span><br><span class="line">  <span class="built_in">console</span>.log(n); <span class="comment">// block scope 2</span></span><br><span class="line">  <span class="built_in">console</span>.log(k); <span class="comment">// global scope</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(m); <span class="comment">// Reference Error</span></span><br><span class="line"><span class="built_in">console</span>.log(n); <span class="comment">// Reference Error</span></span><br><span class="line"><span class="built_in">console</span>.log(k); <span class="comment">// global scope</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line">  <span class="keyword">if</span> (a == <span class="number">1</span>)  <span class="keyword">let</span> a = <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line">  <span class="keyword">if</span> (a == <span class="number">1</span>) <span class="keyword">var</span> a = <span class="number">2</span> <span class="comment">// warning</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>a variable cannot be declared with the same name as a function’s arguments.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">arg</span>) </span>&#123; <span class="keyword">var</span> arg &#125;)()</span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">arg</span>) </span>&#123; <span class="keyword">let</span> arg &#125;)()  <span class="comment">// SyntaxError</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="es6-shorthand"><a href="#es6-shorthand" class="headerlink" title="es6 shorthand"></a>es6 shorthand</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = &#123;</span><br><span class="line">  <span class="string">&#x27;first word&#x27;</span>: <span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">  [lastWord]: <span class="string">&#x27;world&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> baz = &#123;foo&#125;</span><br></pre></td></tr></table></figure>

<h3 id="iterate"><a href="#iterate" class="headerlink" title="iterate"></a>iterate</h3><ul>
<li><code>for...in...</code> iterates object’s key, and array’s index</li>
<li><code>forEach</code> can’t jump out by <code>return</code>, <code>forEach</code> <code>for...of...</code> iterate value and can’t be used on Object</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.keys(obj) <span class="comment">// without Symbol</span></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyNames(obj) <span class="comment">// without Symbol</span></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertySymbols(obj) <span class="comment">// only Symbol</span></span><br><span class="line"><span class="built_in">Reflect</span>.ownKeys(obj) <span class="comment">// all the attribute names no except</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> obj) <span class="built_in">console</span>.log(obj[i])</span><br></pre></td></tr></table></figure>

<h3 id="Instance’s-Properties"><a href="#Instance’s-Properties" class="headerlink" title="Instance’s Properties"></a>Instance’s Properties</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Object.create(null) will create an object which does not inherit from Object.prototype, so the methods of Object are inaccessible.</span></span><br><span class="line"><span class="built_in">Object</span>.create(<span class="literal">null</span>).hasOwnProperty(<span class="string">&quot;foo&quot;</span>) <span class="comment">// error</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// the following two are worked same</span></span><br><span class="line"><span class="built_in">Object</span>.hasOwn(&#123;<span class="attr">a</span>:<span class="number">0</span>&#125;,<span class="string">&quot;a&quot;</span>)</span><br><span class="line"><span class="built_in">Object</span>.prototype.hasOwnProperty.call(&#123;<span class="attr">a</span>:<span class="number">0</span>&#125;, <span class="string">&quot;a&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h3><ul>
<li><p><code>es6</code> <code>Object.values(&#123;&#125;)</code>, <code>Object.keys(&#123;&#125;)</code>, <code>es6</code> <code>Object.assign()</code></p>
</li>
<li><p><code>es6</code> <code>Object.entries(&#123;&#125;)</code> <code>Object.fromEntries([])</code></p>
</li>
<li><p><code>es6</code> <code>Object.is(value1, value2)</code> compares objects according they reference. almost same as <code>===</code>, but there has two differences:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">+<span class="number">0</span> === -<span class="number">0</span> <span class="comment">//true</span></span><br><span class="line"><span class="literal">NaN</span> === <span class="literal">NaN</span> <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.is(+<span class="number">0</span>, -<span class="number">0</span>) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Object</span>.is(<span class="literal">NaN</span>, <span class="literal">NaN</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>Object.prototype.toString.call()</code> get data’s type</p>
</li>
<li><p><code>es6</code> <code>Object.getOwnPropertyDescriptors</code></p>
</li>
<li><p><code>es6</code> <code>Object.setPrototypeOf()</code> <code>Object.getPrototypeOf()</code> set and get the prototype of an object</p>
</li>
</ul>
<h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><ul>
<li><p><code>JSON.parse(string)</code></p>
</li>
<li><p><code>JSON.stringify(obj)</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.stringify(object: any, <span class="attr">replacer</span>: <span class="function">(<span class="params">key: string, value: any</span>) =&gt;</span> any, <span class="attr">space</span>: string)</span><br><span class="line"><span class="keyword">const</span> foo = &#123;</span><br><span class="line">  <span class="attr">foundation</span>: <span class="string">&quot;Mozilla&quot;</span>,</span><br><span class="line">  <span class="attr">model</span>: <span class="string">&quot;box&quot;</span>,</span><br><span class="line">  <span class="attr">week</span>: <span class="number">45</span>,</span><br><span class="line">  <span class="attr">transport</span>: <span class="string">&quot;car&quot;</span>,</span><br><span class="line">  <span class="attr">month</span>: <span class="number">7</span>,</span><br><span class="line">  <span class="attr">obj</span>: &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">2</span>, </span><br><span class="line">    <span class="attr">b</span>:[<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// if replacer is a function, replacer will be called on each value to-string process</span></span><br><span class="line"><span class="comment">// ps: the value of the first call is the target object</span></span><br><span class="line"><span class="built_in">JSON</span>.stringify(foo, <span class="function">(<span class="params">key, value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key, value)</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">&quot;number&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;number&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> value </span><br><span class="line">&#125;) <span class="comment">// &#x27;&#123;&quot;foundation&quot;:&quot;Mozilla&quot;,&quot;model&quot;:&quot;box&quot;,&quot;week&quot;:&quot;number&quot;,&quot;transport&quot;:&quot;car&quot;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// if replacer is an array containing only string, the output will retain ony the &#123;key: value&#125; pairs where the key is listed in the replacer</span></span><br><span class="line"><span class="built_in">JSON</span>.stringify(foo, [<span class="string">&quot;month&quot;</span>, <span class="string">&quot;obj&quot;</span>, <span class="string">&quot;a&quot;</span>]); <span class="comment">//&#x27;&#123;&quot;month&quot;:7,&quot;obj&quot;:&#123;&quot;a&quot;:2&#125;&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h3><ul>
<li><p><code>instanceof</code> and <code>isArray</code></p>
<ul>
<li><code>instanceof</code> uses the <code>prototype chain</code> to verify if the <code>object</code> inherits from <code>Array.prototype</code>. as it relies on the prototype chain, it may fail if an array is from a different <code>window</code> or <code>frame</code></li>
</ul>
</li>
<li><p><code>includes(item)</code></p>
</li>
<li><p><code>lastIndexOf</code>, <code>indexOf</code></p>
</li>
<li><p><code>at(index)</code>, <code>index</code> can be negative</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">arr.at(<span class="number">2</span>) <span class="comment">// 2</span></span><br><span class="line">arr.at(-<span class="number">2</span>) <span class="comment">// 4</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>forEach</code>, cannot break the loop, if an <code>item</code> is <em>deleted</em> during the loop, the items after it will <em>be skipped</em></p>
</li>
<li><p><code>every</code>    all items return true =&gt; return true, any one return false =&gt; return false and break the loop</p>
</li>
<li><p><code>some</code>    any item return true =&gt; true, no one return true =&gt; false</p>
</li>
<li><p><code>find</code> <code>findLast</code> | <code>findIndex</code> | <code>findLastIndex</code>  any item return true =&gt; return the item or index(findLast return the last one)</p>
</li>
<li><p><code>filter</code> return an array constituted by items which is returned true</p>
</li>
<li><p><code>map</code>    return an array constituted by the return data of the function</p>
</li>
<li><p><code>reduce</code> <code>reduceRight</code>, get an accumulation from an array, the latter is executed by the order of right to left</p>
</li>
<li><p><code>join</code>, <code>concat</code>(the items of new array are <code>shallow copied</code>)</p>
</li>
<li><p><code>fill(value, start, end)</code></p>
</li>
<li><p><code>pop</code> / <code>shift</code>     remove the first / last item of an array, and return the removed item</p>
</li>
<li><p><code>unshift</code> / <code>push</code>    add item to the start / end of an array, and return the current length of an array</p>
</li>
<li><p><code>splice</code> <code>slice</code>, three parameters: start index, delete count, items which need to add. return the removed items<br><code>splice</code> changes the original array, while <code>slice</code> create new one</p>
</li>
<li><p><code>sort</code></p>
</li>
<li><p><code>reverse</code>    reverse the order of an array</p>
</li>
<li><p><code>flat</code></p>
</li>
<li><p><code>set</code></p>
<ul>
<li><code>has(value)</code> return boolean</li>
<li><code>add(value)</code> return the array itself</li>
<li><code>delete(value)</code>    return boolean</li>
<li><code>clear()</code> no return, clean all items</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[...new <span class="built_in">Set</span>(array)]	<span class="comment">// repeated items will be deleted</span></span><br><span class="line"><span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(array)) <span class="comment">//	set to array</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="number-precision-issues"><a href="#number-precision-issues" class="headerlink" title="number precision issues"></a>number precision issues</h3><p><code>JS</code> uses <code>floating-point format</code> the <code>IEEE 754 64-bit format</code>.<br>computers use the binary (base-2) number system, which cannot precisely represent many decimal (base-10) fractions. some floating-point numbers, such as 0.1 or 0.2 get stored as approximate values.</p>
<p><code>IEEE 754</code> stores numbers in computer memory and allocates a 64-bit storage space for floating-point numbers.</p>
<ul>
<li>1-bit for a sign(express negative or positive)</li>
<li>11-bit for exponent</li>
<li>52 -bit for fraction</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// decimal to binary in computer</span></span><br><span class="line"><span class="number">0.1</span> (decimal) = <span class="number">0.0001100110011001100110011001100</span>... (binary)</span><br><span class="line"><span class="number">0.1</span>.toString(<span class="number">2</span>) <span class="comment">// 0.0001100110011001100110011001100110011001100110011001101</span></span><br></pre></td></tr></table></figure>

<p><strong>workarounds</strong></p>
<ul>
<li><p>a tolerance for comparison</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> epsilon = <span class="number">1e-10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.abs((<span class="number">0.1</span> + <span class="number">0.2</span>) - <span class="number">0.3</span>) &lt; epsilon);</span><br></pre></td></tr></table></figure>
</li>
<li><p>string conversion</p>
</li>
<li><p>scale numbers to integers for avoiding fractions.</p>
</li>
<li><p>packages like Big.js or Decimal.js</p>
</li>
</ul>
<h3 id="scope"><a href="#scope" class="headerlink" title="scope"></a>scope</h3><h4 id="scope-types"><a href="#scope-types" class="headerlink" title="scope types"></a>scope types</h4><ul>
<li><p><strong>global scope</strong></p>
<ul>
<li>defined at the external of the outmost function</li>
<li>declared without keywords like <code>var</code>, <code>let</code> <code>const</code></li>
<li>mount on <code>window</code></li>
</ul>
</li>
<li><p><strong>ES6 Module scope</strong></p>
</li>
<li><p><strong>function or local scope</strong>, a variable is declared within a function</p>
</li>
<li><p><strong>block scope</strong>, <code>if / switch / while / for</code> create a block scope. a variable defined using <code>let / const</code> stays in the block scope</p>
</li>
<li><p><strong>static scope</strong>, when looking a variable, the engine will go to the scope in which the variable was created</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">10</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(x); &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">f</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="number">20</span>;</span><br><span class="line">  fn() <span class="comment">//10</span></span><br><span class="line">&#125;</span><br><span class="line">show(fn);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>nested scope</strong>, a scope can be nested inside another scope.</p>
</li>
</ul>
<h4 id="scope-chain"><a href="#scope-chain" class="headerlink" title="scope chain"></a>scope chain</h4><p>when the JS engine tries to find a variable, it first looks in the current scope, if it doesn’t find then it moves to the parent’s scope. finding layer by layer, this process is called <code>scope chain</code>.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">100</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">F1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> b = <span class="number">200</span>;</span><br><span class="line">	(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="keyword">var</span> c = <span class="number">300</span></span><br><span class="line">		<span class="built_in">console</span>.log(a, b, c)</span><br><span class="line">	&#125;)()</span><br><span class="line">&#125;</span><br><span class="line">F1()</span><br></pre></td></tr></table></figure>

<h3 id="Memory-Management"><a href="#Memory-Management" class="headerlink" title="Memory Management"></a>Memory Management</h3><p><strong>life cycle</strong></p>
<ul>
<li><p><code>Allocate</code> the memory</p>
<ul>
<li><p>JS automatically allocate memory whenever a value is declared</p>
</li>
<li><p>function is considered as an object</p>
</li>
<li><p>arguments needs memory allocation</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="string">&quot;azerty&quot;</span>;</span><br><span class="line"><span class="comment">// [0,3] range needs stored</span></span><br><span class="line"><span class="keyword">const</span> s2 = s.substr(<span class="number">0</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><code>Use</code> the allocated memory (reading and writing)</p>
</li>
<li><p><code>Release</code> the allocated memory by <code>Garbage-Collection</code></p>
</li>
</ul>
<h4 id="Garbage-Collection-GC"><a href="#Garbage-Collection-GC" class="headerlink" title="Garbage-Collection(GC)"></a>Garbage-Collection(GC)</h4><p>an object has a reference to its <code>prototype</code> (<code>implicit reference 隐式引用</code>) and to its properties values (<code>explicit reference 显示引用</code>).</p>
<p><strong>Reference-counting Garbage-Collection 引用计数垃圾收集</strong></p>
<ul>
<li><p>An object is said to be <code>garbage</code>, if there are <em>zero references pointing to it</em>.</p>
</li>
<li><p><code>circular references</code> easily results in <code>memory leak</code>.</p>
<ul>
<li><em>two objects are reference to each other in a function scope</em>. They will go out of the function scope after the function call has completed. they are useless after the function is called, but they will not be considered <code>garbage</code> since they still have at least one reference.</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> x = &#123;&#125;;</span><br><span class="line">  <span class="keyword">const</span> y = &#123;&#125;;</span><br><span class="line">  x.a = y; <span class="comment">// x references y</span></span><br><span class="line">  y.a = x; <span class="comment">// y references x</span></span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">f()</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong>mark and sweep algorithm 标记-清除算法</strong></p>
<ul>
<li>An object is said to be <code>garbage</code>, if <em>an object is unreachable</em>.</li>
<li>the garbage collector starts from the root(the global object), and inspects all the children recursively. thus, the garbage collector will find all reachable objects and mark them as active. Any memory not marked as active can now be considered garbage.</li>
<li>with this algorithm, <code>circular references</code> is no longer a problem since the objects is unreachable after the function is completely.</li>
</ul>
<p><strong>weakly reference</strong></p>
<p>if an object is only held by weakly reference, then the object will be considered as unreachable.<br>The keys of <code>WeakMap</code> and <code>WeakSet</code> can be garbage-collected (for <code>WeakMap</code> objects, the values would then be eligible for Garbage-Collection as well) as long as nothing else in the program is referencing the key</p>
<p><strong>FinalizationRegistry</strong></p>
<p>listen to the garbage-collect event</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> registry = <span class="keyword">new</span> FinalizationRegistry(<span class="function"><span class="params">heldValue</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(heldValue)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">a</span>: <span class="number">0</span> &#125;</span><br><span class="line">registry.register(obj, <span class="string">&quot;some value&quot;</span>); <span class="comment">// target and holdings cannot be same</span></span><br></pre></td></tr></table></figure>

<h4 id="memory-leak"><a href="#memory-leak" class="headerlink" title="memory leak"></a>memory leak</h4><ul>
<li><p><code>A memory leak</code> occurs when a program fails to release memory that is no longer needed, leading to increasing memory usage over time</p>
</li>
<li><p>Out of DOM references. a DOM node that was once kept in an object, even after it’s removed from the DOM tree, still persists in that object.</p>
</li>
<li><p>timers or callbacks. Most of libraries provide observers and other facilities that take callbacks.</p>
</li>
<li><p>accidental global variables. cause <code>mark and sweep algorithm</code>, a variable which is mounted on <code>window</code> or <code>this</code> will not be considered  <code>garbage</code></p>
<ul>
<li>add ‘use strict’ can prevent this issue</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.variable = <span class="string">&quot;potential accidental global&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Foo called on its own, this points to the global object (window)</span></span><br><span class="line">foo();</span><br></pre></td></tr></table></figure>
</li>
<li><p>closure. A closure retains access to variables from its outer function’s scope, even after the outer function has completed.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createClosure</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> largeArray = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1000000</span>).fill(<span class="string">&quot;data&quot;</span>); <span class="comment">// Large memory allocation</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(largeArray.length); <span class="comment">// Closure keeps reference to largeArray</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> leakyFunction = createClosure(); <span class="comment">// `largeArray` remains in memory</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="closure"><a href="#closure" class="headerlink" title="closure"></a>closure</h3><ul>
<li><code>closure</code> is a combination created by binding a function to the <code>lexical environment</code>.</li>
<li>allows to access the outside scope from the inner of a function.</li>
</ul>
<h4 id="advantages"><a href="#advantages" class="headerlink" title="advantages"></a>advantages</h4><ul>
<li><p><code>data privacy</code>. it means that you can’t access the data of the inner scope from the outside.</p>
</li>
<li><p><code>privileged methods</code>. the methods exposed by the function are privileged since they can access data in both the inner scope and the outer scope.</p>
</li>
<li><p><code>stateful function</code>. a state is a snapshot of the current environment, every change will take a picture of the current environment.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> func = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">3</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">b</span>) =&gt;</span> &#123;</span><br><span class="line">    a = ++ a</span><br><span class="line">    <span class="keyword">return</span> b * a</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> closure = func()</span><br><span class="line">closure(<span class="number">4</span>) <span class="comment">// 16</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>partial application</code> refers to the process of fixing a number of arguments to a function, producing another function that takes fewer arguments than the original function. it takes advantage of closure scope in order to fix arguments.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> partialApply = <span class="function">(<span class="params">fn, ...fixedArgs</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">...remainingArgs</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fn.apply(<span class="built_in">this</span>, fixedArgs.concat(remainingArgs))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>Function Factories</code>, to generate functions with pre-configured behavior or to create multiple functions with similar functionality. like <code>debounce</code></p>
</li>
<li><p><code>Memoization</code>, to cache the results of expensive function calls</p>
</li>
</ul>
<h4 id="Stale-closure"><a href="#Stale-closure" class="headerlink" title="Stale closure"></a>Stale closure</h4><p>a stale closure captures a variable whose value is outdated. like <code>useMemo</code></p>
<ul>
<li><p><code>createIncrement</code> function returns <code>increment</code> and <code>log</code>. The former responsible for value increasing. the latter logs a <code>const</code>, whose value is fixed since it defined, then every time call the <code>log</code> fun, it gets <code>message</code> which has a outdated value.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createIncrement</span>(<span class="params">incBy</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> value = <span class="number">0</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">increment</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    value += incBy;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> message = <span class="string">`Current value is <span class="subst">$&#123;value&#125;</span>`</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(message);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> [increment, log];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> [increment, log] = createIncrement(<span class="number">1</span>);</span><br><span class="line">increment(); <span class="comment">// 1</span></span><br><span class="line">increment(); <span class="comment">// 2</span></span><br><span class="line">log(); <span class="comment">// Current value is 0</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>When using <code>setTimeout</code> and <code>setInterval</code>, the function delays execution, but any variables saved within the function retain their values as they were at the time the function was defined. This means that if variables change during the delay time, the function only accesses the old values of those variables.</p>
</li>
</ul>
<h3 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a>prototype</h3><ul>
<li><p><code>prototype</code>, object inherit properties and methods from it</p>
</li>
<li><p>an instance inherits <code>prototype</code> from <code>constructor</code>, which is stored on the <code>__proto__</code></p>
</li>
<li><p>a <code>constructor</code> has a <code>prototype</code> which includes two properties <code>constructor</code> and <code>proto</code></p>
<ul>
<li>even all the built-in functions such as <code>Object</code> <code>Function</code> <code>Array</code> <code>RegExp</code> <code>Date</code> <code>Boolean</code> <code>Number</code> <code>String</code> , the <code>prototype.proto</code> of them point to the <code>Object.prototype</code>, that means they inherited are from <code>Object</code>, and <code>Object.prototype.proto</code> refer to null.</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Person.prototype.constructor === Person <span class="comment">// Person is a constructor, Person.prototype.constructor point to the &quot;constructor&quot; function self</span></span><br><span class="line">person01.__proto__ == Person.prototype <span class="comment">// person01 is an instance, person01.__proto__  point to a place same as Person.prototype</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.__proto__ == <span class="built_in">Object</span>.prototype == <span class="built_in">Object</span>.prototype.__proto__ = <span class="literal">null</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="property-chain"><a href="#property-chain" class="headerlink" title="property chain"></a>property chain</h4><p>when we access an <code>object</code>‘s property, first the engine will try to find the property within the object itself. if it doesn’t find, it then look at the <code>object.__proto__</code>. if it still doesn’t find , it continues up the <code>__proto__</code> chain, checking each subsequent <code>__proto__</code>. until it find <code>Object.prototype</code>, in which the <code>prototype</code> is null.</p>
<h4 id="constructor-vs-normal-function"><a href="#constructor-vs-normal-function" class="headerlink" title="constructor vs normal function"></a>constructor vs normal function</h4><ul>
<li><p>a <code>constructor</code> usually doesn’t use <code>return</code> keyword, because <code>this</code> of a <code>constructor</code> will be used as the result of <code>new</code> keyword.</p>
</li>
<li><p>when a <code>constructor</code> returns an object, that object will be used as the result returned by the <code>new</code> keyword. otherwise, if the result is a primitive type, then <code>this</code> will be returned by the <code>new</code> keyword.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;Hello&quot;</span>; <span class="comment">// a primitive value</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person1 = <span class="keyword">new</span> Person(<span class="string">&quot;Alice&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(person1); <span class="comment">// Output: Person &#123; name: &quot;Alice&quot; &#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>by the first rule, <code>this</code> and <code>new</code> are used in a constructor but not in a normal function</p>
</li>
<li><p>what does NEW do?</p>
<ul>
<li>create an Object</li>
<li>bind <code>this</code> of the current scope to that object</li>
<li>copy the prototype from the constructor, and store it in the <code>object._proto_</code></li>
<li>execute the code inside the constructor, and return the object</li>
</ul>
</li>
</ul>
<h4 id="Inheritance"><a href="#Inheritance" class="headerlink" title="Inheritance"></a>Inheritance</h4><ul>
<li>create a child object classes which will inherit features from another class</li>
<li><code>OO</code> =&gt; object oriented programming</li>
<li>favor object composition over inheritance</li>
<li>concatenative inheritance, inherit features from another object by copying the source objects properties<ul>
<li><code>Object.assign()</code></li>
<li><code>...</code> spread syntax</li>
<li><code>bind</code>, <code>call</code> and <code>apply</code>(can receive an array). binding “this” to a function</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> beBound = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;</span><br><span class="line"><span class="keyword">let</span> beCalled = <span class="function"><span class="keyword">function</span> (<span class="params">...arg</span>) </span>&#123; <span class="built_in">console</span>.log(<span class="built_in">this</span>, arg )&#125;</span><br><span class="line"><span class="comment">// the first argument will be bound with the function, the others used as rest arguments</span></span><br><span class="line"><span class="comment">// return a function which are created by binding a copy of the first argument to the called function</span></span><br><span class="line"><span class="keyword">let</span> newOneFixedArgument = beCalled.bind(beBound, <span class="string">&quot;newOne&quot;</span>, <span class="string">&quot;fixedArgument&quot;</span>)</span><br><span class="line">newOneFixedArgument()</span><br><span class="line"><span class="keyword">let</span> newOneFreeArgument = beCalled.bind(beBound)</span><br><span class="line">newOneFreeArgument(<span class="string">&quot;newOne&quot;</span>, <span class="string">&quot;freeArgument&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// call and apply will execute the function immediately, and doesn&#x27;t change the called function</span></span><br><span class="line">beCalled.call(beBound, <span class="string">&quot;call&quot;</span>, <span class="string">&quot;individual arguments&quot;</span>)</span><br><span class="line">beCalled.apply(beBound, [<span class="string">&quot;apply&quot;</span>, <span class="string">&quot;array argument&quot;</span>]) <span class="comment">// accept an array</span></span><br></pre></td></tr></table></figure>

<p><strong>Inheritance Chain</strong></p>
<p>every object has a <code>__proto__</code> (or prototype) that points to another object. This chain continues up until it reaches <code>Object.prototype</code>, which is the root of all objects.</p>
<h4 id="prototype-delegation"><a href="#prototype-delegation" class="headerlink" title="prototype delegation"></a>prototype delegation</h4><ul>
<li><code>new</code> constructor<ul>
<li>functional inheritance / factory function. It is not a constructor or class. Instead, it operates by generating an object from a factory and extending the produced object by assigning properties to it through concatenative inheritance.</li>
</ul>
</li>
<li>class extend / sub-classing.<br>inherit everything from a class, can’t choose what you wanted<br>this initialization by calling the parent’s constructor with super() and can pass arguments to the parent, while in the constructor function that the new keyword does the initialization automatically.</li>
</ul>
<h3 id="deep-and-shallow-copy"><a href="#deep-and-shallow-copy" class="headerlink" title="deep and shallow copy"></a>deep and shallow copy</h3><ul>
<li><p>basic data types: data are stored in <code>stack</code></p>
</li>
<li><p>reference data types: store data in <code>heap</code>, object’s reference in <code>stack</code></p>
</li>
<li><p><code>shallow copy</code>: copy the reference of object</p>
</li>
<li><p><code>deep copy</code>: copy data</p>
</li>
<li><p>the following methods perform <code>deep copy</code> only the first layer of an object.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.assign(&#123;&#125;, state)</span><br><span class="line">&#123;...state&#125;</span><br><span class="line"><span class="built_in">Array</span>.prototype.concat()</span><br><span class="line"><span class="built_in">Array</span>.prototype.slice()</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong>completely deep copy</strong></p>
<ul>
<li><p><code>JSON.parse(JSON.stringify())</code>, some complex types will be translated into string:</p>
<ul>
<li><p><code>Dates</code>, <code>functions</code>, <code>undefined</code>, <code>Infinity</code>, <code>RegExps</code>, <code>Maps</code>, <code>Sets</code>, <code>Blobs</code>, <code>FileLists</code>, <code>ImageData</code>, <code>sparse Arrays</code>, <code>Typed Arrays</code></p>
</li>
<li><p><code>undefined</code> will be ignored</p>
</li>
<li><p>an object with circular references(properties are refer to each other) can’t be converted</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: &#123;</span><br><span class="line">    <span class="attr">c</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">d</span>: <span class="number">3</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">f</span>: <span class="literal">undefined</span>,</span><br><span class="line">&#125;</span><br><span class="line">obj.c = obj.b</span><br><span class="line">obj.e = obj.a</span><br><span class="line">obj.b.c = obj.c</span><br><span class="line">obj.b.d = obj.b</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><code>structuredClone()</code> creates a deep clone of a given value(include circular references). able to clone complex types <code>DOM element</code> <code>File</code>, <code>Map</code>, <code>Set</code> that <code>JSON.stringify()</code> cannot</p>
</li>
<li><p><code>MessageChannel</code>, data that is delivered <code>MessageChannel</code> are deep copied. but delivering a function will cause error</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">deepCopy</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; port1, port2 &#125; = <span class="keyword">new</span> MessageChannel()</span><br><span class="line">  port2.onmessage = <span class="function">(<span class="params">ev</span>) =&gt;</span> resolve(ev.data)</span><br><span class="line">  port1.postMessage(obj)</span><br><span class="line">&#125;)</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> deepCopy(obj).then(<span class="function">(<span class="params">copy</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(copy);</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Single-threaded"><a href="#Single-threaded" class="headerlink" title="Single-threaded"></a>Single-threaded</h3><p>a <code>thread</code> is a single unit of execution. one or more <code>thread</code>s can be exist in a <code>process</code>. a <code>Single-threaded</code> programming language which has a <code>single-threaded</code> runtime engine that runs tasks in a program sequentially.</p>
<p><strong>manipulating dom in the <code>web worker</code> is not allowed</strong><br><code>web worker</code> is controlled by <code>main-thread</code><br>JS as a browser script, interacts with user and manipulates dom. <strong>two threads will bring synchronize problem</strong>, as if one thread changes a node, and another thread removes that node.</p>
<h3 id="Event-Loop"><a href="#Event-Loop" class="headerlink" title="Event Loop"></a>Event Loop</h3><ul>
<li><p><strong>Heap and Stack?</strong></p>
<ul>
<li>two areas in memory where data is stored.</li>
<li><code>Heap</code>(dynamic memory allocation) stores objects which mutable and have a variable size.</li>
<li><code>Stack</code>(Static memory allocation) stores Primitive values which is immutable and have a fixed size.</li>
</ul>
</li>
<li><p><strong>Call Stack</strong><br><code>Call Stack</code> is in the <code>Main-Thread</code> and is used to store functions for execution</p>
</li>
<li><p><strong>synchronous and asynchronous</strong></p>
<ul>
<li>two types of js tasks.</li>
<li><code>synchronous tasks</code> are stored in the <code>Call Stack</code>, waiting for execution</li>
<li><code>asynchronous tasks</code> like <code>fetch</code> or <code>setTimeout</code> are handled by other <code>process</code> in the browser. JS is <code>Single-threaded</code>, but  browser is <code>Multi-process</code></li>
</ul>
</li>
<li><p><strong>Task Queue(Callback Queue)</strong></p>
<ul>
<li>following <code>FIFO(first in first out)</code></li>
<li><code>asynchronous tasks</code> are related with <code>callbacks</code>. if a <code>asynchronous task</code> is finished by browser, then it’s corresponding <code>callback</code> will push into the <code>Task Queue</code></li>
</ul>
</li>
<li><p><strong>Event Loop</strong></p>
<ul>
<li>if all the tasks in <code>Call Stack</code> are completed, then JS engine will continuously scans <code>Task Queue</code> to find tasks and push them into <code>Call Stack</code>. this process where JS engine constantly scans for tasks is called as <code>Event Loop</code>.</li>
<li>through <code>Event Loop</code>, JS engine can handle <code>asynchronous tasks</code>, and meanwhile keeps the responsive of the page</li>
</ul>
</li>
<li><p><strong>Call Frame</strong></p>
<ul>
<li>every call of function will leave a <code>Call Frame（调用帧）</code>, which keeps the inner information about function including <em>variables and the location where the function called</em>.  those information will be deleted after the function is completed.</li>
<li>following <code>LIFO(last in first out)</code></li>
<li>Call Frame is limited, as infinite recursive will trigger <code>RangeError: Maximum call stack size exceeded</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// put C into stack =&gt; B in =&gt; A in =&gt; A out =&gt; B out =&gt; C out</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funA</span>(<span class="params"></span>) </span>&#123;  <span class="built_in">console</span>.log(<span class="string">&#x27;funA&#x27;</span>) &#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funB</span>(<span class="params"></span>) </span>&#123; funA() &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funC</span>(<span class="params"></span>) </span>&#123; funB() &#125;</span><br><span class="line">funC()</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>two types of tasks in Task Queue, Macro and Micro</strong></p>
<ul>
<li><p><code>Macro tasks</code> include <code>setTimeout</code> / <code>setInterval</code> / <code>MessageChannel</code> /<code>requestAnimationFrame</code> / <code>UI render</code>/ <code>I/O in node.js</code></p>
</li>
<li><p><code>Micro tasks</code> include callbacks <code>Promise.then()</code> / <code>Promise.catch()</code> / <code>Promise.finally()</code> / <code>MutationObserver</code> / <code>queueMicrotask(queues a microtask)</code></p>
</li>
<li><p>setImmediate -&gt; MessageChannel -&gt; setTimeout 0</p>
</li>
<li><p>the engine executes <code>Micro Task</code> before <code>Macro Task</code></p>
</li>
<li><p><code>initialize</code> and <code>resolve</code> of <code>Promise</code> are synchronous.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line"> <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="number">4</span>)</span><br><span class="line">   resolve(<span class="number">1</span>)</span><br><span class="line"> &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line"> ;(<span class="function"><span class="keyword">function</span> (<span class="params">j</span>) </span>&#123;</span><br><span class="line">   p1.then(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;promise then - &quot;</span> + j)</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;)(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><code>async</code> <code>await</code>, look at the following example:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;async1 start&#x27;</span>)</span><br><span class="line">  <span class="keyword">await</span> async2()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;async1 end&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;async2&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;script start&#x27;</span>)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;setTimeout&#x27;</span>)</span><br><span class="line">&#125;,<span class="number">0</span>)</span><br><span class="line">async1();</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;promise1&#x27;</span>)</span><br><span class="line">  resolve();</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;promise2&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;script end&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><code>async1()</code> doesn’t have <code>await</code> prefix, <code>async1</code> will be translated by v8 like:</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// `async2` is Promise initialization, so it‘s a synchronous</span></span><br><span class="line"> <span class="comment">// the code after `await` will be put in `then` callback</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">async1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;async1 start&#x27;</span>)</span><br><span class="line">  <span class="built_in">Promise</span>.resolve(async2).then(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;async1 end&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>Tail Call 尾调用</code> refers to calling another function “at the end” of a function’s execution.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">x</span>) </span>&#123; <span class="keyword">return</span> b(x) &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>b</code> is a <code>Tail Call</code>. given <code>Call Stack</code>, when a function is called, it creates a <code>Call Frame</code> that holds internal information until the call is completed. while <code>Tail Call</code> is the final action, the <code>Call Frame</code> will be kept until <code>Tail Call</code> is finished.</li>
<li>optimize <code>Tail Call</code> to reduce stack space usage, is called <code>Tail call optimization</code>.</li>
</ul>
</li>
<li><p><code>Tail Recursion</code></p>
<ul>
<li><p>due tof <code>call frame</code>, <code>Recursion</code> often consumes a significant amount of memory and results <code>stack overflow</code></p>
</li>
<li><p>in languages that support <code>Tail call optimization</code>, <code>Tail Recursion</code> can be used to avoid such issues</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"> <span class="comment">// the recursive call is the last operation performed by the function</span></span><br><span class="line"> <span class="comment">// the call frame associated with the recursive call can be discarded or reused.</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">n, acc = <span class="number">1</span></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (n === <span class="number">0</span>) <span class="keyword">return</span> acc;</span><br><span class="line">   <span class="keyword">return</span> factorial(n - <span class="number">1</span>, n * acc); <span class="comment">// Tail recursion</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="built_in">console</span>.log(factorial(<span class="number">5</span>)); <span class="comment">// Output: 120</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="debounce-and-throttle"><a href="#debounce-and-throttle" class="headerlink" title="debounce and throttle"></a>debounce and throttle</h3><ul>
<li><p><code>debounce</code>. a function can be executed when it is not called during a specific time</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// execute debounce =&gt; got a function which bound with the debounce scope</span></span><br><span class="line"><span class="comment">// every time the instance executed that will clean and reassign the timer</span></span><br><span class="line"><span class="keyword">const</span> debounce = <span class="function">(<span class="params">func, delay</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> timer</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> context = <span class="built_in">this</span>, args = <span class="built_in">arguments</span></span><br><span class="line">        <span class="built_in">clearTimeout</span>(timer) <span class="comment">// to clean before reassign</span></span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> func.apply(context, args), delay)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> instance = debounce(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">&quot;executing&quot;</span>) &#125;, <span class="number">3000</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>throttle</code>. a function can be executed only when the time is up</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  <span class="comment">// execute throttle =&gt; got a function which bound with the throttle scope</span></span><br><span class="line"><span class="comment">//when the isExpired is true, that means that the function can be executed and when it executed, then change the isExpired&#x27;s state to false and set a time to change back</span></span><br><span class="line">  <span class="keyword">const</span> throttle = <span class="function">(<span class="params">func, delay</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> isExpired = <span class="literal">true</span></span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">const</span> context = <span class="built_in">this</span></span><br><span class="line">            <span class="keyword">const</span> args = <span class="built_in">arguments</span></span><br><span class="line">            <span class="keyword">if</span> (isExpired === <span class="literal">false</span>) <span class="keyword">return</span></span><br><span class="line">            func.apply(context, args)</span><br><span class="line">            isExpired = <span class="literal">false</span></span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> isExpired = <span class="literal">true</span>, delay)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> instance = throttle(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">&quot;executing&quot;</span>) &#125;, <span class="number">3000</span>)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="breakpoint-resume"><a href="#breakpoint-resume" class="headerlink" title="breakpoint resume"></a>breakpoint resume</h3><p>web: fileReader + slice + FormData<br>server: createWriteStream + createReadStream</p>
<h3 id="messageChannel"><a href="#messageChannel" class="headerlink" title="messageChannel"></a>messageChannel</h3><ul>
<li>to communicate between two <code>iframe</code>s / <code>web worker</code>s / <code>js module</code>s</li>
<li>deep copy</li>
</ul>
<h3 id="generator"><a href="#generator" class="headerlink" title="generator"></a>generator</h3><p>use <code>generator</code> to simulate async function</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params">fn: any</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">const</span> gen = fn()</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">thunk</span>(<span class="params">...argu: any[]</span>) </span>&#123;</span><br><span class="line">		<span class="keyword">const</span> res = gen.next(...argu)</span><br><span class="line">		<span class="keyword">if</span> (res.done) <span class="keyword">return</span></span><br><span class="line">		<span class="keyword">if</span> (res.value <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) &#123;</span><br><span class="line">			res.value.then(<span class="function">(<span class="params">res: any</span>) =&gt;</span> thunk(res))</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	thunk()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> gen = <span class="function"><span class="keyword">function</span>* (<span class="params"></span>): <span class="title">Generator</span>&lt;<span class="title">any</span>, <span class="title">any</span>&gt; </span>&#123;</span><br><span class="line">	<span class="keyword">const</span> a = <span class="keyword">yield</span> get(&#123; <span class="attr">api</span>: <span class="string">&quot;manifest.json&quot;</span>, <span class="attr">params</span>: &#123; <span class="attr">tenant</span>: <span class="string">&quot;devices&quot;</span> &#125;, <span class="attr">options</span>: &#123; <span class="attr">sync</span>: <span class="literal">false</span> &#125; &#125;)</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">&quot;a&quot;</span>, a)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">const</span> b = <span class="keyword">yield</span> get(&#123;</span><br><span class="line">		<span class="attr">api</span>: <span class="string">&quot;manifest.json&quot;</span>,</span><br><span class="line">		<span class="attr">params</span>: &#123; <span class="attr">tenant</span>: <span class="string">&quot;devices&quot;</span> &#125;,</span><br><span class="line">		<span class="attr">options</span>: &#123;</span><br><span class="line">			<span class="attr">sync</span>: <span class="literal">false</span>,</span><br><span class="line">		&#125;,</span><br><span class="line">	&#125;)</span><br><span class="line">  <span class="built_in">console</span>.log(b)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">run(gen)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="vue-vs-react"><a href="#vue-vs-react" class="headerlink" title="vue vs react"></a>vue vs react</h3><p>both of them are component-based architecture</p>
<p><strong>Vue</strong></p>
<ul>
<li>considered easier to learn for beginners due to its simpler syntax and clear documentation.</li>
<li>use a Single File Component (SFC) which contains a template section for HTML markup, a script section for JS logic, and a style section for CSS.</li>
<li>a two-way data binding system, keeping data and the UI in sync.</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- The input value is bound to the &#x27;msg&#x27; data property --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;msg&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>React</strong></p>
<ul>
<li>has a steeper learning curve due to its extensive ecosystem and more complex concepts.</li>
<li>JSX (JS XML), this allows to write HTML-like code in js files. JSX may be more powerful and expressive.</li>
<li>a one-way data flow, explicitly manage state and re-render components when needed.</li>
<li>data flows in a one-way direction, from outside to inside, and from top to bottom. this ensures a simple and predictable data flow</li>
</ul>
<p>the differences between <strong>class component and function component</strong> can considered as the difference between vue and react. since vue uses class component</p>
<ul>
<li>no <code>this</code> issues in function components, you don’t have to do scope bonding</li>
<li>code lesser with function component, but worse maintaining</li>
<li>doesn’t need to manage state and life cycle</li>
</ul>
<h3 id="architectural-patterns"><a href="#architectural-patterns" class="headerlink" title="architectural patterns"></a>architectural patterns</h3><h4 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h4><ul>
<li>Model - View - Controller</li>
<li><code>model</code> contains data model, and describes how the data can be changed and manipulated.</li>
<li><code>view</code> is UI components. it receives data from the model (via the controller) and display it to the user.</li>
<li><code>controller</code> sits between <code>model</code> and <code>view</code>, processing the data from the <code>model</code> and passing back to the <code>view</code> for rendering.</li>
<li>view and model can interact with each other directly, so it’s <strong>coupled</strong>.</li>
</ul>
<h4 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h4><ul>
<li>Model – View – ViewModel</li>
<li><code>view</code> and <code>model</code> are same as in <code>MVC</code></li>
<li><code>ViewModel</code> sits below the UI layer, acts as a bridge between the View and Model. Unlike the Controller in MVC, it doesn’t handle user interactions directly. it binds data between the View and Model, and ensures that the View reflects the state of the Model and vice versa.</li>
<li><code>view</code> and <code>model</code> can’t interact with each other, it’s <strong>decoupled</strong>.</li>
<li>vue and react can be vm or mvvm, early Angular is mvc.</li>
</ul>
<h4 id="active-view-and-passive-view"><a href="#active-view-and-passive-view" class="headerlink" title="active view and passive view"></a>active view and passive view</h4><ul>
<li>the later only outputs UI and doesn’t accept user’s input, contains zero logic</li>
<li>the former contains events, data binging, and behaviors</li>
</ul>
<h2 id="Typescript"><a href="#Typescript" class="headerlink" title="Typescript"></a>Typescript</h2><h3 id="vs-js"><a href="#vs-js" class="headerlink" title="vs-js"></a>vs-js</h3><p><strong>pro</strong></p>
<ul>
<li>object-orient language static type checking.  it can find low level bugs, like spelling mistake, incorrect or instanceof variable properties</li>
<li>type infer.</li>
<li>optional parameters</li>
<li>enum support</li>
<li>better support in IDE, like intelliSense of editor, auto-supplement</li>
<li>the type files can increase code reading ability, and make the project maintaining easer</li>
<li><code>.d.ts</code> can be viewed as specifications</li>
<li>to identify incompatible interfaces when the field name changed</li>
</ul>
<p><strong>con</strong></p>
<ul>
<li>compiling step is required, and it may take a long time.</li>
<li>abstract class is not support</li>
<li>definition files for a third library is required</li>
<li>pollutes the code with type gymnastics</li>
</ul>
<h3 id="type-judgement"><a href="#type-judgement" class="headerlink" title="type judgement"></a>type judgement</h3><ul>
<li><p>Generics</p>
</li>
<li><p>keyof</p>
</li>
<li><p>typeof</p>
</li>
<li><p>indexed access: <code>User[&quot;name]</code></p>
</li>
<li><p>map types, use <code>-</code> or <code>+</code> to remove readonly or optional modifier</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> OptionsFlags&lt;Type&gt; = &#123;</span><br><span class="line">  [Property <span class="keyword">in</span> keyof Type]: Type[Property]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// change all readonly or optional properties to normal</span></span><br><span class="line"><span class="keyword">type</span> CreateMutable&lt;Type&gt; = &#123;</span><br><span class="line">  -<span class="keyword">readonly</span> [Property <span class="keyword">in</span> keyof Type]: Type[Property];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">type</span> Concrete&lt;Type&gt; = &#123;</span><br><span class="line">  [Property <span class="keyword">in</span> keyof Type]-?: Type[Property];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Diff-of-ts-and-d-ts"><a href="#Diff-of-ts-and-d-ts" class="headerlink" title="Diff of .ts and .d.ts"></a>Diff of <code>.ts</code> and <code>.d.ts</code></h3><ul>
<li><code>.d.ts</code> file is a declaration file, and would not be complied as a <code>js</code> file<ul>
<li>in a <code>.d.ts</code> file, if we want it act as a global declaration, then we have to use <code>/// Triple-Slash Directives</code> to import dependencies</li>
<li><code>/// &lt;reference types=&quot;node&quot; /&gt;</code> is used for importing an outside module, while <code>/// &lt;reference types=&quot;./global.d.ts&quot; /&gt;</code> is for importing a local <code>declaration</code> file</li>
</ul>
</li>
</ul>
<h3 id="built-in-types"><a href="#built-in-types" class="headerlink" title="built-in-types"></a>built-in-types</h3><ul>
<li><p><code>any</code> <code>unknown</code> <code>object</code></p>
<ul>
<li><code>any</code>, <code>extends object</code> instead of <code>any</code> when reference to an object</li>
<li><code>unknown</code> is safer type of <code>any</code>, allow to narrow down to any type  with <code>type assertion</code></li>
<li><code>object</code>, infer to an object but don’t care what kind of object it is</li>
</ul>
</li>
<li><p><code>null</code> <code>undefined</code></p>
<ul>
<li><code>null</code> represents an intentional absence of any value.</li>
<li><code>undefined</code> represents a variable that has been declared but not assigned</li>
</ul>
</li>
<li><p><code>void</code>, when a fun’s output is <code>null</code> or <code>undefined</code></p>
</li>
<li><p><code>never</code> is used when a function can’t end properly which means it can’t return <code>undefined</code>. <strong>to express an empty object</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">object</span>, <span class="title">K</span> <span class="title">extends</span> <span class="title">keyof</span> <span class="title">T</span>&gt;(<span class="params">o: T, name: K</span>): <span class="title">T</span>[<span class="title">K</span>] </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> o[name]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> foo: unknown = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> bar: string = foo <span class="keyword">as</span> string;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params">data: LoginForm</span>): <span class="title">void</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params">data: LoginForm</span>): <span class="title">never</span> </span>&#123;</span><br><span class="line"> <span class="keyword">while</span> (<span class="literal">true</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params">data: LoginForm</span>): <span class="title">never</span> </span>&#123;</span><br><span class="line"> <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type EmptyObject = Record&lt;string, never&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>this</code>, explicitly define the type of <code>this</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Box</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  value?: T;</span><br><span class="line">  hasValue(): <span class="built_in">this</span> is &#123; <span class="attr">value</span>: T &#125; <span class="keyword">return</span> <span class="built_in">this</span>.value !== <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Diff-of-type-and-interface"><a href="#Diff-of-type-and-interface" class="headerlink" title="Diff of type and interface"></a>Diff of <code>type</code> and <code>interface</code></h3><ul>
<li><p><code>type</code> is used to declare a type alias, act like a variable. while interface introduce a named object type.</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// get the type of a variable to deduct (a part) of a payment from (the total)</span></span><br><span class="line"><span class="keyword">let</span> div = <span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>)</span><br><span class="line"><span class="keyword">type</span> B = <span class="keyword">typeof</span> div</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>interface</code>, can be declared multiple times, and its repeated declarations will be merged. while repeatedly declare <code>type</code> can trigger error</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> User &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> User &#123;</span><br><span class="line">  <span class="attr">sex</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* &#123; name: string;  age: number; sex: string  &#125; */</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="features"><a href="#features" class="headerlink" title="features"></a>features</h3><ul>
<li><p><code>satisfies</code>, ensures that an expression meets certain constraints without altering the type of the expression.</p>
</li>
<li><p>circular references</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> LocalRes&lt;T&gt; &#123; [x: <span class="built_in">string</span>]: T &#125;</span><br><span class="line"><span class="keyword">type</span> LocalResPackage = LocalRes&lt;LocalResPackage | <span class="built_in">string</span>&gt; </span><br></pre></td></tr></table></figure>
</li>
<li><p><code>new</code>  describe the shape of a constructor</p>
</li>
<li><p><code>abstract</code> to mark a class with <code>abstract</code>, means that the class is only meant to be extended from, can’t be used directly</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">  <span class="keyword">abstract</span> getArea(): <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Shape(); <span class="comment">// error Cannot create an instance of an abstract class.</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">new</span> Square(<span class="number">3</span>) <span class="comment">// right</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>extends</code>, conditional type, <code>SomeType extends OtherType ? TrueType : FalseType;</code></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// if Dog extends from Animal, then Example = number, otherwise Example = string</span></span><br><span class="line"><span class="keyword">type</span> Example = Dog <span class="keyword">extends</span> Animal ? <span class="built_in">number</span> : <span class="built_in">string</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>infer</code>, type inference, can unpack type, e.g. to get the item’s type of an array, the return value’s type or the parameter’s type of a function</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// if T is a function ? the return value of the function : any</span></span><br><span class="line"><span class="keyword">type</span> Unpack&lt;T&gt; = T <span class="keyword">extends</span> (...args: <span class="built_in">any</span>[]) =&gt; infer R ? R : <span class="built_in">any</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// if T is an Array ? R : T</span></span><br><span class="line"><span class="keyword">type</span> Unpack&lt;T&gt; = T <span class="keyword">extends</span> <span class="built_in">Array</span>&lt;infer R&gt; ? R : T</span><br><span class="line"></span><br><span class="line"> <span class="comment">// the item type of array</span></span><br><span class="line"> <span class="keyword">typeof</span> UserChosen[<span class="built_in">number</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// if R is Reducer ? Reducer&#x27;s first parameter S : never</span></span><br><span class="line"><span class="keyword">type</span> ReducerState&lt;R <span class="keyword">extends</span> Reducer&lt;<span class="built_in">any</span>, <span class="built_in">any</span>&gt;&gt; = R <span class="keyword">extends</span> Reducer&lt;infer S, <span class="built_in">any</span>&gt; ? S : <span class="built_in">never</span>;</span><br><span class="line"><span class="keyword">type</span> Reducer&lt;S, A&gt; = <span class="function">(<span class="params">prevState: S, action: A</span>) =&gt;</span> S;</span><br><span class="line"></span><br><span class="line"><span class="comment">// get the parameter type of a constructor</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractClass</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">a: <span class="built_in">string</span>, b: <span class="built_in">number</span></span>)</span> &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> InferAbstract&lt;T&gt; = T <span class="keyword">extends</span> <span class="keyword">abstract</span> <span class="keyword">new</span> (...args: infer Args) =&gt; infer _ ? Args : <span class="built_in">never</span>; <span class="comment">// new a function which return a value,  infer the parameter as Args, mark the value as abstract class, if T is a abstract class ?  Args : never</span></span><br><span class="line"><span class="keyword">type</span> Result = InferAbstract&lt;<span class="keyword">typeof</span> AbstractClass&gt; <span class="comment">// [a: string, b: number]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>decorators, use the form <code>@expression</code>, where the expression must infer to a function.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">first</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;first(): factory evaluated&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target: any, propertyKey: string, descriptor: PropertyDescriptor</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;first(): called&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">second</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;second(): factory evaluated&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target: any, propertyKey: string, descriptor: PropertyDescriptor</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;second(): called&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">ExampleClass</span> </span>&#123;</span><br><span class="line">@first()</span><br><span class="line">@second()</span><br><span class="line"><span class="function"><span class="title">method</span>(<span class="params"></span>)</span> &#123;&#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>Record</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> type AnyObject = Record&lt;string, any&gt;</span><br><span class="line"> type Coord = Record&lt;<span class="string">&quot;x&quot;</span> | <span class="string">&quot;y&quot;</span>, number&gt;</span><br><span class="line"> type Coord = &#123;</span><br><span class="line"><span class="attr">x</span>: number,</span><br><span class="line"><span class="attr">y</span>: number,e</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>Readonly</code> <code>Partial</code> <code>Required</code>: all the properties are Readonly / selectable / required</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">type Coord = Partial&lt;Record&lt;<span class="string">&quot;x&quot;</span> | <span class="string">&quot;y&quot;</span>, number&gt;&gt;</span><br><span class="line">type Coord = &#123;</span><br><span class="line">  x?: number,</span><br><span class="line">  y?: number,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>Pick</code> <code>omit</code>: to pick or omit some properties from a given type</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Coord = Record&lt;<span class="string">&quot;x&quot;</span> | <span class="string">&quot;y&quot;</span>, <span class="built_in">number</span>&gt;</span><br><span class="line"><span class="keyword">type</span> CoordX = Pick&lt;Coord, <span class="string">&quot;x&quot;</span>&gt;</span><br><span class="line"><span class="keyword">type</span> CoordX = Omit&lt;Coord, <span class="string">&quot;x&quot;</span>&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>ReturnType</code> <code>Parameters</code>, get the output / input of a function</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> timer: ReturnType&lt;<span class="keyword">typeof</span> <span class="built_in">setTimeout</span>&gt;</span><br><span class="line">Parameters&lt;<span class="function">(<span class="params">props: Event</span>) =&gt;</span> <span class="built_in">void</span>&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>typeof</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> zed: Hero = &#123; <span class="attr">name</span>: <span class="string">&quot;影流之主&quot;</span>, <span class="attr">skill</span>: <span class="string">&quot;影子&quot;</span> &#125;;</span><br><span class="line">type LOL = <span class="keyword">typeof</span> zed; <span class="comment">// type LOL = Hero</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>keyof</code> collecting key</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface Person &#123; <span class="attr">name</span>: string; age: number;  location: string; &#125;</span><br><span class="line">type K1 = keyof Person; <span class="comment">// &quot;name&quot; | &quot;age&quot; | &quot;location&quot;</span></span><br><span class="line">type K2 = keyof Person[];  <span class="comment">// number | &quot;length&quot; | &quot;push&quot;|&quot;concat&quot; | ...</span></span><br><span class="line">type K3 = keyof &#123; [x: string]: Person &#125;;  <span class="comment">// string | number</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>enums</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">enum Themes &#123;</span><br><span class="line"><span class="keyword">default</span> = <span class="string">&quot;_default&quot;</span>,</span><br><span class="line">thinkuem = <span class="string">&quot;_thinkuem&quot;</span>,</span><br><span class="line">safeuem = <span class="string">&quot;_safeuem&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// collect all the values of an enum, but the types of all the values will be inferred as string, even some values are number or string</span></span><br><span class="line">type ThemesVal = <span class="string">`<span class="subst">$&#123;Themes&#125;</span>`</span></span><br><span class="line"><span class="comment">// generate a interface</span></span><br><span class="line">type ThemesVal = Record&lt;Themes, string&gt;</span><br><span class="line"><span class="comment">// collect all the keys of a enum</span></span><br><span class="line">type ThemesVal = keyof <span class="keyword">typeof</span> Themes</span><br></pre></td></tr></table></figure>
</li>
<li><p>template literal type, a set of every possible string literal that could be represented by each union member</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">type a = <span class="number">1</span> | <span class="number">2</span> | <span class="number">3</span></span><br><span class="line">type b = <span class="number">4</span> | <span class="number">5</span> | <span class="number">6</span></span><br><span class="line">type ab = <span class="string">`<span class="subst">$&#123;a&#125;</span>_<span class="subst">$&#123;b&#125;</span>`</span> <span class="comment">//  &quot;1_4&quot; | &quot;1_5&quot; | &quot;1_6&quot; | &quot;2_4&quot; | &quot;2_5&quot; | &quot;2_6&quot; | &quot;3_4&quot; | &quot;3_5&quot; | &quot;3_6&quot;</span></span><br><span class="line">   type PropEventSource&lt;Type&gt; = &#123;</span><br><span class="line">     on(eventName: <span class="string">`<span class="subst">$&#123;string &amp; keyof Type&#125;</span>Changed`</span>, <span class="attr">callback</span>: <span class="function">(<span class="params">newValue: any</span>) =&gt;</span> <span class="keyword">void</span>): <span class="keyword">void</span>;</span><br><span class="line">   &#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>four convenient features <code>Uppercase</code> <code>Lowercase</code> <code>Capitalize</code> <code>Uncapitalize</code></li>
</ul>
</li>
<li><p>type assertion, <code>as</code> <code>&lt;&gt;</code> syntax</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> value: unknown = <span class="string">&quot;Foo&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> len: number = (value <span class="keyword">as</span> string).length;</span><br><span class="line"><span class="keyword">let</span> len: number = (&lt;string&gt;value).length;</span><br><span class="line"><span class="comment">// response is changed in the interceptor, so the first type parameter &lt;unknown&gt; indicates that the response type is not known or specified.</span></span><br><span class="line">client.post&lt;unknown, EquipmentUptime&gt;(api.insert, data);</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>is</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">arg: string</span>): <span class="title">arg</span> <span class="title">is</span> <span class="title">MyType</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>in</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;model&#x27;</span> <span class="keyword">in</span> car);  <span class="comment">// boolean</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>as const</code>, to infer in an explicitly way, infer 1 to 1 instead of number, infer false to false instead of boolean</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> x = [<span class="number">0</span>, <span class="number">1</span>] <span class="keyword">as</span> <span class="keyword">const</span>; <span class="comment">// let x: [0,1]</span></span><br><span class="line"><span class="comment">// another write pattern:   let x = &lt;const&gt;[0, 1];</span></span><br><span class="line"><span class="keyword">let</span> x = [<span class="number">0</span>,<span class="number">1</span>] <span class="comment">// let x: number[]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> y = [<span class="number">10</span>, <span class="number">20</span>] <span class="keyword">as</span> <span class="keyword">const</span>; <span class="comment">// Type &#x27;readonly [10, 20]&#x27;</span></span><br><span class="line"><span class="keyword">let</span> z = &#123; <span class="attr">text</span>: <span class="string">&quot;hello&quot;</span> &#125; <span class="keyword">as</span> <span class="keyword">const</span>; <span class="comment">// Type &#x27;&#123; readonly text: &quot;hello&quot; &#125;&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>map types</code>, to generate a type According to a map object, and can be a <code>generics</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> type OptionsFlags&lt;Type&gt; = &#123;</span><br><span class="line">[Property <span class="keyword">in</span> keyof Type]: boolean;</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>index access</code> for looking up a specific property of a type</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">type Age = Person[<span class="string">&quot;age&quot;</span>]</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>generics</code>泛型 generate a type with a specific params</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">identity</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123; <span class="keyword">return</span> arg &#125;</span><br><span class="line"><span class="comment">// use the union type |  to include undefined </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">identity</span>&lt;<span class="title">T</span> = <span class="title">undefined</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123; <span class="keyword">return</span> arg &#125;</span><br><span class="line"><span class="comment">// use extends to limit or constrain the allowed types that the generic can be.</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">identity</span>&lt;<span class="title">T</span> <span class="title">extents</span> <span class="title">object</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123; <span class="keyword">return</span> arg &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>implements</code>, to check that whether a class is satisfied the contract specified by one or above interfaces</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> interface Runnable &#123;</span><br><span class="line">run(): <span class="keyword">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Job</span> <span class="title">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="title">run</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;running the scheduled job!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>triple slash directives, to introduce other files in the compiling process</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">/// <span class="tag">&lt;<span class="name">reference</span> <span class="attr">path</span>=<span class="string">&quot;...&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>class modifiers</p>
<ul>
<li>public</li>
<li>protected: All the members of the class and its child classes can access them, But not the instance of the class.</li>
<li>private: Only the members of the class can access them.</li>
</ul>
</li>
<li><p>to override a property of a interface extended</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface ColorPickerProps <span class="keyword">extends</span> Omit&lt;BasicProps&lt;string&gt;, <span class="string">&quot;change&quot;</span>&gt; &#123;</span><br><span class="line">  <span class="attr">change</span>: <span class="keyword">import</span>(<span class="string">&quot;react-color&quot;</span>).ColorChangeHandler</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>use <code>map</code> and <code>literal</code> to create new property names</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">type Getters&lt;Type&gt; = &#123;</span><br><span class="line"> [Property <span class="keyword">in</span> keyof Type <span class="keyword">as</span> <span class="string">`get<span class="subst">$&#123;Capitalize&lt;string &amp; Property&gt;&#125;</span>`</span>]: <span class="function">() =&gt;</span> Type[Property]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>to extend html attributes</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">declare <span class="built_in">module</span> <span class="string">&quot;react&quot;</span> &#123;</span><br><span class="line">  interface DOMAttributes&lt;T&gt; &#123;</span><br><span class="line">	name?: string</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="React"><a href="#React" class="headerlink" title="React"></a>React</h2><h3 id="life-cycle"><a href="#life-cycle" class="headerlink" title="life cycle"></a>life cycle</h3><ul>
<li><p><strong>Mount Phase</strong></p>
<ul>
<li><p>initialize</p>
<ul>
<li>class: <code>constructor</code></li>
<li>fun: inside the function</li>
</ul>
</li>
<li><p>before render</p>
<ul>
<li><p>class: <code>getDerivedStateFromProps</code>, React will call it right before calling render, both on the initial mount and on subsequent updates. It should return an object to update the state, or null to update nothing.</p>
</li>
<li><p>fun: compare the state and then return the appropriate result within the function</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ScrollView</span>(<span class="params">&#123;row&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [isScrollingDown, setIsScrollingDown] = useState(<span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">const</span> [prevRow, setPrevRow] = useState(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (row !== prevRow) &#123;</span><br><span class="line">	  setIsScrollingDown(prevRow !== <span class="literal">null</span> &amp;&amp; row &gt; prevRow);</span><br><span class="line">	  setPrevRow(row);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`Scrolling down: <span class="subst">$&#123;isScrollingDown&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>rendering</p>
</li>
<li><p>after render</p>
<ul>
<li>class: <code>componentDidMount</code></li>
<li>fun: <code>useEffect()</code> with an empty dependency array</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>Update Phase</strong></p>
<ul>
<li><p>before update</p>
<ul>
<li><p>class: <code>getDerivedStateFromProps</code> =&gt; <code>shouldComponentUpdate</code></p>
</li>
<li><p>fun:  <code>useMemo</code> for shallowly comparing</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// MyComponent will only re-render if the value prop changes</span></span><br><span class="line">  <span class="keyword">const</span> MyComponent = React.memo(<span class="function">(<span class="params">&#123; value &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// Component logic</span></span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;value&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>rendering</p>
<ul>
<li>class: <code>getSnapshotBeforeUpdate(prevProps, prevState)</code> it could return a value as the third argument of <code>componentDidUpdate</code></li>
<li>fun:  use <code>useRef</code> to get the old and new state</li>
<li>class: <code>componentDidUpdate</code></li>
<li>fun:  <code>useEffect()</code> with watched data</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>unmount stage</strong></p>
<ul>
<li>class: <code>componentWillUnmount</code></li>
<li>fun: the returned function of <code>useEffect()</code></li>
</ul>
</li>
<li><p><strong>Error Handling</strong></p>
<ul>
<li><code>getDerivedStateFromError(error)</code>: allow the component to capture errors in its children when they occur during rendering</li>
<li><code>componentDidCatch(error, info)</code>: It can log error information and display a fallback UI when an error is thrown by a child component.</li>
</ul>
</li>
</ul>
<h3 id="view-updating"><a href="#view-updating" class="headerlink" title="view updating"></a>view updating</h3><p><strong>props changing</strong><br>In React, data flows in a one-way direction, from outside to inside, and from top to bottom. To ensure this simple and predictable data flow, <code>props</code> are kept read-only</p>
<p><strong>state changing</strong>：useState(), useReducer(), redux state<br>the data will not update immediately when we call <code>setState</code>, multiple updates from different components will be merged into a single re-render automatically. it’s called <code>batching update</code>.</p>
<ul>
<li><p>the process <code>setState</code><br><code>setState(partialState)</code> =&gt; merges <code>partialState</code> into the current state<br>=&gt; if <code>isBatchingUpdates === true</code>(is react in the batch updating status), then push this update into <code>_pendingStateQueue</code>(the queue of pending updates) , else set <code>isBatchingUpdates = true</code> and re-call the previous step<br>=&gt; call <code>waper()</code> to iterate <code>_pendingStateQueue</code> to execute update<br>=&gt; <code>componentWillReceiveProps</code><br>=&gt; to merge the states to get the new state<br>=&gt; <code>componentShouldUpdate</code>, and then determines whether to continue the update process<br>=&gt; <code>componentWillUpdate</code><br>=&gt; <code>render</code><br>=&gt; <code>componentDidUpdate</code></p>
</li>
<li><p>even an empty object like <code>this.setState(&#123;&#125;)</code> will also trigger a new update cycle</p>
</li>
<li><p>the updated data can be achieved in callback</p>
</li>
<li><p><code>setTimeout</code> or native events can step over React asynchronous behavior and achieve a sync response</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123; <span class="attr">number</span>: <span class="number">3</span> &#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.state.number) <span class="comment">// 3</span></span><br><span class="line">  &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="built_in">document</span>.body.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="built_in">this</span>.changeVal, <span class="literal">false</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>ReactDOM.flushSync()</code> in v18, this method is used when you don’t want to apply <code>automatic batching</code>. updates in this method will be update immediately, and it’s a sync method, since we know that <code>setState</code> is a async method.</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">import</span> &#123; flushSync &#125; <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span>; <span class="comment">// Note: react-dom, not react</span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">handleClick</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">flushSync(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  setCounter(<span class="function"><span class="params">c</span> =&gt;</span> c + <span class="number">1</span>);</span><br><span class="line">&#125;);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>


<p><strong>context</strong>, this is shallowly compare<br><strong>forceUpdate()</strong>, only support in class component, and <code>shouldComponentUpdate()</code> will be skipped<br><strong>dom changing</strong> through <code>ref</code> or <code>native dom handlers</code></p>
<h3 id="components-conversation"><a href="#components-conversation" class="headerlink" title="components conversation"></a>components conversation</h3><ul>
<li>parent to children: props</li>
<li>children to parent: callbacks inside the parent props, event bubbling(eventually, events will bubble up to the parent)</li>
<li>between brother: find the common parent node, and then through the above methods</li>
<li>context, other global state management tools</li>
<li>ref</li>
<li>importing a module and interacting within the module scope</li>
</ul>
<h3 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h3><ul>
<li>every file should import react, as long as <code>jsx</code> code is contained<ul>
<li>cause <code>jsx</code> will be translated by <code>babel</code> to <code>React.createElement()</code></li>
</ul>
</li>
<li>a custom component name should begin with a capital letter<ul>
<li>if the first letter is lowercase, the component will be treated as a native html element. this rule helps to differentiate custom components from standard HTML tags.</li>
</ul>
</li>
<li>a component should only return one element<ul>
<li>virtual dom is a tree structure, only one root is allowed</li>
<li>return multiple elements: return an array of elements, <code>&lt;React.Fragment&gt;&lt;/React.Fragment&gt;(&lt;&gt;&lt;/&gt; is a syntax sugar)</code></li>
</ul>
</li>
</ul>
<h3 id="high-order-component"><a href="#high-order-component" class="headerlink" title="high order component"></a>high order component</h3><ul>
<li>HOC is a function, which accepts a component and additional arguments, then returns a new component that maintains a similar interface to the original one.</li>
<li>HOC’s name begins with <code>with</code>, such as <code>withButton</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">type HOC = <span class="function">(<span class="params">component: React.component, props</span>) =&gt;</span> React.component</span><br></pre></td></tr></table></figure>

<p><strong>features</strong></p>
<ul>
<li>It allows for the addition or modification of the props of a component, enabling us to handle complex or dirty business logic without affecting the original component.</li>
<li>unifying data source. such as <code>connect</code> in redux.</li>
<li>to renders different components based on data. e.g., rendering after login can help avoid setting up multiple routers.</li>
<li>If multiple components have the same dependencies, instead of importing the function into each component separately, we can apply the function to different components using HOC</li>
<li><code>container</code> and <code>component</code>. The former handles logic, while the latter receives props from <code>container</code> and is only responsible for rendering.</li>
</ul>
<h3 id="Render-Props"><a href="#Render-Props" class="headerlink" title="Render Props"></a>Render Props</h3><ul>
<li>it is a mode, a component with <code>a callback</code> which accepts component’s data and return React elements</li>
<li>tips: try not use <code>Render Props</code> with <code>pureComponent</code>, because <code>this callback</code> will return a new value after parent re-render. while <code>pureComponent</code> is shadow compare for reduce the times of children re-render, but with <code>Render Props</code> the result of compare will always be false.</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;DataProvider render=&#123;<span class="function"><span class="params">data</span> =&gt;</span> (</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello &#123;data.target&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">)&#125;/&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> DataProvider = <span class="function">(<span class="params">props</span>) =&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;this.props.render(this.state)&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>render prop</code> is kind of a simply <code>HOC</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;Mouse render=&#123;<span class="function"><span class="params">mouse</span> =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">Component</span> &#123;<span class="attr">...this.props</span>&#125; <span class="attr">mouse</span>=<span class="string">&#123;mouse&#125;</span> /&gt;</span></span>&#125;/&gt;</span><br></pre></td></tr></table></figure>

<h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h3><ul>
<li>ref is a way for accessing dom</li>
<li>create ref by <code>React.createRef()</code> or <code>useRef()</code></li>
<li>it is not support to access <code>ref</code> directly on a <code>function component</code> which does <strong>not have ref instance</strong>.</li>
</ul>
<h4 id="callback-ref"><a href="#callback-ref" class="headerlink" title="callback ref"></a>callback ref</h4><ul>
<li>differ from <code>React.createRef()</code>, pass a function to components is also allowed</li>
<li>a better way is use with <code>useCallback()</code> hook, then it wouldn’t be executed every time after component updated</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> inputRef = <span class="function">(<span class="params">node</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="comment">// argument is a dom element during mount</span></span><br><span class="line"> <span class="comment">// argument is null when unmount</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> inputRef = useCallback(<span class="function"><span class="params">node</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(node);</span><br><span class="line">&#125;, []);</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">ref</span>=<span class="string">&#123;inputRef&#125;/</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h4 id="ref-forwarding"><a href="#ref-forwarding" class="headerlink" title="ref forwarding"></a>ref forwarding</h4><ul>
<li>Ref forwarding lets components <strong>opt into</strong> exposing any child component’s ref as their own.</li>
<li>we can <em>customize the data exposed to the outside</em> using <code>useImperativeHandle()</code>.</li>
<li><em>to access child node from a parent component</em> for <strong>triggering focus</strong> or <strong>measuring the size or position of a child dom</strong>.</li>
<li>it is useful in <code>HOC</code>, like assigning ref to input’s ref in a input component</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FancyInput</span>(<span class="params">props, ref</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> inputRef = useRef();</span><br><span class="line">  <span class="comment">// assign focus to inputRef</span></span><br><span class="line">  useImperativeHandle(ref, <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">	  <span class="attr">focus</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">	    inputRef.current.focus();</span><br><span class="line">	  &#125;</span><br><span class="line">  &#125;));</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;inputRef&#125;/</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line">FancyInput = forwardRef(FancyInput);</span><br><span class="line"></span><br><span class="line"><span class="comment">// this ref will be the input&#x27;s ref and can use the focus method</span></span><br><span class="line"><span class="keyword">const</span> ref = React.createRef();</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">FancyInput</span> <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span> /&gt;</span></span>;</span><br></pre></td></tr></table></figure>

<h3 id="hooks"><a href="#hooks" class="headerlink" title="hooks"></a>hooks</h3><blockquote>
<ul>
<li>each component has an initial list of “memory cells”, when we call a hook like <code>useState()</code>, it reads the current cell or initializes it during the first render.</li>
<li>hook is a function which lets you to “hook into” <code>React state</code> and lifecycle features from function components.</li>
<li>use pure function as much as possible</li>
</ul>
</blockquote>
<ul>
<li><p><strong>useState()</strong>  keeps the local state in a function component, when we update a state variable, react replaces the state instead of merging it like <code>this.state()</code> in class component.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// fun will only execute once when the component initialize</span></span><br><span class="line"><span class="keyword">const</span> [goodGet, goodSet] = React.useState(<span class="function">() =&gt;</span> fun(<span class="number">0</span>))</span><br><span class="line"><span class="comment">// fun will execute every time the component re-render</span></span><br><span class="line"><span class="keyword">const</span> [badGet, badSet] = React.useState(fun(<span class="number">1</span>))</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>useReducer()</strong>, store a complicated state, act like a small redux in a component.</p>
</li>
<li><p><strong>useRef()</strong>, store data, and the value returned remains valid throughout the entire life cycle</p>
</li>
<li><p><strong>useEffect() / useLayoutEffect()</strong></p>
<ul>
<li>one is called after the data is updated,  the another is called after the DOM is updated.</li>
<li><strong>render will change the reference of the object, so don’t use an object as deps item for best. useMemo can help</strong></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// empty dependency array</span></span><br><span class="line">useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// mounted = componentDidMount and componentDidUpdate</span></span><br><span class="line">  <span class="keyword">return</span> fun() <span class="comment">// unmount = componentWillUnmount</span></span><br><span class="line">&#125;, [])</span><br><span class="line"><span class="comment">// specific dependency array</span></span><br><span class="line">useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//  updated</span></span><br><span class="line">  <span class="keyword">return</span> fun()<span class="comment">// componentWillUnmount and componentWillUpdate</span></span><br><span class="line">&#125;, [id])</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>useContext()</strong> accept a context object created by <code>createContext()</code> and returns the current context value.. it’s used when components of different nesting levels need to access the same data.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> value = useContext(MyContext)</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>createContext()</strong> accept a default value and returned a context object which has three properties. context will shallowly compare the properties of value to decide whether it should re-render.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> MyContext = React.createContext(defaultValue)</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>use useContext() with useReducer()</code> allows passing callbacks to children, avoiding the need to pass callbacks layer by layer.<br>create a context object for passing <code>dispatch</code> to children, so any child within the component can get the <code>dispatch</code> by <code>useContext</code>.</p>
</li>
<li><p><code>provider</code>: a react component, that allows to consume components to subscribe to context changes.</p>
</li>
<li><p><code>consumer</code>: a react component, that allows components to subscribe to context value</p>
</li>
<li><p><code>displayName</code>:  can be modified directly, and is showed in DevTools</p>
</li>
<li><p><code>contextType</code>: a property on a class component can be assigned a Context object</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt; MyContext.Provider value = &#123;<span class="comment">/* some value */</span> &#125; /&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">MyContext.Consumer</span>&gt;</span></span></span><br><span class="line"><span class="xml">  &#123;value =&gt; /*you can return a component and assign the value to it*/&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">MyContext.Consumer</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">MyContext.displayName = <span class="string">&#x27;MyDisplayName&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>useCallback() / useMemo()</strong> accept a function and an array of dependencies</p>
<ul>
<li>the former memorizes the received function, while the latter memorizes the value returned by the received function</li>
<li><code>useCallback()</code> allows to keep same callback after re-render, and is recommend to use as <code>callback ref</code> to get dom node after mound</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> measuredRef = useCallback(<span class="function"><span class="params">node</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(node);</span><br><span class="line">&#125;, []);</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">ref</span>=<span class="string">&#123;measuredRef&#125;</span>&gt;</span>Hello, world<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>custom hook</strong></p>
<ul>
<li>It allows for the sharing of stateful logic, rather than the state itself. Its purpose is to encapsulate reusable logic.</li>
</ul>
</li>
<li><p><strong>useTransition</strong></p>
</li>
<li><p><strong>useDeferredValue()</strong></p>
<ul>
<li>Using the staled value allows de-prioritizing the updating of a part of the UI. Deferring the re-rendering of that part serves as a performance optimization to prevent it from blocking the rest of the UI. this effect may similar to <code>debounce</code></li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// in this case, SlowList is running slowly and should update in response to user input. This indicates that SlowList is blocking user input and the rendering of this component.</span></span><br><span class="line"><span class="comment">// With the help of useDeferredValue, the dependencies are delayed to update, consequently causing SlowList to be delayed.</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [text, setText] = useState(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> deferredText = useDeferredValue(text);</span><br><span class="line">  <span class="comment">// the re-call of SlowList depends on the deferredText</span></span><br><span class="line">  <span class="keyword">const</span> SlowList = useMemo(<span class="function"><span class="keyword">function</span> <span class="title">SlowList</span>(<span class="params">&#123; text &#125;</span>) </span>&#123;&#125;, [deferredText]);</span><br><span class="line">  <span class="built_in">console</span>.log(deferredText, text)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&#123;text&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;e</span> =&gt;</span> setText(e.target.value)&#125; /&gt;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">SlowList</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>what’s happened?<ul>
<li><code>useDeferredValue</code> is realized by <code>useTransition</code> and <code>useEffect</code> under the react hood</li>
<li>input <code>1</code> =&gt; <code>setText</code> executes, <code>text</code> updates to <code>1</code> =&gt; render(<code>text</code> = 1, <code>deferredText</code> = “”) =&gt; the <code>callback</code> of <code>useEffect</code> executes =&gt; Update <code>deferredText</code> to match <code>text</code> =&gt; render(<code>text</code> = 1, <code>deferredText</code> = “”)</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="difference-between-class-and-hook"><a href="#difference-between-class-and-hook" class="headerlink" title="difference between class and hook"></a>difference between class and hook</h3><ul>
<li><p><code>class component</code> is hard to reconstruct and decompose</p>
</li>
<li><p>compilation of <code>class component</code> will generate a lot of auxiliary functions</p>
</li>
<li><p><code>class component</code> require <code>this</code> when passing a function to a component</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// by a arrow-function. when the parent refresh, a new arrow function will be generated and the offspring will refresh, even the received props haven&#x27;t change</span></span><br><span class="line">&lt;button onClick=&#123;<span class="function">() =&gt;</span> <span class="built_in">this</span>.handleClick1()&#125;&gt; btn3 &lt;/button&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// by bind. the side effect of this is same with the last one</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick1.bind(this)&#125;</span>&gt;</span> btn2 <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// to declare in the constructor, but it cannot pass parameters</span></span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123; <span class="built_in">this</span>.handleClick1 = <span class="built_in">this</span>.handleClick1.bind(<span class="built_in">this</span>)  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// by the static property of class, same with the last one</span></span><br><span class="line">handleClick3 = <span class="function">() =&gt;</span> &#123; &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>no <code>this</code> issues in function components, which helps to avoid problems with scope</p>
</li>
<li><p>code lesser with function component, but worse maintaining</p>
</li>
<li><p>doesn’t need to manage state and life cycle</p>
</li>
</ul>
<h3 id="key"><a href="#key" class="headerlink" title="key"></a>key</h3><p>when an array re-rendering, React will check each list item according to the last render. if an inexistent item of the last render is found in the current render, then react will create an new element. if an item of the last render is altered in the current render, then react will delete the old one and create a new one.</p>
<ul>
<li>The index of an item in an array is Lack of Stability, since add, remove, and reorder are frequent operations.</li>
</ul>
<h3 id="shouldComponentUpdate-VS-pureComponent"><a href="#shouldComponentUpdate-VS-pureComponent" class="headerlink" title="shouldComponentUpdate VS pureComponent"></a>shouldComponentUpdate VS pureComponent</h3><ul>
<li>the former is in the life cycle of class components, by return a boolean to decide whether to continue update</li>
<li>the later can shallowly compare props and states</li>
<li>both of them are helpful for avoiding needless re-render.</li>
</ul>
<h3 id="fiber"><a href="#fiber" class="headerlink" title="fiber"></a>fiber</h3><p><strong>stack Reconciliation(differ process)</strong></p>
<ul>
<li><strong>current tree and WIP(working-in-progress) tree</strong> react creates <code>WIP tree(working-in-progress)</code> based on <code>current tree</code> which marks the current view. <code>WIP tree</code> is used to perform updates under the hood.</li>
<li>React uses <code>DFS(depth first search)</code> to traverse two virtual dom tree, comparing the new and old props, as well as the <code>current tree</code> with the <code>WIP tree</code>, to identify changed nodes and determine which needs to be updated, this process called <strong>Reconciliation</strong>. The result of <code>Reconciliation</code> will be applied to the <code>current tree</code>.</li>
<li>during <code>Reconciliation</code>, the traversal process can cause performance problems as the DOM tree grows larger, and it cannot be stopped once it’s started. React occupies the resources of the browser until it’s finished, so when handling complex views, it can lead to blocking in the main thread, resulting in unresponsiveness in the page.</li>
</ul>
<p><strong>what is fiber</strong></p>
<ul>
<li>React saves references to the <code>return(parent)</code>, <code>sibling</code>, and <code>child</code> nodes, the data structure is similar to <code>linked list</code>. This more powerful representation of the virtual DOM tree is known as <code>Fiber</code>.</li>
<li><code>Fiber</code>‘s  references enable React to memorize the work in progress,  and then pause and resume the <code>Reconciliation</code> process.</li>
</ul>
<p><strong>Fiber structure</strong></p>
<ul>
<li>React slices the process of <code>Reconciliation</code> into small pieces, this is called <code>time slicing</code>. It gives control to the browser to respond to user interactions and then takes back control to continue it’s work slice by slice(react =&gt; browser =&gt; react =&gt; browser ….). this mechanism of handling control is known as <strong>Fiber structure</strong>. in the <code>Fiber structure</code>, react gives control to browser to respond to user interactions at the right time, creating the perception of faster responsiveness.</li>
</ul>
<p><strong>fiber Reconciliation(differ process)</strong></p>
<ul>
<li>In the <code>Fiber structure</code>, during <code>Reconciliation</code>, React saves the nodes that has <code>effect(require changes)</code> in the <code>fiber</code>‘s’ property <code>effectTag</code>, and uses <code>nextEffect</code> to link those nodes in <code>linked list</code> structure.</li>
<li>After <code>Reconciliation</code>, React steps into the <strong>commit phase.</strong> During the <code>commit phase</code>, React applies all the <code>effects</code> to <code>WIP tree</code> in one go, while this process cannot be interrupted.</li>
</ul>
<p><strong>Concurrent Mode</strong></p>
<ul>
<li>with <code>time slicing</code>, react ables to bounce back and forth between multiple tasks, and pause one task while other more urgent task are seen to. once the more urgent one are done, then jump back the less urgent one, bringing with the updated information from the more urgent one.</li>
<li><code>useTransition</code>, this hook is used to wraps a less urgent update.</li>
</ul>
<p><strong>DFS(depth first search) 深度优先遍历</strong> a search algorithm used for traversing or searching tree or graph data structures.<br><strong>linked list 链表</strong>, a common data structure used to store a collection of elements, where each element is connected to the next one through a node. Each node contains two parts: data and a reference (or pointer) to the next node.</p>
<h3 id="controlled-and-uncontrolled"><a href="#controlled-and-uncontrolled" class="headerlink" title="controlled and uncontrolled"></a>controlled and uncontrolled</h3><ul>
<li><p>they are two different approaches to managing form inputs and components</p>
</li>
<li><p><code>controlled</code> is driven by <code>props</code> or <code>state</code>, following one-direction data flow. <code>uncontrolled</code> is driven by <code>dom</code> itself, and retrieves value by <code>ref</code>.</p>
   <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> // uncontrolled</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">ref</span>=<span class="string">&#123;inputRef&#125;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">// controlled</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&#123;state.value&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;handleChange&#125;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>controlled components</code> offer more control and are preferred in most cases, while <code>uncontrolled components</code> can be useful in certain scenarios. In many cases, a mix of <code>controlled</code> and <code>uncontrolled</code> components may be the best approach</p>
<ul>
<li>for form inputs where real-time validation, formatting or data manipulation is not required. <code>uncontrolled components</code> can minimize state management overhead and improve performance.</li>
<li>when integrating with external libraries like date pickers or rich text editors, using controlled components allows these libraries to manage their own state</li>
</ul>
</li>
</ul>
<h3 id="Built-in-React-Components"><a href="#Built-in-React-Components" class="headerlink" title="Built-in React Components"></a>Built-in React Components</h3><h4 id="Fragment"><a href="#Fragment" class="headerlink" title="Fragment"></a>Fragment</h4><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// explicitly writing form  is required when pass key to a `Fragment`</span></span><br><span class="line">&lt;Fragment key=&#123;yourKey&#125;&gt;...&lt;/Fragment&gt;.</span><br><span class="line"></span><br><span class="line">&lt;&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">OneChild</span> /&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">AnotherChild</span> /&gt;</span></span></span><br><span class="line">&lt;/&gt;</span><br></pre></td></tr></table></figure>

<h4 id="Profiler"><a href="#Profiler" class="headerlink" title="Profiler"></a>Profiler</h4><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// measure rendering performance of a React tree. but adds some additional overhead, so it is disabled in the production build by default</span></span><br><span class="line">&lt;Profiler id=<span class="string">&quot;Sidebar&quot;</span> onRender=&#123;<span class="function">(<span class="params">id, phase, actualDuration, baseDuration, startTime, commitTime</span>) =&gt;</span> (&#123;&#125;)&#125;&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Sidebar</span> /&gt;</span></span></span><br><span class="line">&lt;/Profiler&gt;</span><br></pre></td></tr></table></figure>

<h4 id="Suspense-dynamic-import-lazy-loading"><a href="#Suspense-dynamic-import-lazy-loading" class="headerlink" title="Suspense + dynamic import + lazy loading"></a>Suspense + dynamic import + lazy loading</h4><ul>
<li><code>lazy loading</code> should always be declared at the top level of modules.</li>
<li>with webpack code splitting, each module loaded by <code>import()</code> will be split to separate files.</li>
<li>Data fetching, Lazy-loading by <code>lazy</code></li>
<li><code>fallback</code> will be used if any of <code>the children</code> suspend while waiting for data. nesting multiple <code>Suspense</code> components can create a loading sequence for revealing a component as it loads.</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> MarkdownPreview = lazy(<span class="function">() =&gt;</span> delayForDemo(<span class="keyword">import</span>(<span class="string">&#x27;./MarkdownPreview.js&#x27;</span>)));</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">MarkdownEditor</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Suspense</span> <span class="attr">fallback</span>=<span class="string">&#123;</span>&lt;<span class="attr">Loading</span> /&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Preview<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">MarkdownPreview</span>/&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">Suspense</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br></pre></td></tr></table></figure>

<h4 id="Portal"><a href="#Portal" class="headerlink" title="Portal"></a>Portal</h4><p>to render a component within other nodes. it can be used for dialog or message components</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">ReactDOM.createPortal(child,container)</span><br></pre></td></tr></table></figure>

<h4 id="StrictMode"><a href="#StrictMode" class="headerlink" title="StrictMode"></a>StrictMode</h4><ul>
<li>enables additional checks and warnings for its descendants.  it‘s used in the DEV mode only.</li>
<li>under <code>StrictMode</code>, setState updaters run twice.</li>
</ul>
<h3 id="redux"><a href="#redux" class="headerlink" title="redux"></a>redux</h3><h4 id="concept"><a href="#concept" class="headerlink" title="concept"></a>concept</h4><p>A(change) –&gt; B(send an <code>action</code> to <code>store</code>) –&gt; C(<code>store</code> dispatch the action to a <code>reducer</code>) –&gt; D(the <code>reducer</code> return a new state to <code>store</code>) –&gt; E(<code>state</code> changed)  –&gt; G(execute <code>listeners</code>)</p>
<ul>
<li><strong>store</strong>  a container created by <code>createStore()</code>, where data is changed and saved.</li>
<li><strong>state</strong> data, an object</li>
<li><strong>action</strong> An object include a required <code>type</code> property and other business related properties. The different values of the <code>type</code> determine the number of actions that a store can perform.</li>
<li><strong>reducer</strong> a function, receive an <code>action</code> ,and return a new <code>state</code>. it automatically triggered by <code>store.dispatch()</code><br><code>Reducers</code> should be as the parameter pass to the <code>createStore()</code> when initialize the <code>store</code>.</li>
</ul>
<h4 id="Redux-Methods"><a href="#Redux-Methods" class="headerlink" title="Redux Methods"></a>Redux Methods</h4><ul>
<li><p><code>createStore()</code>, <code>reducers</code> as parameter is required, an initial state, the third argument is enhancer like <code>middleware</code></p>
</li>
<li><p><code>provider</code> allow the redux hooks and connect to components</p>
</li>
<li><p><code>store.getState()</code> get the present state</p>
</li>
<li><p><code>store.dispatch()</code> sending an action to reducer</p>
</li>
<li><p><code>store.replaceReducer()</code> Replaces the reducer currently used by the store.</p>
</li>
<li><p><code>combineReducers()</code> organize your reducers to manage their own slices of state. accept an object whose values are different reducing functions and turn it into a single reducing function you can pass to <code>createStore</code>.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">combineReducers(&#123; <span class="attr">todo</span>: myTodoReducer, <span class="attr">counter</span>: myCounterReducer &#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>bindActionCreators</code> is wrap action into dispatch</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">type actionCreator = <span class="function">(<span class="params">payLoad: any</span>) =&gt;</span> &#123;...&#123;<span class="attr">type</span>: string &#125;, ...payload&#125;</span><br><span class="line">type dispatchAction = <span class="function">(<span class="params">payLoad: any</span>) =&gt;</span> dispatch(actionCreator(payLoad))</span><br><span class="line">(actionCreators: actionCreator | actionCreator[], <span class="attr">dispatch</span>: <span class="built_in">Function</span>) =&gt; dispatchAction | dispatchAction[]</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>store.subscribe()</code> receives an listeners function and return a function in which you can disengage the listener.</p>
</li>
<li><p><code>connect</code> return a function which like a <code>HOC</code> accepts a component and wrap it to subscribe store’s updates and able to dispatch actions.</p>
<ul>
<li><code>how it works?</code> with <code>Provider</code> component provided by redux we can wrap a component and get the component’s context and children,  then any nested components can access <code>store</code> with <code>Hooks</code> and <code>connect</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(mapStateToProps: mapStateToProps, <span class="attr">mapDispatchToProps</span>: mapDispatchToProps, <span class="attr">mergeProps</span>: mergeProps, options) =&gt; (<span class="function">(<span class="params">component</span>) =&gt;</span> connectedComponent)</span><br><span class="line"></span><br><span class="line"><span class="comment">//  combine state and component&#x27;s props and pass to the component, if this argument is passed to the components, then mapStateToProps will be executed as every time the store and own-props are updated.</span></span><br><span class="line">type mapStateToProps = <span class="function">(<span class="params">state: object,  ownProps?: object</span>) =&gt;</span> stateProps</span><br><span class="line"><span class="comment">// wrap actions as a part of props pass to the component</span></span><br><span class="line">type mapDispatchToProps = <span class="function">(<span class="params">dispatch: <span class="built_in">Function</span>,  props?: object</span>) =&gt;</span> dispatchProps</span><br><span class="line"><span class="comment">// return an object as a result of mapStateToProps and mapDispatchToProps</span></span><br><span class="line">type mergeProps = <span class="function">(<span class="params">stateProps, dispatchProps, ownProps</span>) =&gt;</span> mapStateToProps &amp; mapDispatchToProps</span><br><span class="line"></span><br><span class="line">type stateProps = any</span><br><span class="line"></span><br><span class="line">interface dispatchProps &#123;</span><br><span class="line">  <span class="attr">dispatchPlainObject</span>: <span class="function">() =&gt;</span> dispatch(action)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>middleware</code> is used to inject a third-party in the redux processing, allow you to do sth (like logging, crash reporting, talking to an asynchronous API, routing, and more) after an action is dispatched and before a reducer update the state.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(getState: store.getState, action, <span class="attr">next</span>: <span class="function">(<span class="params">action</span>) =&gt;</span> <span class="keyword">void</span>) =&gt; <span class="keyword">void</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>action =&gt; middleware =&gt; reducer =&gt; state</code></li>
<li><code>next</code> is used to pass <code>action</code> to the next middleware. you can pass the current action to continue the middleware chain or pass another action.</li>
<li><code>middleware chin</code>: an action can have an array of middleware that is linked by <code>next</code>.<ul>
<li><strong>tips:</strong> if <code>next</code> is used in a middleware for passing another action, then that action will be directly to the reducer and will not go through its own middleware chain</li>
</ul>
</li>
<li>use <code>dispatch</code> inside a middleware will stop current middleware chain and start another middleware chin.</li>
<li>it is not different, either use <code>dispatch</code>, or <code>next</code>, or do nothing to stop middleware chain.</li>
</ul>
</li>
</ul>
<h3 id="redux-toolkit"><a href="#redux-toolkit" class="headerlink" title="redux-toolkit"></a>redux-toolkit</h3><ul>
<li>core api<ul>
<li>createAction，createReducer</li>
<li>createSlice：including <code>createAction</code> and <code>createReducer</code></li>
<li>PayloadAction：<code>ts</code> 泛型，用以声明 <code>action.payload</code></li>
</ul>
</li>
</ul>
<blockquote>
<p>createAsyncThunk</p>
</blockquote>
<p>accepts <strong>a Redux action type string</strong> and <strong>a callback function that should return a promise</strong>. return <code>a standard Redux thunk action creator</code></p>
<h3 id="V19"><a href="#V19" class="headerlink" title="V19"></a>V19</h3><ul>
<li><p>useActionState</p>
</li>
<li><p>useFormStatus</p>
<ul>
<li>only returns status information for a parent <code>&lt;form&gt;</code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function Submit() &#123;</span><br><span class="line">  const &#123; pending &#125; = useFormStatus()</span><br><span class="line">  return (</span><br><span class="line">    &lt;button type=&quot;submit&quot; disabled=&#123;pending&#125;&gt; &#123;pending ? &quot;Submitting...&quot; : &quot;Submit&quot;&#125; &lt;/button&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line">function Username() &#123;</span><br><span class="line">  const &#123; pending, data &#125; = useFormStatus()</span><br><span class="line">  console.log(&quot;Username&quot;, data?.getAll(&quot;username&quot;))</span><br><span class="line">  return &lt;input type=&quot;text&quot; name=&quot;username&quot; disabled=&#123;pending&#125; /&gt;</span><br><span class="line">&#125;</span><br><span class="line">function Form() &#123;</span><br><span class="line">  const &#123; pending &#125; = useFormStatus()</span><br><span class="line">  console.log(&quot;Form&quot;, pending) // always false</span><br><span class="line">  return (</span><br><span class="line">    &lt;form action=&#123;submitForm&#125;&gt;</span><br><span class="line">      &lt;Username /&gt;</span><br><span class="line">      &lt;Submit /&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>useOptimistic</p>
</li>
</ul>
<h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><h3 id="vueLifecycle"><a href="#vueLifecycle" class="headerlink" title="vueLifecycle"></a>vueLifecycle</h3><ul>
<li>(replaced by setup in vue3) before / after component instance create</li>
<li>before / after dom mount</li>
<li>before / after <code>state update</code></li>
<li>before component instance destroy &gt; onBeforeUnmount &gt; component instance destroyed &gt; unmounted</li>
<li>errorCaptured</li>
<li>onActivated &amp;&amp; deActivated, when the component is include in <code>keep-alive</code></li>
</ul>
<h3 id="improvementsInVue3"><a href="#improvementsInVue3" class="headerlink" title="improvementsInVue3"></a>improvementsInVue3</h3><ul>
<li><p><strong><code>Patch Flags</code></strong>, marks dynamic nodes <code>&lt;h1&gt;&#123;&#123; title &#125;&#125;&lt;/h1&gt;</code> from static nodes <code>&lt;p&gt;Static content&lt;/p&gt;</code>, avoiding unnecessary updates</p>
</li>
<li><p><strong><code>Static Hoisting</code></strong>, extracts static elements out of the render function, reducing computations</p>
</li>
<li><p><strong><code>Cache Event Handlers</code></strong>, event listeners to prevent redundant function creations during re-renders</p>
</li>
<li><p><strong>Options API vs Composition API</strong></p>
</li>
<li><p>better ts support, a seriers runtime functions, like <code>defineProps</code>, <code>withDefaults</code><br>vuejs.org/api/utility-types#proptype-t<br>vuejs.org/guide/typescript/composition-api#typing-component-props</p>
</li>
<li><p>Pinia</p>
<ul>
<li>Pinia uses Vue 3’s reactive() API to create reactive objects. Less boilerplate, and simpler than <code>vuex</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive, computed &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> state = reactive(&#123; <span class="attr">count</span>: <span class="number">0</span> &#125;);</span><br><span class="line"><span class="keyword">const</span> doubleCount = computed(<span class="function">() =&gt;</span> state.count * <span class="number">2</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">increment</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  state.count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> &#123; state, doubleCount, increment &#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>new features in vue3</p>
<ul>
<li><code>Teleport</code> (Move elements outside the component)</li>
<li><code>Fragments</code> (Multiple root elements)</li>
<li><code>Suspense</code> (Handle async components better)</li>
</ul>
</li>
</ul>
<h3 id="vueReactivitySystem"><a href="#vueReactivitySystem" class="headerlink" title="vueReactivitySystem"></a>vueReactivitySystem</h3><ul>
<li><code>Object.defineProperty()</code> vs <code>ES6 Proxies</code> based<ul>
<li>detect new properties dynamically</li>
<li>automatically tracked Array and object mutations</li>
</ul>
</li>
</ul>
<p>what vue3 do</p>
<ul>
<li>creates a proxy to wrap the object</li>
<li>intercepts operation to a property, access or modify</li>
<li>auto tracks which components or computed properties depend on that property</li>
</ul>
<h3 id="reactive-vs-ref"><a href="#reactive-vs-ref" class="headerlink" title="reactive-vs-ref"></a>reactive-vs-ref</h3><p>reactive for complex object and ref for simple primitives</p>
<ul>
<li><code>reactive</code><ul>
<li>only works for object, not js primitives(<code>string</code>, <code>number</code>…), but can work for a group of primitives</li>
<li><code>reactive</code> CANNOT be reassigned</li>
</ul>
</li>
<li><code>ref</code><ul>
<li>calls <code>reactive</code> under the hood</li>
<li>works for primitives</li>
</ul>
</li>
</ul>
<h3 id="compositionApi"><a href="#compositionApi" class="headerlink" title="compositionApi"></a>compositionApi</h3><p>provides logic composition capabilities, like React Hooks<br><a href="https://vuejs.org/guide/extras/composition-api-faq.htm">composition faq</a><br><a href="https://vuejs.org/guide/reusability/composables">composables</a></p>
<p><strong>compare to options api</strong></p>
<ul>
<li>less organized, but more flexible and logic reuse ability. with Options API, everything has its place based on the option it falls under, but poses serious limitations when a single component’s logic complexity grows</li>
<li>better type inference</li>
<li>more efficient and minification-friendly.<ul>
<li>with options api, reference a property in the template <code>&#123;&#123; message &#125;&#125;</code>—Vue accesses it via an instance proxy (i.e., through this.message). This proxy is responsible for managing reactivity and ensuring that updates trigger re-renders.</li>
<li>with comparison-api, the template is compiled as a function inlined in the same scope of the <code>&lt;script setup&gt;</code> code, so it access variables declared inside <code>&lt;script setup&gt;</code> without an instance proxy in between</li>
<li>this difference leads more efficient and better minification because all the variable names can be safely shortened.</li>
</ul>
</li>
</ul>
<p><strong>compare to react hooks</strong></p>
<ul>
<li>Invokes <strong>setup()</strong> code only once, while <code>React Hooks</code> are invoked repeatedly every time a component updates</li>
<li>in react, functions are re-created on every render. function reference changes cause unnecessary child updates by default, and require explicit <code>useCallback</code> as an optimization. while <code>vue reactivity system</code> intelligently tracks dependencies – It only re-renders components that actually need updates.</li>
<li>no need to manually declare dependencies. <code>Vue&#39;s runtime reactivity system</code> automatically collects reactive dependencies used in computed properties and watchers</li>
</ul>
<p><strong>Vue Reactivity System</strong>, the foundation of how Vue tracks and updates data changes<br><strong>Vue’s runtime reactivity system</strong>, refers specifically to the <em>runtime behavior</em> of Vue’s reactivity system, focuses on how Vue handles reactivity while the application is running, e.g. Detecting changes to reactive data, Managing the dependency graph</p>
<h3 id="vue-esm-bundler-vs-vue-runtime-esm-bundler-js"><a href="#vue-esm-bundler-vs-vue-runtime-esm-bundler-js" class="headerlink" title="vue.esm-bundler-vs-vue.runtime.esm-bundler.js"></a>vue.esm-bundler-vs-vue.runtime.esm-bundler.js</h3><p>vue.esm-bundler</p>
<ul>
<li>contains both the <code>runtime</code>(the core features of vue) and the <code>template compiler</code>(compile templates into render functions).</li>
<li>often used in scenarios where the templates are not pre-compiled during the build phase and user want Vue to handle the compilation of templates on the fly. like ssr, CDN</li>
</ul>
<p><code>vue.runtime.esm-bundler.js</code></p>
<ul>
<li>contains only the <code>runtime</code></li>
<li>designed for bundled environments where templates are pre-compiled during the build process using tools like <code>Vite</code></li>
</ul>
<h3 id="vue-css-features"><a href="#vue-css-features" class="headerlink" title="vue-css-features"></a>vue-css-features</h3><ul>
<li><p><code>scoped css</code>, achieved by using <code>PostCSS</code>, only apply to the current component</p>
<ul>
<li><p><code>:deep()</code>, to affect <strong>child components</strong></p>
</li>
<li><p><code>:slotted</code>, to affect contents rendered by <code>&lt;slot/&gt;</code>, contents in <code>slot</code> are owned by the parent component</p>
</li>
<li><p>use <code>class</code> rather than <code>tag selector</code></p>
<ul>
<li><code>tag selector</code> with <code>scoped</code> will generate HTML for tags to include <code>data-v-*</code> attribute.</li>
<li><code>attribute selectors</code>(like p[data-v-123abc]) are more computationally expensive because Browsers need to inspect each element’s attributes</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, World!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">  <span class="comment">// after transform</span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">data-v-123abc</span>&gt;</span>Hello, World!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="selector-tag">p</span> &#123; <span class="attribute">color</span>: red; &#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>:global</code>, to apply one rule globally</p>
</li>
</ul>
</li>
<li><p><code>css modules</code>, compiled as <code>CSS Modules</code></p>
</li>
<li><p><code>v-bind</code>, <code>color: v-bind(&#39;theme.color&#39;);</code> linking CSS values to dynamic component state</p>
</li>
</ul>
<h3 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h3><ul>
<li><p>similar to useMemo(), the function will re-evaluate when some of its reactive dependencies have changed</p>
</li>
<li><p>a <code>computed</code> variable can be re-written by a setter</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fullName = computed(&#123;</span><br><span class="line">  <span class="comment">// getter</span></span><br><span class="line">  <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> firstName.value + <span class="string">&#x27; &#x27;</span> + lastName.value</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// setter</span></span><br><span class="line">  <span class="function"><span class="title">set</span>(<span class="params">newValue</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// Note: we are using destructuring assignment syntax here.</span></span><br><span class="line">    [firstName.value, lastName.value] = newValue.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h3><p>similar to <code>useEffect(() =&gt; &#123;&#125;, [data])</code>, listen to data change</p>
<h3 id="nextTick"><a href="#nextTick" class="headerlink" title="nextTick()"></a>nextTick()</h3><p>a callback after a state change to wait for the DOM updates to complete.</p>
<h3 id="vue-components"><a href="#vue-components" class="headerlink" title="vue-components"></a>vue-components</h3><p><strong>register</strong></p>
<p>A Vue component *needs to be <em>registered</em> so that Vue knows where to locate its implementation when it is encountered in a template.</p>
<ul>
<li>Global, <code>app.component()</code></li>
<li>local, through import in <code>&lt;script setup&gt;</code>,  <code>components</code> option in <code>non-&lt;script setup&gt;</code></li>
<li>can be load by <code>defineAsyncComponent</code>, similar to react import + lazy + suspense</li>
</ul>
<p><strong>communication</strong></p>
<ul>
<li>parent -&gt; child, pass props and functions with <code>v-bind</code> and <code>v-on</code><ul>
<li>in child<ul>
<li><code>defineModel</code>, exclusively for <code>v-model</code></li>
<li><code>defineProps()</code>, get <code>props</code></li>
<li><code>slot</code>, get the children or a named child(named slots)</li>
</ul>
</li>
</ul>
</li>
<li>child -&gt; parent<ul>
<li><code>emits</code>, like callbacks in props</li>
<li><code>v-module</code>, creates a two-way data binding</li>
</ul>
</li>
<li>despite layer<ul>
<li>ref</li>
<li>provide / inject, similar to context in react</li>
<li>global state management</li>
<li>event bubble</li>
</ul>
</li>
</ul>
<h2 id="bundlers"><a href="#bundlers" class="headerlink" title="bundlers"></a>bundlers</h2><h3 id="tree-shaking"><a href="#tree-shaking" class="headerlink" title="tree shaking"></a>tree shaking</h3><ul>
<li><p>after checking <code>import and export</code>, <code>tree shaking</code> will remove the modules which is imported but doesn’t be used. from this point, what method do we use to import file is critical, and we can know <code>tree shaking</code> only supports <code>ES module</code>.</p>
</li>
<li><p>to import the specific modules instead of the whole library</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Import everything (NOT TREE-SHAKABLE)</span></span><br><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">&#x27;lodash&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CAN BE TREE SHAKEN</span></span><br><span class="line"><span class="keyword">import</span> &#123; debounce &#125; <span class="keyword">from</span> <span class="string">&#x27;lodash&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> debounce <span class="keyword">from</span> <span class="string">&#x27;lodash/lib/debounce&#x27;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>side effect</code> refer to a function will effect the variables or scope outside the function</p>
</li>
<li><p>however, the border between <code>used</code> and <code>not used</code> is not clean, some modules are started to work when it is imported. since <code>object</code> is a reference type, which means that if a function’s arguments are object, then any changes on we made on it will be easily effect the data outside the function. so there has a property <code>sideEffects</code> in the <code>package.json</code> to tell bundler whether should be <code>tree shaking</code>.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  <span class="comment">// all the modules have/haven&#x27;t side effects, and then can&#x27;t/can be tree shaking</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;sideEffects&quot;</span>: <span class="literal">true</span>/<span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// give webpack an array with side effects</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;sideEffects&quot;</span>: [</span><br><span class="line">	<span class="string">&quot;./src/file1.js&quot;</span>,</span><br><span class="line">	<span class="string">&quot;./src/file2.js&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="optimization"><a href="#optimization" class="headerlink" title="optimization"></a>optimization</h3><ul>
<li><code>tree shaking</code></li>
<li><code>compress code</code> by some plugins, like <code>terser</code>, <code>css minimize</code></li>
<li><code>code splitting</code>, use <code>import()</code> to split code into multiple chunk and <code>lazy-loading</code> them. <code>import()</code> can cooperate with <code>suspense</code> feature in react.</li>
</ul>
<h2 id="vite"><a href="#vite" class="headerlink" title="vite"></a>vite</h2><p>based on <code>rollup</code>, and provides a development server or HMR out of the box</p>
<h2 id="turpopack"><a href="#turpopack" class="headerlink" title="turpopack"></a>turpopack</h2><p>currently support nextjs only</p>
<h2 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h2><blockquote>
<p>module building, browser compatibility, code compressing, code splitting, lazy loading</p>
</blockquote>
<h3 id="building-process"><a href="#building-process" class="headerlink" title="building process"></a>building process</h3><ol>
<li>generate a config from the <code>webpack.config.js</code> and the command line.</li>
<li>use <code>compiler</code> module to create a <code>compilation</code> instance which has access to all modules and their dependencies. execute the <code>compiler.run()</code> to start working. <code>compiler</code> and <code>compilation</code> are the heart of webpack, both of them extend from <code>tapable</code>.</li>
<li>analysis process is started from the <code>entry</code> file. use <code>acron parser</code> to generates AST(Abstract Syntax Tree / 抽象语法树) for the <code>entry</code> file.</li>
<li>traverse through entire AST to create a dependency graph. at this stage, if webpack find any matched <code>rules</code> for <code>loader</code>s, the loaders will convert those codes(e.g. css files) into js, and then <code>Parser</code> parses them into AST.</li>
<li>this process will be repeatedly executed for the each dependency, to recursive traverse.</li>
<li>bundle all the files.</li>
<li>in the above process<ol>
<li>webpack compiles the different types of file to js file by <code>loader</code>s<ul>
<li><code>loader</code> is responsible for file converting. every file type can have more than one loader, those loaders will be invoked with method chaining  in order. so the output of a loader will be the arguments of the next loader.</li>
</ul>
</li>
<li><code>compiler</code> will throw some hooks when webpack starts/stops, emit assets, watch mode etc. those events can be listened by <code>plugin</code> and allows <code>plugin</code> to intervene the result of output.<ul>
<li><code>plugin</code> can extends features. listen events sended by compiler allows a plugin to effect the result.</li>
</ul>
</li>
</ol>
</li>
</ol>
<h3 id="boost-build-time"><a href="#boost-build-time" class="headerlink" title="boost build time"></a>boost build time</h3><ul>
<li>webpack cache strategies</li>
<li>get precise time by <code>speed-measure-webpack-plugin</code>, like how long the engine spends in each plugin / loader</li>
<li>save time from each plugin or loader<ul>
<li>ts-loader, use <code>happyPackMode</code> or <code>transpileOnly</code> to turn off type checking. the former will implicitly sets <code>transpileOnly: true</code> and will not reports syntactic errors. it is usually used with <code>happypack</code>.</li>
<li><code>fork-ts-checker-webpack-plugin</code> works for ts type checking in a separate process which runs in parallel with webpack</li>
</ul>
</li>
</ul>
<h3 id="module-federation"><a href="#module-federation" class="headerlink" title="module federation"></a>module federation</h3><p>to expose some of our components to the outside, and therefor which can be used in other projects.<br>this feature is considered as an idea of micro-frontend</p>
<h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><p>http: HTTP &gt; TCP &gt; IP &gt; MAC<br>https: HTTP(application) &gt; SSL/TSL(application) &gt; TCP(transport) &gt; IP(internet) &gt; MAC(link)<br>http2: HTTP &gt; HPack and Stream&gt; SSL/TSL &gt; TCP &gt; IP &gt; MAC</p>
<ul>
<li><p><strong>http vs https</strong></p>
<ul>
<li><code>http</code> requests are sent in plaintext. HTTPS adds <code>SSL/TLS protocol</code> between <code>TCP</code> and <code>HTTP</code> for encrypting data</li>
<li><code>http</code> uses <code>80 port</code> as default, while <code>https</code> uses <code>403</code> as default</li>
<li>friendly to SEO. Search engines like Google prefer HTTPS websites</li>
<li>HTTPS is seen as a trust signal which will be indicates by browser</li>
</ul>
</li>
<li><p><strong>three-way handshake</strong> is used to establish TCP connection, to ensure that the service and the client both can send and receive data</p>
<ul>
<li>The client sends a SYN packet (SYN = synchronize) to the server, and specifying its initial sequence number. (client can send and server can receive).</li>
<li>the server responds with a packet containing both SYN and ACK(Acknowledgement Number) flags. (server can send)</li>
<li>the client sends back an ACK packet. (client can receive).</li>
<li><strong>what it’s used for</strong><ul>
<li>prevent historical connection</li>
</ul>
</li>
</ul>
</li>
<li><p>127.0.0.1, localhost, 0.0.0.0</p>
<ul>
<li>localhost is domain, equal to 127.0.0.1 which is <code>loopback address(回环地址)</code></li>
</ul>
</li>
<li><p><code>URL</code></p>
<ul>
<li>Reserved characters ： <code>: / ; ? #</code></li>
<li><code>encodeURI</code> <code>decodeURI</code>, don’t encode reserved characters</li>
<li><code>encodeURIComponent</code> <code>decodeURIComponent</code> encode reserved characters</li>
</ul>
</li>
</ul>
<h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><ul>
<li><code>same origin policy</code>, requires same <code>protocol</code>, <code>domain</code> and <code>port</code></li>
</ul>
<p><strong>skip cors</strong></p>
<ul>
<li>nginx <code>proxy_pass</code> + <code>proxy_set_header</code></li>
<li><code>jsonnp</code>, only work for <code>get</code> requests</li>
<li><code>credentials: &#39;include&#39;</code>(allow bring cookie) + <code>Access-Control-Allow-Credentials: true</code></li>
<li><code>Access-Control-Allow-Origin: *</code> will disables the ability to send credentials (such as cookies, authorization headers, or TLS client certificates)</li>
</ul>
<h3 id="http-versions"><a href="#http-versions" class="headerlink" title="http versions"></a>http versions</h3><ul>
<li>http1.0</li>
<li>http1.1<ul>
<li><code>connection:keep-alive</code> feature allows for long-lasting connections</li>
<li>supports <code>pipeline transport</code>(but it’s not allowed in browsers)</li>
<li>It compresses only <code>body</code>, excluding <code>header</code>.</li>
<li>the server responds to requests in the order they were received, a delay in one request can cause subsequent requests to be blocked. This issue is known as <code>head-of-line blocking(队头阻塞)</code>  </li>
</ul>
</li>
<li>http2.0<ul>
<li>Compress both the header and body. Both the client and the server maintain a dynamic table of header information. Every header field is stored in this table and assigned an index number. For headers with the same name, only the index number will be sent. this called <code>HPACK</code></li>
<li>uses binary format, reducing the step of transforming requests into binary form</li>
<li>introduces <code>Stream</code> concept, allowing multiple requests and responses to be sent and received concurrently within a single TCP connection.<ul>
<li>multiple streams exist in one tcp connection, and own a stream-id as an identifier. a full request (request and correspondent response) can be split in frames and then sent with the same stream identifier.</li>
<li>a stream is initiated when client or server sends bytes.</li>
</ul>
</li>
<li>server push. since the server can create stream</li>
<li><code>Head-of-line blocking</code> still exists in the TCP layer. TCP is a byte-oriented protocol, and data is only sent to the application layer when the received bytes are complete. Packet loss triggers TCP to resend the missing packets, which can block all the requests.</li>
</ul>
</li>
<li>http3.0</li>
</ul>
<h3 id="methods"><a href="#methods" class="headerlink" title="methods"></a>methods</h3><ul>
<li><code>post | put | delete</code> contain request body for saving data.</li>
<li><code>get</code>: retrieve data, safe and can be cached</li>
<li><code>post</code>: creating new resources, submitting form data, or sending large amounts of data that cannot be sent in a URL query string.</li>
<li><code>put</code>: updating existing resources</li>
</ul>
<h3 id="headers"><a href="#headers" class="headerlink" title="headers"></a>headers</h3><ul>
<li><p><code>Content-Disposition</code>: a response header which is indicating if the content is expected to be displayed inline in the browser,or as an attachment to downloaded and saved locally.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// inline or attachment</span></span><br><span class="line">res.set(<span class="string">&#x27;Content-Disposition&#x27;</span>, <span class="string">&#x27;attachment; filename=foo.fdf&#x27;</span>);</span><br><span class="line">res.send(_res)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="http-cache"><a href="#http-cache" class="headerlink" title="http cache"></a>http cache</h3><p><strong>memory cache, disk cache</strong></p>
<ul>
<li>cache use priority: 1.Service Worker(in Cache Storage), 2. Memory Cache, 3. Disk Cache, 4. Push Cache(HTTP/2 推送缓存)</li>
<li>memory cache: fast but limited in time; cache is deleted when the browser is closed.</li>
<li>disk cache: need I/O operations during read and write</li>
</ul>
<p><strong>strong cache</strong></p>
<ul>
<li><code>headers</code>, priority: <code>pragma</code> &lt;= <code>cache-control</code> &lt;= <code>expires</code><ul>
<li><code>Expires</code>, an absolute date which is the expire date of the current resource</li>
<li><code>Cache-Control</code><ul>
<li><code>max-age:5000</code>, Specifies the maximum amount of time in seconds</li>
<li><code>no-store</code>, <code>strong cache</code> is not allowed</li>
<li><code>no-cache</code>, submit a request to the server for validation before using <code>strong cache</code></li>
<li><code>private</code></li>
<li><code>public</code></li>
</ul>
</li>
<li><code>Pragma: no-cache</code>, for compatibility with older HTTP/1.0 caches.</li>
</ul>
</li>
</ul>
<p><strong>negotiated cache</strong></p>
<ul>
<li><code>headers</code><ul>
<li><code>Last-Modified</code> / <code>Last-Modified-Since</code>, <code>ETag</code> / <code>If-None-Match</code><ul>
<li><code>Last-Modified</code> set by the server, represents the last modified date of the current resources</li>
<li><code>ETag</code>, set by the server, a hash code represents the current resource</li>
<li><code>Last-Modified-Since / if-none-match</code> sent by the client with the value of <code>Last-Modified / ETag</code> from the previous response. The server compares the values in the request  with the current values. If they match, the server responds with <code>304 Not Modified.</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<p><code>client scenarios</code></p>
<ul>
<li>press <code>f5</code> to refresh: sets <code>Cache-Control:max-age:0;</code>, means the cache is invalid</li>
<li><code>ctrl + f5</code> force to refresh, sets <code>Cache-Control:no-cache</code></li>
</ul>
<h3 id="code"><a href="#code" class="headerlink" title="code"></a>code</h3><ul>
<li>1XX- Informational</li>
<li>2XX- Success</li>
<li>3XX - Redirection<ul>
<li>301 vs 302, 301 is permanent redirection, while 302 is temporary redirection. For permanent redirects, the browser caches the redirection location, so the cached location is used the next time.</li>
<li>302 process<ul>
<li>send a request using ajax</li>
<li>=&gt; server responds with 302, Note that the name for the 302 response is “Found” – what it means is “The content you were looking for exists, but in a different location login.”</li>
<li>=&gt; browser hears that the stuff it was looking for is actually at login instead. So it sends another request to login through ajax. In other words, it sends another asynchronous request in the background.</li>
<li>=&gt; server responds with a 200, and tells the contents of login. at the end, we can catch this 200 response and a <code>responseURL</code> of  302</li>
</ul>
</li>
</ul>
</li>
<li>4XX - Client Error, 400 Bad Request, 401 Unauthorized, 404 Not Found</li>
<li>5XX - Server Error, 500 Internal Server Error, 502 Bad Gateway, 503 Service Unavailable</li>
</ul>
<h3 id="https-optimization"><a href="#https-optimization" class="headerlink" title="https optimization"></a>https optimization</h3><ul>
<li>reduce the number of request<ul>
<li>use http cache</li>
<li>combine small and light requests, like small images</li>
</ul>
</li>
<li>use compress as needed<ul>
<li><code>lossless compression</code>, <code>Accept-Encoding: gzip, deflate</code> <code>Content-Encoding: gzip</code></li>
<li><code>lossy compression</code>, <code>Accept: audio/*; q=0.2, audio/basic</code>, q refer to the number of quality</li>
</ul>
</li>
</ul>
<h2 id="thread-and-process"><a href="#thread-and-process" class="headerlink" title="thread and process"></a>thread and process</h2><h2 id="real-time-communication"><a href="#real-time-communication" class="headerlink" title="real-time communication"></a>real-time communication</h2><h3 id="SSE"><a href="#SSE" class="headerlink" title="SSE"></a>SSE</h3><p>http long-lasting connection<br>plain text only<br>one-way communication, server to client<br>standard HTTP connection</p>
<h3 id="Websocket"><a href="#Websocket" class="headerlink" title="Websocket"></a>Websocket</h3><p>Relies on Protocol TCP, Uses WSS (WebSocket Secure) over TLS/SSL<br>use HTTP handshake, and then upgrade to <code>ws</code> protocol</p>
<p>free for CORS<br>plain text and binary format<br>bidirectional communication, server to client and client to server</p>
<h3 id="mqtt"><a href="#mqtt" class="headerlink" title="mqtt"></a>mqtt</h3><p>Relies on Protocol TCP / IP, can work over WebSocket as a transport layer for web browser compatibility<br>Publish-Subscribe messaging protocol<br>Lightweight Binary Format (Optimized for IoT)<br><code>Broker</code> can retain messages for offline clients</p>
<h3 id="long-polling"><a href="#long-polling" class="headerlink" title="long-polling"></a>long-polling</h3><p>extending the time of timeout, and the server holds the request open until it has new data to send to the client or until a timeout occurs</p>
<h2 id="package-mangagers"><a href="#package-mangagers" class="headerlink" title="package mangagers"></a>package mangagers</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm version patch // v1.0.1</span><br><span class="line">npm version prepatch // v1.0.2-0</span><br><span class="line">npm version minor // v1.1.0</span><br><span class="line">npm version major // v2.0.0</span><br><span class="line">npm publish --access public</span><br></pre></td></tr></table></figure>

<ul>
<li>control the files of a <strong>package</strong><ul>
<li>define the <code>file</code> field in the <code>package.json</code></li>
<li><code>.npmignore</code>, is same as <code>gitignore</code></li>
</ul>
</li>
<li>rules<ul>
<li><code>^</code>, install the latest minor or patch versions that are <code>&gt;=3.2.0</code> and <code>&lt;4.0.0</code></li>
</ul>
</li>
</ul>
<h4 id="Corepack"><a href="#Corepack" class="headerlink" title="Corepack"></a>Corepack</h4><ul>
<li><code>Corepack</code> is included with all official Node.js releases starting from Node.js 14.19 / 16.9. It’s however opt-in for the duration of the <code>experimental stage</code>, so you’ll need to run <code>corepack enable</code> before it’s active.</li>
<li><code>packageManager</code> in package.json is used to set a certain package manager with version</li>
<li><em>environment issue</em>: corepack will going to install yarn or pnpm after enabled, but corepack doesn’t share the same mirror source configuration as <code>npm</code></li>
</ul>
<h3 id="peer-dependencies"><a href="#peer-dependencies" class="headerlink" title="peer dependencies"></a>peer dependencies</h3><p><code>peer dependencies</code> are a special type of dependency that are expected to be provided by the consumer of the package. A package specifies its <code>peer dependencies</code> when it requires another package but doesn’t want to install it itself, instead relying on the host application to provide it.<br>a package like <code>react-router-dom</code> might have a peer dependency on <code>react</code>.</p>
<h3 id="ghost-dependencies"><a href="#ghost-dependencies" class="headerlink" title="ghost dependencies"></a>ghost dependencies</h3><p><code>Ghost dependencies</code> refer to dependencies that are listed in a project’s package.json or node_modules, but are not actually used in the project.</p>
<p><strong>reasons</strong></p>
<ul>
<li>Accidental Installation,</li>
<li>if a direct dependency is removed, but its sub-dependencies can be remained.</li>
<li>a package is removed but not tracked by the package manager</li>
</ul>
<p><strong>resolve</strong></p>
<ul>
<li>Each manager has its own way of cleaning ghost dependencies. commands like <code>npm prune</code> or <code>yarn autoclean</code>, or settings yarn’s <code>packageExtensions</code></li>
<li>tools like <code>depcheck</code></li>
</ul>
<h3 id="Hoisting"><a href="#Hoisting" class="headerlink" title="Hoisting"></a>Hoisting</h3><p>spreads common packages as far up the tree as possible so other packages can share them as well</p>
<h3 id="yarn"><a href="#yarn" class="headerlink" title="yarn"></a>yarn</h3><ul>
<li><code>Yarn PnP</code> storing everything in a global directory, a <code>.pnp.cjs</code> that contains <code>symlinks</code> remaind in the <code>node_modules</code> folder.</li>
<li><code>offline mirror</code><ul>
<li>setting <code>enableGlobalCache</code> to false</li>
<li>save the package cache into a folder local to the project that can then be added to Git.</li>
</ul>
</li>
<li>zero-install can be achived through <code>offline mirror</code> and <code>Yarn PnP</code></li>
</ul>
<h3 id="pnpm"><a href="#pnpm" class="headerlink" title="pnpm"></a>pnpm</h3><h2 id="Vscode"><a href="#Vscode" class="headerlink" title="Vscode"></a>Vscode</h2><table>
<thead>
<tr>
<th>short key</th>
<th>function</th>
</tr>
</thead>
<tbody><tr>
<td>Ctrl+Shift+[</td>
<td>折叠</td>
</tr>
<tr>
<td>Ctrl+Shift+]</td>
<td>展开</td>
</tr>
<tr>
<td>ctrl+d</td>
<td>选中单词</td>
</tr>
<tr>
<td>alt+shift+鼠标点选</td>
<td>多个位置</td>
</tr>
<tr>
<td>alt +鼠标点选</td>
<td>选中</td>
</tr>
<tr>
<td>alt + z</td>
<td>word break</td>
</tr>
<tr>
<td>ctrl + shift + L</td>
<td>pitch on the same words simultaneously</td>
</tr>
<tr>
<td>ctrl + shift + p</td>
<td>show command menu</td>
</tr>
<tr>
<td>Setting json</td>
<td>C:\Users\tong\AppData\Roaming\Code\User</td>
</tr>
<tr>
<td>Line break</td>
<td>“files.eol”: “\n”</td>
</tr>
<tr>
<td>ctrl + g</td>
<td>go to a specif line</td>
</tr>
</tbody></table>
<style>
  .postDetail strong {
    color: #0a95ff ;
    background: rgb(10 149 255 / 10%);
    padding: 0px 2px;
    border-radius: 3px;
    font-size: 88%
  }
  .postDetail em {
    border-bottom: 1px solid;
    font-weight: bold;
    font-size: 90%
  }
  .postDetail li {
    list-style: circle !important;
  }
</style>

]]></content>
      <categories>
        <category>Notes</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>shell</title>
    <url>/2025/02/16/notes_shell/</url>
    <content><![CDATA[<ul>
<li><p>write a shell script with multiple line</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">- <span class="string">|-</span></span><br><span class="line">    if [ <span class="string">&quot;$ENV&quot;</span> == <span class="string">&quot;pro&quot;</span> ]; then</span><br></pre></td></tr></table></figure>
</li>
<li><p>cancel a job</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="keyword">exit</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>[ -z &quot;$Base_Ref&quot; ]</code> <code>-z</code>: Tests if the variable is empty or undefined.</p>
</li>
<li><p><code>echo &quot;VAR2=$VAR2&quot; &gt;&gt; variables.txt</code>: <code>&gt;</code> Redirects output, overwriting the file if it exists.</p>
</li>
<li><p><code>&gt;&gt;</code> Redirects output and appends it to the file, preserving existing content.</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Notes</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>2025-03</title>
    <url>/2025/03/01/202503/</url>
    <content><![CDATA[<h2 id="2025-03-16"><a href="#2025-03-16" class="headerlink" title="2025/03/16"></a>2025/03/16</h2><ul>
<li><a href="/2021/11/17/notes_js/#renderOptimization">will-change</a> and <a href="/2021/11/17/notes_js/#renderOptimization">contain</a></li>
<li><a href="/2021/11/17/notes_js/#improvementsInVue3">improvementsInVue3</a></li>
</ul>
<h2 id="2025-03-08"><a href="#2025-03-08" class="headerlink" title="2025/03/08"></a>2025/03/08</h2><ul>
<li><p>incorrect <strong>merge two union types using <code>&amp;</code></strong> results in <code>never</code>.</p>
</li>
<li><p><strong>merging types with conflicting property results in <code>never</code></strong>, whereas merging such conflicts in an interface triggers a compile-time error.”</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> A = &#123; <span class="attr">id</span>: <span class="built_in">string</span> &#125;;</span><br><span class="line"><span class="keyword">type</span> B = &#123; <span class="attr">id</span>: <span class="built_in">number</span> &#125;;</span><br><span class="line"><span class="keyword">type</span> C = A &amp; B; <span class="comment">// &#123; id: never &#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>changes in dates during <code>rebase</code></strong>. git tracks two date timestamps <code>Author Date</code> and <code>Committer Date</code>. <code>git rebase</code> can modifies commit history, which affects <code>committerDate</code>. the default behavior preserves <code>authorDate</code>, and updates <code>committerDate</code> to the <code>rebase</code> time</p>
<ul>
<li><code>authorDate</code> (Creation Date) – When the commit was created.</li>
<li><code>committerDate</code> (Last Modified Date) – When the commit was last modified.</li>
<li><code>git rebase --ignore-date</code> ensures both <code>authorDate</code> and <code>committerDate</code> remain unchanged</li>
</ul>
</li>
<li><p>TS的<code>enum</code>编译为IIFE（立即执行函数）</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Daily Snippets</category>
      </categories>
  </entry>
</search>
